<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo多电脑同步及未解决的坑</title>
    <url>/2020/04/21/Hexo%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9C%AA%E8%A7%A3%E5%86%B3%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>​    同步Hexo博客时遇到的各种奇葩的问题，当然最后还是没有搞懂啦(看懂是看不懂的，百度又百度不到=_=，就只能将就的样子)，只是记录下这些<strong>莫名奇妙的坑</strong>和<strong>网上搜罗的同步步骤</strong>。</p>
<a id="more"></a>

<p>​    之前顺利的部署了Hexo博客之后，就在想之后要是在不同设备上难不成还要再按网上步骤部署一遍，自定义主题再配置一遍，文档啥的，还要再手动<code>ctrl+c</code>和<code>ctrl+v</code>一次？那也太麻烦了吧？</p>
<p>​    不出所料，网上果然有同步设备之间进行Hexo博客同步的教程。只可惜真的是太乱了，不是你抄我，就是我抄你，其实这还不是最主要的，能解决问题就好了。可惜不是那么的顺利，真是一步一个坑。那些坑，我现在都满头的问号，所以这篇博客就记录下这些莫名的坑和我之后在网上找的看起来比较靠谱，自己试过且没报错的教程。</p>
<p>​    网上关于同步不同设备之间的Hexo博客的教程，基本上就是将Hexo博客根目录下的<strong>源文件夹备份</strong>到静态博客部网站(我是部署到了github上)的另外一个分支上。之后在其他设备上进行转移的时候，把源文件夹再拷贝下来，再进行简单的配置即可。</p>
<p>​    具体怎么<strong>备份</strong>，具体怎么再拷贝下来，网上的内容纷繁复杂，我挑了几个觉得看起来比较靠谱的：</p>
<ul>
<li><p>首先是这位仁兄的博客<a href="https://www.dazhuanlan.com/2020/02/03/5e36f70fc57fd/" target="_blank" rel="noopener">大专栏</a>，发布时间为2020年2月份，虽然里面删除<code>.git</code>文件夹的命令写错了，但无伤大雅，能让我了解大概的流程。</p>
</li>
<li><p>然后是CSDN上的一片博客<a href="https://blog.csdn.net/qq_35684085/article/details/85767516" target="_blank" rel="noopener">最安全的 hexo 多电脑同步博客解决方案–非新建分支</a>，19年的，这篇博客在网上都不知道被转了几手了，我找的这篇也不知道是不是原创…=_=，该篇博客对上一篇博客的一些内容进行了补充，里面提到的一些建议看起来挺完善，但我并没有进行过试验，或者说还没有遇到过该篇里提到的问题，也就无从试验。</p>
</li>
<li><p>再然后是这篇，<a href="https://theqwang.github.io/2017/03/17/%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E9%97%B4%E4%BD%BF%E7%94%A8hexo/#more" target="_blank" rel="noopener">在多台电脑间使用hexo</a>，本来我是打算参照这篇进行备份的。无奈，这位仁兄在“将源文件备份到github上的其他分支”的步骤上，一笔带过，萌新真是看不懂啊，于是就在<code>git push</code>上卡住了，掉进了一个令人万分痛苦的坑里，该坑至今未看懂，百度也摸不到头脑，正是该坑让我想要写这篇博客进行记录，说不定哪年哪月，再看到这篇博客，再去探寻就又有想不到收获呢？(等哪年吧，我现在想起那个坑便一阵犯恶心..)</p>
</li>
<li><p>最后是简书上的一篇<a href="https://www.jianshu.com/p/57b5a384f234" target="_blank" rel="noopener">Hexo博客备份</a>，17年的，我接下来的博客备份也是大部分参照的该篇博客(因为就它提供的步骤没有那些奇奇怪怪的问题—_—)。</p>
<p> ​</p>
<p> 大致絮叨完后，让我们来看看，到底哪些是Hexo博客的源文件夹呢？下面会对Hexo博客根目录下的各个文件夹进行简单说明，以便了解哪些是Hexo的<strong>源文件夹</strong>：</p>
<p> ​</p>
</li>
<li><p><strong>_config.yml</strong>：该文件是站点的配置文件，是<strong>需要备份到github上的，以便换设备时进行拷贝</strong>。</p>
</li>
<li><p><strong>themes</strong>：该文件夹是主题文件夹，里面放的是Hexo的默认主题文件资源，自定义的主题文件也是放到该文夹下的，<strong>需要备份和拷贝</strong>。</p>
</li>
<li><p><strong>source</strong>：存放博客文章的.md文件，<strong>需要备份和拷贝</strong>。</p>
</li>
<li><p><strong>scaffolds</strong>：是博客文章的模板，<strong>需要备份和拷贝</strong>。</p>
</li>
<li><p><strong>package.json</strong>：里面写有安装包的名称，<code>npm install</code>就是通过该文件里记录的来安装相关依赖，<strong>需要备份和拷贝</strong>。</p>
</li>
<li><p><strong>package-lock.json</strong>：这是个啥文件我也不清楚，网上教程大都没有提及该文件，或许是新内容？反正也不大，拷上就完事了，<strong>需要备份和拷贝</strong>。</p>
</li>
<li><p><strong>.gitignore</strong> ：限定在push时哪些文件可以忽略，<strong>需要备份和拷贝</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>.git</strong>：主题和站点都有，标志这是一个git项目，不需要备份和拷贝。</p>
</li>
<li><p><strong>node_modules</strong>：是安装包的目录，在执行<code>npm install</code>的时候会重新生成，不需要备份和拷贝。</p>
</li>
<li><p><strong>public</strong>：是<code>hexo g</code>生成的静态网页，不需要备份和拷贝。</p>
</li>
<li><p><strong>.deploy_git</strong>：同上，<code>hexo g</code>也会生成，其实仔细看，就会发现该文件夹里的文件跟我们部署到github的master分支上的内容一模一样，不需要备份和拷贝。</p>
</li>
<li><p><code>db.json</code>：不需要备份和拷贝。</p>
<p>​</p>
</li>
</ul>
<p>​    接下来，就要开始进行<strong>源文件</strong>的备份了。实现多设备同步的思想就是用github的<strong>master分支存放静态博客资源</strong>，用<strong>hexo分支存放源文件</strong>，当我们更换新设备时，只需<code>git clone xxxxx</code>下来，再<code>npm install</code>和<code>npm install hexo-deployer-git</code>，就大体成了，大概。</p>
<p>​    起先我是想将原先的Hexo博客根目录里初始化成git目录，再将其下的<strong>源文件</strong>上传到github的hexo分支上的，当我输入下列命令时</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push github hexo hexo</span></span><br></pre></td></tr></table></figure>

<p>​    就报出了令我恶心的坑了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">error: dst ref refs/heads/hexo_source receives from more than one src</span><br><span class="line">error: failed to push some refs to 'git@github.com:xingxing-j/xingxing-j.github.io.git'</span><br></pre></td></tr></table></figure>

<p>​    百度嘛，也是各有各的说法，貌似都跟远程仓库上一个叫README.md的文件有关，我寻思我远程仓库也没有README.md呀，难不成非得有？删掉远程仓库，重建，这次添加README.md，重新关联，重新push，不行，还是一样的错误。难不成要先从上面拉取一下？pull完，再push，不行，还是报同样的错….难不成不能用pull，要fetch再reset？试一下，再pull，好嘛，又报了新错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kex_exchange_identification: read: Connection reset by peer</span><br></pre></td></tr></table></figure>

<p>​    这又是什么东西…不知名的ssh错误，我佛了，倒腾了一通宵，卡在第一步的push上，只能放弃在Hexo根目录下push<strong>源文件</strong>的想法。</p>
<p>下面来梳理我即将试验的步骤</p>
<h3 id="0-新建远程仓库"><a href="#0-新建远程仓库" class="headerlink" title="0. 新建远程仓库"></a>0. 新建远程仓库</h3><p>​    把原先github上的博客仓库删掉，新建一个<strong>一模一样的空仓库</strong>，就跟部署博客时要新建的仓库步骤一样，这里便不再赘述，网上教程很多。建完后，如果没有手动建README.md，在<strong>本地初始化一个git目录</strong> ，再新建README.md，按github的图示，将该目录与远程仓库关联，进行第一次的<code>git add .</code>、<code>git commit -m &#39;message&#39;</code>、<code>git push -u 远程仓库名称 master</code>，这里应该是能push上去的。</p>
<p>​    搞这么多的目的就是要让远程仓库的master分支出现，我们才能整出远程仓库的hexo分支。远程仓库建好hexo后，就可以进行clone了，注意哦，此时远程仓库里，不管是master分支还是hexo分支，就只有个README.md哦。</p>
<h3 id="1-克隆hexo分支"><a href="#1-克隆hexo分支" class="headerlink" title="1. 克隆hexo分支"></a>1. 克隆hexo分支</h3><p>​    接着，在原先的文件夹也好，新建文件夹也好，右键<code>Git Bash</code>，调出命令框，<code>git clone 远程仓库地址</code>克隆hexo分支，这里的clone命令，不需要在Git目录下也能执行哦，我才是才知道+_+。</p>
<h3 id="2-转移源文件夹"><a href="#2-转移源文件夹" class="headerlink" title="2. 转移源文件夹"></a>2. 转移源文件夹</h3><p>​    把之前博客根目录下的源文件复制到刚才clone好的文件夹里，<strong>_config.yml</strong>、<strong>themes</strong>、<strong>source</strong>、<strong>scaffolds</strong>、<strong>package.json</strong>、<strong>package-lock.json</strong>和<strong>.gitignore</strong> 。</p>
<p>​    网上的教程还提到了themes/next里.git文件夹，需要拿出来，可我的没有，只有个.github文件夹，也就顺手拿出来了。</p>
<h3 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3. 安装插件"></a>3. 安装插件</h3><p>​    还是那个文件所有，执行<code>npm install</code>和<code>npm install hexo-deployer-git</code>或<code>cnpm install</code>和<code>cnpm install hexo-deployer-git</code>（这里可以看一看分支是不是显示为hexo）</p>
<h3 id="4-备份源文件到hexo分支上"><a href="#4-备份源文件到hexo分支上" class="headerlink" title="4. 备份源文件到hexo分支上"></a>4. 备份源文件到hexo分支上</h3><p>​    我严重怀疑我git相关命令不熟，连怎么push,怎么pull都不清楚，所有一有问题就歇菜。</p>
<p>​    <strong>git push 吧!!!</strong>经过上面的两步操作后，再执行<code>git add .</code>、<code>git commit -m &quot;&quot;</code>，</p>
<p>最后<code>git push 远程仓库名称 hexo hexo</code>应该就能push上去了吧。</p>
<h3 id="5-部署静态资源"><a href="#5-部署静态资源" class="headerlink" title="5. 部署静态资源"></a>5. 部署静态资源</h3><p>​    执行<code>hexo g &amp;&amp; hexo d</code>生成静态网页部署至Github上。</p>
<p>至此，源文件和静态资源都备份到github上了。</p>
<h3 id="换设备时的操作步骤"><a href="#换设备时的操作步骤" class="headerlink" title="换设备时的操作步骤"></a>换设备时的操作步骤</h3><ul>
<li>安装git</li>
<li>安装Nodejs和npm</li>
<li>使用<code>git clone 远程仓库地址</code>将仓库拷贝至本地</li>
<li>在文件夹内执行以下命令<code>npm install hexo-cli -g</code>、<code>npm install</code>、<code>npm install hexo-deployer-git</code>或<code>cnpm install hexo-cli -g</code>、<code>cnpm install</code>、<code>cnpm install hexo-deployer-git</code>。</li>
</ul>
<h3 id="修改时的操作"><a href="#修改时的操作" class="headerlink" title="修改时的操作"></a>修改时的操作</h3><p>​    <strong>每当修改博客（包括修改主题样式、发布新文章等）前</strong>，不管实际内容有没有改变，都建议执行以下操作(我也不知道为什么，大概是为了保险吧)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch --all #将git上所有文件拉取到本地</span><br><span class="line">git reset --hard origin/hexo  #强制将本地内容指向刚刚同步github上的hexo分支</span><br></pre></td></tr></table></figure>

<p>​    </p>
<p>​    <strong>每当修改博客（包括修改主题样式、发布新文章等）后</strong>：</p>
<ol>
<li>依次执行<code>git add .</code>、<code>git commit -m &quot;&quot;</code>、<code>git push 远程仓库名称 hexo</code>来提交hexo网站源文件；</li>
<li>执行<code>hexo g &amp;&amp; hexo d</code>生成静态网页部署至Github上。</li>
</ol>
<h3 id="强烈建议"><a href="#强烈建议" class="headerlink" title="强烈建议"></a>强烈建议</h3><p>​    没有熟悉使用Git时，<strong>一定要时常备份源文件</strong>，要不然都不知道怎么回退的时候，资料丢了就无语了。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>同步</tag>
        <tag>坑</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet之文件上传</title>
    <url>/2020/04/20/Servlet%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>用Servlet进行文件上传的两种方式</p>
<a id="more"></a>

<h4 id="文件上传三要素"><a href="#文件上传三要素" class="headerlink" title="文件上传三要素"></a>文件上传三要素</h4><ol>
<li>请求方式：Post</li>
<li>页面必须有<strong>&lt;input type=”file”/&gt;</strong></li>
<li>请求的enctype必须为multipaart/form-data</li>
</ol>
<h4 id="文件上传方式一"><a href="#文件上传方式一" class="headerlink" title="文件上传方式一"></a>文件上传方式一</h4><p>该方式依赖两个包，commons -io.jar  commons-fileupload.jar</p>
<p>示例代码 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/fileUpload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">        ServletFileUpload fileUpload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿真实路径？</span></span><br><span class="line">        String realPath = req.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">        <span class="comment">// 在服务器里创建文件夹？</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;FileItem&gt; list = fileUpload.parseRequest(req);</span><br><span class="line">            <span class="keyword">for</span> (FileItem item : list) &#123;</span><br><span class="line"><span class="comment">//                System.out.println(item.getString());</span></span><br><span class="line"><span class="comment">//                System.out.println(item.getName());</span></span><br><span class="line">				<span class="comment">// isFormField判断是否为文件，是返false,否返true</span></span><br><span class="line">                <span class="keyword">if</span> (!item.isFormField()) &#123;</span><br><span class="line">                    item.write(<span class="keyword">new</span> File(realPath, item.getName()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件上传方式二"><a href="#文件上传方式二" class="headerlink" title="文件上传方式二"></a>文件上传方式二</h4><p>该方式依赖于Servlet3.0，并结合了ajax</p>
<h5 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>异步上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.12.4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">id</span>=<span class="string">"img"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"button"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取表单数据对象</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 向表单数据对象中添加上传的文件对象</span></span></span><br><span class="line"><span class="javascript">                formData.append(<span class="string">"img"</span>, $(<span class="string">"#img"</span>)[<span class="number">0</span>].files[<span class="number">0</span>]);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 用ajax进行异步提交</span></span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">                    url: <span class="string">"/fileUpload2"</span>,</span></span><br><span class="line"><span class="actionscript">                    type: <span class="string">"post"</span>,</span></span><br><span class="line">                    data: formData,</span><br><span class="line"><span class="actionscript">                    contentType: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                    processData: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                    success: <span class="function"><span class="keyword">function</span> <span class="params">(resp)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"img"</span>).attr(<span class="string">"src"</span>, resp);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/fileUpload2"</span>)</span><br><span class="line"><span class="meta">@MultipartConfig</span><span class="comment">// 需要此注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.解决编码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">// 2.将上传内容封装到part对象中</span></span><br><span class="line">        <span class="comment">// ***此处getPart()的 参数 为formData.append()里添加的 属性名***</span></span><br><span class="line">        Part part = req.getPart(<span class="string">"img"</span>);</span><br><span class="line">        <span class="comment">// 3.拿真实路径？选择文件存放位置？</span></span><br><span class="line">        String realPath = req.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">        <span class="comment">// 4.获取上传的文件名</span></span><br><span class="line">        String fileName = part.getSubmittedFileName();</span><br><span class="line">        System.out.println(fileName);</span><br><span class="line">        <span class="comment">// 5.获取文件后缀名</span></span><br><span class="line">        String suffixName = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">// 6.拼接UUID获取后缀得新文件名</span></span><br><span class="line">        String newFileName = UUID.randomUUID().toString() + suffixName;</span><br><span class="line">        System.out.println(newFileName);</span><br><span class="line">        <span class="comment">// 7.通过part写出</span></span><br><span class="line">        part.write(realPath + <span class="string">"/"</span> + newFileName);</span><br><span class="line">        <span class="comment">// 8.通过响应向前端返回上传文件的位置</span></span><br><span class="line">        resp.getWriter().write(<span class="string">"/upload/"</span> + newFileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>Jedis工具类和Jackson工具类</title>
    <url>/2020/05/26/Jedis%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%92%8CJackson%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<p>Jackson工具类和Jedis工具类</p>
<a id="more"></a>

<h2 id="Jackson工具类"><a href="#Jackson工具类" class="headerlink" title="Jackson工具类"></a>Jackson工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 将外部配置文件转为字节输入流</span></span><br><span class="line">		InputStream in = JedisUtils.class.getClassLoader().getResourceAsStream("jedis.properties");</span><br><span class="line">		Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			p.load(in);</span><br><span class="line">            <span class="comment">// 配置Jedis配置类</span></span><br><span class="line">			JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">            <span class="comment">// 设置maxIdle和maxTotal</span></span><br><span class="line">			config.setMaxIdle(Integer.parseInt(p.getProperty(<span class="string">"maxIdle"</span>)));</span><br><span class="line">			config.setMaxTotal(Integer.parseInt(p.getProperty(<span class="string">"maxTotal"</span>)));</span><br><span class="line">			jedisPool = <span class="keyword">new</span> JedisPool(config, p.getProperty(<span class="string">"host"</span>), Integer.parseInt(p.getProperty(<span class="string">"port"</span>)));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从jedisPool里拿出Jedis</span></span><br><span class="line">		<span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="外部的配置文件"><a href="#外部的配置文件" class="headerlink" title="外部的配置文件"></a>外部的配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">host</span>=<span class="string">ip地址</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">maxTotal</span>=<span class="string">50</span></span><br></pre></td></tr></table></figure>

<p>除了用静态方法调用外，还可将Jedis工具类添加到容器中，将读取配置文件的代码放到bean的init方法中……</p>
<h2 id="Jackson工具类-1"><a href="#Jackson工具类-1" class="headerlink" title="Jackson工具类"></a>Jackson工具类</h2><p>将jackson进行简单的封装，可用于字符串和指定泛型和指定类型的转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 对象转成字符串的封装</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> obj 要转的对象</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 转完的字符串</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Obj2String</span> <span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"传入为null"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">			<span class="keyword">return</span> (String) obj;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> objectMapper.writeValueAsString(obj);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将json字符串转为之指定类型的对象</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> json 传入的json字符串</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz 要转成的类型</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &lt;T&gt; 泛型T</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 泛型T</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; T <span class="title">Json2T</span> <span class="params">(String json, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			T t = objectMapper.readValue(json, clazz);</span><br><span class="line">			<span class="keyword">return</span> t;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将json转为指定好泛型的List集合</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> json json字符串</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz List集合的泛型</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &lt;T&gt; 泛型T</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 指定好泛型的List集合</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; List&lt;T&gt; <span class="title">Json2ListT</span> <span class="params">(String json, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">		CollectionType collectionType = objectMapper.getTypeFactory().constructCollectionType(List<span class="class">.<span class="keyword">class</span>, <span class="title">clazz</span>)</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			List&lt;T&gt; list = objectMapper.readValue(json, collectionType);</span><br><span class="line">			<span class="keyword">return</span> list;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>代码模板</tag>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动配置原理简析</title>
    <url>/2020/04/30/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E7%AE%80%E6%9E%90/</url>
    <content><![CDATA[<p>简单叙述下SpringBoot自动配置的原理，之后再回头梳理验证</p>
<a id="more"></a>

<h1 id="SpingBoot自动配置原理简析"><a href="#SpingBoot自动配置原理简析" class="headerlink" title="SpingBoot自动配置原理简析"></a>SpingBoot自动配置原理简析</h1><h2 id="0-自动配置简述"><a href="#0-自动配置简述" class="headerlink" title="0.自动配置简述"></a>0.自动配置简述</h2><p>​    Spring Boot有默认的全局配置文件，名叫<code>application.properties</code>或<code>application.yml</code>。我们可以在这个配置文件里写一大堆属性进行配置，例如：server.port、logging.level等等。</p>
<p>​    除此之外还能配那些呢，可参考<a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/appendix-application-properties.html#web-properties" target="_blank" rel="noopener">Spring Boot的官方文档介绍</a></p>
<p>​    闲话说完，进入正题。要探究Spring Boot的自动配置原理，就绕不开一个注解<code>@SpringBootApplication</code>，这是Spring Boot项目必不可少的注解。该注解的源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)    <span class="comment">//可以给一个类型进行注解，比如类、接口、枚举</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)    <span class="comment">//可以保留到程序运行的时候，它会被加载进入到 JVM 中</span></span><br><span class="line"><span class="meta">@Documented</span>    <span class="comment">//将注解中的元素包含到 Javadoc 中去。</span></span><br><span class="line"><span class="meta">@Inherited</span>    <span class="comment">//继承，比如A类上有该注解，B类继承A类，B类就也拥有该注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*创建一个配置类，在配置类上添加 @ComponentScan 注解。</span></span><br><span class="line"><span class="comment">*该注解默认会扫描该类所在的包下所有的配置类，相当于之前的 &lt;context:component-scan&gt;。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span></span></span><br></pre></td></tr></table></figure>

<p>​    可以看到，除了<code>@Target</code>、<code>@Retention</code>、<code>@Documented</code>和<code>@Inherited</code>外，还有几个注解，其中的<code>@EnableAutoConfiguration</code>注解便是Spring Boot能自动配置的关键，该注解源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span></span></span><br></pre></td></tr></table></figure>

<p>​    嗯，<code>@EnableAutoConfiguration</code>这个注解也是个复合注解，也被多个注解所标注，那就接着来看它们的作用。</p>
<p>​    首先<code>@AutoConfigurationPackage</code>，中文直译：自动配置包，它的相关源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Import</span>(&#123;Registrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span></span></span><br></pre></td></tr></table></figure>

<p>​    哎呀，又套了一堆注解，但跟上面的<code>@AutoConfigurationPackage</code>所用的注解类似，除了基本的注解外，二者都有一个<code>@Import</code>。</p>
<p>​    <code>@AutoConfigurationPackage</code>里的这个<code>@Import({Registrar.class})</code>，<br>​    该注解表示org.springframework.boot.autoconfigure.AutoConfigurationPackages.Registrar，就这个类，它会将<strong>主配置类（也就是@SpringBootApplication标注的类）的所在包</strong>及其下所有子包里面的所有组件注册到Spring容器当中。</p>
<p>​    而<code>@EnableAutoConfiguration</code>里的<code>@Import({AutoConfigurationImportSelector.class})</code>，表示通过<code>@Import</code>导入了一个类<code>AutoConfigurationImportSelector</code>。</p>
<p>​    AutoConfigurationImportSelector类里面有这么几个方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 方法用于给容器中导入组件</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125;</span><br><span class="line">    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">        .loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">    AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(</span><br><span class="line">        autoConfigurationMetadata, annotationMetadata);  <span class="comment">// 获取自动配置项</span></span><br><span class="line">    <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取自动配置项</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    AutoConfigurationMetadata autoConfigurationMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">    AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125;</span><br><span class="line">    AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">    List &lt; String &gt; configurations = getCandidateConfigurations(annotationMetadata,</span><br><span class="line">        attributes);  <span class="comment">//  获取一个自动配置 List ，这个 List 就包含了所有自动配置的类名</span></span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    Set &lt; String &gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   获取一个自动配置 List ，这个 List 就包含了所有的自动配置的类名</span></span><br><span class="line"><span class="keyword">protected</span> List &lt; String &gt; getCandidateConfigurations(AnnotationMetadata metadata,</span><br><span class="line">    AnnotationAttributes attributes) &#123;</span><br><span class="line">    <span class="comment">// 通过 getSpringFactoriesLoaderFactoryClass 获取默认的 EnableAutoConfiguration.class 类名，传入 loadFactoryNames 方法</span></span><br><span class="line">    List &lt; String &gt; configurations = SpringFactoriesLoader.loadFactoryNames(</span><br><span class="line">        getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations,</span><br><span class="line">        <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span> +</span><br><span class="line">        <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的 EnableAutoConfiguration.class 类名</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">    <span class="keyword">return</span> EnableAutoConfiguration<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤简述：</p>
<ol>
<li><p>通过方法<strong>selectImports</strong>给容器导入了组件。往里深入就能发现，该方法的方法体中调用了同类的第二个方法getAutoConfigurationEntry (获取自动配置项)。</p>
</li>
<li><p>方法<strong>getAutoConfigurationEntry</strong>，是用来获取自动配置项的。往里走，发现该方法调用了上述的第三个方法getCandidateConfigurations，进而拿到了一个List，这个List里有所有自动配置类的类名，</p>
</li>
<li><p>方法<strong>getCandidateConfigurations</strong>，用来获取自动配置的List的，该List包含了所有自动配置类的类名。而该方法中的List是通过调用<strong>SpringFactoriesLoader类</strong>的<code>loadFactoryNames()</code>方法得到的。</p>
</li>
<li><p><code>loadFactoryNames()</code>方法源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List &lt; String &gt; loadFactoryNames(Class &lt; ? &gt; factoryClass, <span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">    String factoryClassName = factoryClass.getName();</span><br><span class="line">    <span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map &lt; String, List &lt; String &gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">    MultiValueMap &lt; String, String &gt; result = cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 扫描所有 jar 包类路径下  META-INF/spring.factories</span></span><br><span class="line">        Enumeration &lt; URL &gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">            classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">            ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">        result = <span class="keyword">new</span> LinkedMultiValueMap &lt; &gt; ();</span><br><span class="line">        <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">            URL url = urls.nextElement();</span><br><span class="line">            UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">            <span class="comment">// 把扫描到的这些文件的内容包装成 properties 对象</span></span><br><span class="line">            Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry &lt; ? , ? &gt; entry : properties.entrySet()) &#123;</span><br><span class="line">                String factoryClassName = ((String) entry.getKey()).trim();</span><br><span class="line">                <span class="keyword">for</span> (String factoryName: StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">                    <span class="comment">// 从 properties 中获取到 EnableAutoConfiguration.class 类（类名）对应的值，然后把他们添加在容器中</span></span><br><span class="line">                    result.add(factoryClassName, factoryName.trim());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cache.put(classLoader, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location ["</span> +</span><br><span class="line">            FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    然后经过上述巴拉巴拉一系列操作，简单说就是利用PropertiesLoaderUtils 把 ClassLoader 扫描到的这些文件的内容包装成 properties 对象，然后从 properties 中获取到 EnableAutoConfiguration.class 类（类名）对应的值，最后把他们添加在容器中。</p>
<p>而上述源码中的FACTORIES_RESOURCE_LOCATION是啥？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</span><br></pre></td></tr></table></figure>

<p>可以看到，它指明了一个文件位置，META-INF/spring.factories。而之前的操作就是将类路径下的spring.factories文件里面配置的所有 EnableAutoConfiguration 的值加入到了容器中。</p>
<p>​    所有的 EnableAutoConfiguration 如下所示：注意到 EnableAutoConfiguration 有一个 = 号，= 号后面那一串就是这个项目需要用到的自动配置类。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityRequestMatcherProviderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span></span><br></pre></td></tr></table></figure>

<p>上面这一百多个<strong>自动配置类</strong>就加到了容器中了，至于生不生效，满足什么条件才会自动进行配置呢？</p>
<h2 id="1-自动配置生效条件"><a href="#1-自动配置生效条件" class="headerlink" title="1. 自动配置生效条件"></a>1. 自动配置生效条件</h2><p>每一个XxxxAutoConfiguration自动配置类都是<strong>在某些条件之下才会生效</strong>的。这些条件限制在Spring Boot中以注解的形式体现，常见的<strong>条件注解</strong>有如下几项：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean</span><span class="comment">// 当容器里有指定的bean的条件下。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span><span class="comment">// 当容器里不存在指定bean的条件下。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass</span><span class="comment">// 当类路径下有指定类的条件下。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnMissingClass</span><span class="comment">// 当类路径下不存在指定类的条件下。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span><span class="comment">// 指定的属性是否有指定的值，比如@ConditionalOnProperties(prefix=”xxx.xxx”, value=”enable”, matchIfMissing=true),代表当xxx.xxx为enable时条件的布尔值为true，如果没有设置的情况下也为true。</span></span><br></pre></td></tr></table></figure>

<p>以<strong>HttpEncodingAutoConfiguration</strong>为例解释自动配置原理，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpEncodingProperties<span class="class">.<span class="keyword">class</span>)  //启动指定类的<span class="title">ConfigurationProperties</span>功能；将配置文件中对应的值和<span class="title">HttpEncodingProperties</span>绑定起来；并把<span class="title">HttpEncodingProperties</span>加入到<span class="title">ioc</span>容器中</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span> //<span class="title">Spring</span>底层@<span class="title">Conditional</span>注解（<span class="title">Spring</span>注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是<span class="title">web</span>应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(<span class="title">CharacterEncodingFilter</span>.<span class="title">class</span>)  //判断当前项目有没有这个类<span class="title">CharacterEncodingFilter</span>；<span class="title">SpringMVC</span>中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)  <span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>) //判断容器没有这个组件？</span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">CharacterEncodingFilter</span> <span class="title">characterEncodingFilter</span>() </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>HttpEncodingAutoConfiguration类上有个<strong>@EnableConfigurationProperties</strong>注解，参数为HttpEncodingProperties.class，而HttpEncodingProperties的一部分源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http.encoding"</span>)  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>

<p>​    该类上有个<strong>@ConfigurationProperties</strong>注解，该注解的作用就是<strong>从配置文件中绑定属性到bean上</strong>，，而<strong>@EnableConfigurationProperties</strong>注解的作用就是将绑定了属性的bean注入到Spring容器中。</p>
<p>​    诸多的XxxxAutoConfiguration自动配置类，就是Spring容器的JavaConfig形式，作用就是为Spring 容器导入bean，而所有导入的bean所需要的属性都通过xxxxProperties的bean来获得。</p>
<h3 id="​简单总结"><a href="#​简单总结" class="headerlink" title="​简单总结"></a>​简单总结</h3><ul>
<li>Spring Boot启动的时候会通过<strong>@EnableAutoConfiguration注解</strong>找到META-INF/spring.factories配置文件中的所有自动配置类，并对其进行加载。</li>
<li>而这些自动配置类都是以AutoConfiguration结尾来命名的，它实际上就是一个JavaConfig形式的Spring容器配置类，它能通过以Properties结尾命名的类中取得在全局配置文件中配置的属性如：server.port，而XxxxProperties类是通过<strong>@ConfigurationProperties</strong>注解与全局配置文件中对应的属性进行绑定的。</li>
</ul>
<p>​</p>
<p>​</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>SSM整合之jar包版</title>
    <url>/2020/05/20/SSM%E6%95%B4%E5%90%88%E4%B9%8Bjar%E5%8C%85%E7%89%88/</url>
    <content><![CDATA[<p>以导jar包的形式，不以Maven的方式构建，进行的SSM整合</p>
<a id="more"></a>

<h2 id="0-导包"><a href="#0-导包" class="headerlink" title="0. 导包"></a>0. 导包</h2><h3 id="Spring4个核心包和1个日志包"><a href="#Spring4个核心包和1个日志包" class="headerlink" title="Spring4个核心包和1个日志包"></a>Spring4个核心包和1个日志包</h3><ul>
<li><strong>spring-beans-5.1.9.RELEASE.jar</strong></li>
<li><strong>spring-context-5.1.9.RELEASE.jar</strong></li>
<li><strong>spring-core-5.1.9.RELEASE.jar</strong></li>
<li><strong>spring-expression-5.1.9.RELEASE.jar</strong></li>
<li><strong>spring-jcl-5.1.9.RELEASE.jar</strong>和<strong>commons-logging-1.2.jar</strong>二选一</li>
</ul>
<h3 id="导入AOP和AspecJ相关的包"><a href="#导入AOP和AspecJ相关的包" class="headerlink" title="导入AOP和AspecJ相关的包"></a>导入AOP和AspecJ相关的包</h3><ul>
<li><strong>spring-aop-5.1.9.RELEASE.jar</strong></li>
<li><strong>aspectjweaver-1.9.4.jar</strong></li>
</ul>
<h3 id="导入Spring对持久层的支持包"><a href="#导入Spring对持久层的支持包" class="headerlink" title="导入Spring对持久层的支持包"></a>导入Spring对持久层的支持包</h3><ul>
<li><strong>spring-tx-5.1.9.RELEASE.jar</strong></li>
<li><strong>spring-jdbc-5.1.9.RELEASE.jar</strong></li>
</ul>
<h3 id="导入数据源相关的包-可选"><a href="#导入数据源相关的包-可选" class="headerlink" title="导入数据源相关的包(可选)"></a>导入数据源相关的包(可选)</h3><ul>
<li><strong>druid-1.1.10.jar</strong>(可选)，如果不用druid数据源，也可在Spring配置文件中使用Spring或Mybatis提供的数据源</li>
</ul>
<h3 id="导入SpringMVC相关的包"><a href="#导入SpringMVC相关的包" class="headerlink" title="导入SpringMVC相关的包"></a>导入SpringMVC相关的包</h3><ul>
<li><strong>spring-web-5.1.9.RELEASE.jar</strong></li>
<li><strong>spring-webmvc-5.1.9.RELEASE.jar</strong></li>
</ul>
<h3 id="导入spring-mybatis整合包"><a href="#导入spring-mybatis整合包" class="headerlink" title="导入spring-mybatis整合包"></a>导入spring-mybatis整合包</h3><ul>
<li><strong>mybatis-spring-1.3.2.jar</strong></li>
</ul>
<h3 id="导入jackson相关的包"><a href="#导入jackson相关的包" class="headerlink" title="导入jackson相关的包"></a>导入jackson相关的包</h3><ul>
<li><strong>jackson-annotations-2.9.8.jar</strong></li>
<li><strong>jackson-core-2.9.8.jar</strong></li>
<li><strong>jackson-databind-2.9.8.jar</strong></li>
<li><strong>jackson-datatype-jsr310-2.9.8.jar</strong></li>
</ul>
<h3 id="导入MyBatis相关的包"><a href="#导入MyBatis相关的包" class="headerlink" title="导入MyBatis相关的包"></a>导入MyBatis相关的包</h3><ul>
<li>包含mybatis的包(<strong>必选</strong>)<ul>
<li><strong>mybatis-3.5.3.jar</strong></li>
</ul>
</li>
<li>mybatis包中的lib目录下的依赖包(<strong>可选</strong>)<ul>
<li>ant-1.10.3.jar</li>
<li>ant-launcher-1.10.3.jar</li>
<li>asm-7.0.jar</li>
<li>cglib-3.2.10.jar</li>
<li>javassist-3.24.1-GA.jar</li>
<li>log4j-1.2.17.jar</li>
<li>log4j-api-2.11.2.jar</li>
<li>log4j-core-2.11.2.jar</li>
<li>ognl-3.2.10.jar</li>
<li>slf4j-api-1.7.26.jar</li>
<li>slf4j-log4j12-1.7.26.jar</li>
</ul>
</li>
</ul>
<h3 id="导入相关数据库驱动包"><a href="#导入相关数据库驱动包" class="headerlink" title="导入相关数据库驱动包"></a>导入相关数据库驱动包</h3><ul>
<li><strong>mysql-connector-java-5.1.47.jar</strong></li>
</ul>
<h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h2><h3 id="数据库配置文件"><a href="#数据库配置文件" class="headerlink" title="数据库配置文件"></a>数据库配置文件</h3><p><strong>db.properties</strong>，该项配置文件的<strong>URL</strong>是否可行还需具体验证</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/数据库名称?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">用户名</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">密码</span></span><br></pre></td></tr></table></figure>

<h4 id="log4j的配置文件"><a href="#log4j的配置文件" class="headerlink" title="log4j的配置文件"></a>log4j的配置文件</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 设置###</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">debug,stdout,D,E</span></span><br><span class="line"><span class="comment">### 输出信息到控制抬 ###</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 输出DEBUG 级别以上的日志到=E://logs/error.log ###</span></span><br><span class="line"><span class="meta">log4j.appender.D</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.D.File</span> = <span class="string">E://logs/log.log</span></span><br><span class="line"><span class="meta">log4j.appender.D.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.D.Threshold</span> = <span class="string">DEBUG </span></span><br><span class="line"><span class="meta">log4j.appender.D.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.D.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 输出ERROR 级别以上的日志到=E://logs/error.log ###</span></span><br><span class="line"><span class="meta">log4j.appender.E</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.E.File</span> =<span class="string">E://logs/error.log </span></span><br><span class="line"><span class="meta">log4j.appender.E.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.E.Threshold</span> = <span class="string">ERROR </span></span><br><span class="line"><span class="meta">log4j.appender.E.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.E.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br></pre></td></tr></table></figure>

<h3 id="MyBatis的配置文件"><a href="#MyBatis的配置文件" class="headerlink" title="MyBatis的配置文件"></a>MyBatis的配置文件</h3><p>由于MyBatis配置文件里的相关配置，都可以在Spring的配置文件中配置，所有下面的MyBatis的配置文件可以被取代了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据源的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  此处需注意url的写法，"jdbc:mysql:///xxx"</span></span><br><span class="line"><span class="comment">                    也可写 jdbc:mysql://ip:port/xxx --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;property name="url" value="jdbc:mysql://localhost:3306/xxx"/&gt; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不能写点，以文件夹的形式展示映射文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h3><p>文件名一般叫<code>applicationcontext.xml</code>，也可自定义文件名。该Spring配置文件中集合了包扫描、事务、AOP、数据源等等配置。也可将该配置文件分为多个配置文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置包扫描，只扫service层的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xxx.cn.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据源，这里配的数据源可以是MyBatis的PooledDataSource，也可以是Spring的DrivermanagerDataSource，这里用的是Druid数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载MyBatis的配置文件，因为MyBatis的配置Spring里也可以配，所以没用了 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="configLocation" value="classpath:mybatis-config.xml"/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载MyBatis的映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.xxx.cn.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入外部的数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启事务注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SpringMVC配置文件"><a href="#SpringMVC配置文件" class="headerlink" title="SpringMVC配置文件"></a>SpringMVC配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置包扫描，仅扫描controller包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xxx.cn.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mvc:annotation-driven标签会默认会帮我们注册默认处理请求，参数和返回值的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="web-xml文件"><a href="#web-xml文件" class="headerlink" title="web.xml文件"></a>web.xml文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationcontext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC的前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、编写其他类测试"><a href="#2、编写其他类测试" class="headerlink" title="2、编写其他类测试"></a>2、编写其他类测试</h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">	<span class="comment">// getter、setter、toString方法略   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mapper接口"><a href="#mapper接口" class="headerlink" title="mapper接口"></a>mapper接口</h3><p>这里不需要加<strong>@Repository</strong>注解，因为在Spring的配置文件中专门配置了一个扫描MyBatis映射文件的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM admin"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryAllUser</span> <span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Service接口及实现类"><a href="#Service接口及实现类" class="headerlink" title="Service接口及实现类"></a>Service接口及实现类</h3><p>这里不给接口加<strong>@Service</strong>注解，而是给它的实现类加。</p>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryAll</span> <span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span> <span class="comment">// 将该类加入到IoC容器中</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//  在Service层加注解进行事务控制。默认发生运行时异常回滚，发生编译时异常不回滚。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 此处写的是接口类型，将其自动装配</span></span><br><span class="line">    <span class="keyword">private</span> IUserMapper iUserMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = iUserMapper.queryAllUser();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Controller类"><a href="#Controller类" class="headerlink" title="Controller类"></a>Controller类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">// 将该类加入到IoC容器中</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span><span class="comment">// 此处写的是接口类型，将其自动装配</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/queryAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">queryAll</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = iUserService.queryAll();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后开启tomcat进行测试即可</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>Spring的配置文件，可按各自功能分成多个。</p>
<h3 id="spring-mapper-xml"><a href="#spring-mapper-xml" class="headerlink" title="spring-mapper.xml"></a>spring-mapper.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源，这里配的数据源可以是MyBatis的PooledDataSource，也可以是Spring的DrivermanagerDataSource，这里用的是Druid数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载MyBatis的配置文件，因为MyBatis的配置Spring里也可以配，所以没用了 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="configLocation" value="classpath:mybatis-config.xml"/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载MyBatis的映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.xxx.cn.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="spring-service-xml"><a href="#spring-service-xml" class="headerlink" title="spring-service.xml"></a>spring-service.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置包扫描，只扫service层的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xxx.cn.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入外部的数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启事务注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将Spring的配置文件分为以上两个后，可以选择在原配置文件中用<strong>import</strong>标签引入它们，这样就不用修改web.xml文件了。例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-service.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者启用原配置文件，修改web.xml文件也可。例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里的值也可写成classpath:spring-mapper.xml,classpath:spring-service.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC的前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>SSM整合</tag>
      </tags>
  </entry>
  <entry>
    <title>发送短信验证码代码示例</title>
    <url>/2020/05/26/%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>使用第三方阿里云发送短信验证码的示例</p>
<a id="more"></a>

<p>使用的第三方云是<strong>阿里云</strong>。使用的工具类是之前编写的<a href="/2020/05/26/Jedis%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%92%8CJackson%E5%B7%A5%E5%85%B7%E7%B1%BB/" title="Jedis工具类和Jackson工具类">Jedis工具类和Jackson工具类</a>，自定义的异常处理类可参见<a href="/2020/04/20/%E7%AC%94%E8%AE%B0-SpringMVC/" title="笔记-SpringMVC">笔记-SpringMVC</a></p>
<p><strong>entity层和mapper层代码，略；具体的pom文件，略</strong></p>
<h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><h3 id="Service层代码"><a href="#Service层代码" class="headerlink" title="Service层代码"></a>Service层代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAdminService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> AdminMapper adminMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Admin <span class="title">queryAdminByPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">		AdminExample adminExample = <span class="keyword">new</span> AdminExample();</span><br><span class="line">		AdminExample.Criteria criteria = adminExample.createCriteria();</span><br><span class="line">		criteria.andAdminPhoneEqualTo(phone);</span><br><span class="line"></span><br><span class="line">		List&lt;Admin&gt; admins = adminMapper.selectByExample(adminExample);</span><br><span class="line">		<span class="keyword">if</span> (admins != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> admins.get(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Controller层代码"><a href="#Controller层代码" class="headerlink" title="Controller层代码"></a>Controller层代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> IAdminService iAdminService;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 点击“发送手机验证码”时调用此方法</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> phone 前端传过来的手机号</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 具体的状态码和信息</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/sendCode"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">sendCode</span> <span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">		Admin admin = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">// 简单的后台校验</span></span><br><span class="line">		CheckPhoneUtils.CheckPhone(phone);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 说明手机号格式正确，开始查数据库是否有此手机号</span></span><br><span class="line">		admin = iAdminService.queryAdminByPhone(phone);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (admin != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// 数据库中有该用户的话，则可以发验证码用于登录</span></span><br><span class="line">			<span class="comment">// UUID随机生成6位验证码</span></span><br><span class="line">			String code = UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// new一个线程或是用异步任务来发送验证码</span></span><br><span class="line">			<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					SendCodeUtils.sendCode(phone, code);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;.start();</span><br><span class="line">			<span class="comment">// 将传来的手机号和生成的验证码作为键值对存到redis中</span></span><br><span class="line">			Jedis jedis = JedisUtils.getJedis();</span><br><span class="line">			jedis.set(phone, code);</span><br><span class="line">			jedis.expire(phone, <span class="number">60</span>);</span><br><span class="line">			<span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> ResponseBean(StatusEnum.CODE_SENT));</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// admin为null的话，抛没查到的异常</span></span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> MyException(StatusEnum.ADMIN_NOT_FOUND);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">login</span> <span class="params">(String phone, String code)</span> </span>&#123;</span><br><span class="line">		Jedis jedis = JedisUtils.getJedis();</span><br><span class="line">		<span class="comment">// 如果传进来的验证码和redis中存的不一样，即验证失败，抛异常</span></span><br><span class="line">		<span class="keyword">if</span> (! code.equals(jedis.get(phone))) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> MyException(StatusEnum.LOGIN_ERROR);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 验证成功，在返回状态之前要清空redis里对应的数据</span></span><br><span class="line">		jedis.del(phone);</span><br><span class="line">		<span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> ResponseBean(StatusEnum.LOGIN_SUCCESS));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="发送短信的第三方工具类"><a href="#发送短信的第三方工具类" class="headerlink" title="发送短信的第三方工具类"></a>发送短信的第三方工具类</h3><p>封装阿里云发送短信的工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过阿里云发送手机验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendCodeUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Properties p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过静态代码块引入配置文件中的相关属性</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		InputStream in = SendCodeUtils.class.getClassLoader().getResourceAsStream("sendcode.properties");</span><br><span class="line">		p = <span class="keyword">new</span> Properties();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			p.load(in);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendCode</span> <span class="params">(String phone, String code)</span> </span>&#123;</span><br><span class="line">		String accessKeyId = p.getProperty(<span class="string">"accessKeyId"</span>);</span><br><span class="line">		String secret = p.getProperty(<span class="string">"secret"</span>);</span><br><span class="line">		String signName = p.getProperty(<span class="string">"signName"</span>);</span><br><span class="line">		String templateCode = p.getProperty(<span class="string">"templateCode"</span>);</span><br><span class="line"></span><br><span class="line">		DefaultProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId, secret);</span><br><span class="line">		IAcsClient client = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">		CommonRequest request = <span class="keyword">new</span> CommonRequest();</span><br><span class="line">		request.setSysMethod(MethodType.POST);</span><br><span class="line">		request.setSysDomain(<span class="string">"dysmsapi.aliyuncs.com"</span>);</span><br><span class="line">		request.setSysVersion(<span class="string">"2017-05-25"</span>);</span><br><span class="line">		request.setSysAction(<span class="string">"SendSms"</span>);</span><br><span class="line">		request.putQueryParameter(<span class="string">"RegionId"</span>, <span class="string">"cn-hangzhou"</span>);</span><br><span class="line">		request.putQueryParameter(<span class="string">"PhoneNumbers"</span>, phone);</span><br><span class="line">		request.putQueryParameter(<span class="string">"SignName"</span>, signName);</span><br><span class="line">		request.putQueryParameter(<span class="string">"TemplateCode"</span>, templateCode);</span><br><span class="line">		request.putQueryParameter(<span class="string">"TemplateParam"</span>, <span class="string">"&#123;\"code\":\""</span> + code + <span class="string">"\"&#125;"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			CommonResponse response = client.getCommonResponse(request);</span><br><span class="line">			<span class="comment">// System.out.println(response.getData());</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="外部的配置文件"><a href="#外部的配置文件" class="headerlink" title="外部的配置文件"></a>外部的配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">accessKeyId=阿里云短信服务里面找</span><br><span class="line">secret=阿里云短信服务里面找</span><br><span class="line">signName=阿里云短信服务里面找</span><br><span class="line">templateCode=阿里云短信服务里面找</span><br></pre></td></tr></table></figure>

<h3 id="检查手机号的工具类"><a href="#检查手机号的工具类" class="headerlink" title="检查手机号的工具类"></a>检查手机号的工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckPhoneUtils</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 该方法用于校验手机号的格式是否正确</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> phone 传过来的手机号</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 返回 1 ，手机号格式正确</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">CheckPhone</span> <span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(phone)) &#123;</span><br><span class="line">			<span class="comment">// 传过来的手机号若为空或为空字符串，则抛异常</span></span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> MyException(StatusEnum.PHONE_EMPTY);</span><br><span class="line">		&#125;</span><br><span class="line">		String regex = <span class="string">"^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(17[013678])|(18[0,5-9]))\\d&#123;8&#125;$"</span>;</span><br><span class="line">		<span class="keyword">if</span>(phone.length() != <span class="number">11</span>)&#123;</span><br><span class="line">			System.out.println(phone);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> MyException(StatusEnum.PHONE_NUMBER_ERROR);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		    Pattern p = Pattern.compile(regex);</span><br><span class="line">		    Matcher m = p.matcher(phone);</span><br><span class="line">		    <span class="keyword">boolean</span> isMatch = m.matches();</span><br><span class="line">		    <span class="keyword">if</span>(isMatch)&#123;</span><br><span class="line">		    	<span class="comment">// 手机号为正确格式，返回1</span></span><br><span class="line">		        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		    	<span class="comment">// 手机号位数满足，但格式错误，抛异常</span></span><br><span class="line">				System.out.println(<span class="string">"您的手机号"</span> + phone + <span class="string">"是错误格式！！！"</span>);</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> MyException(StatusEnum.PHONE_specification_ERROR);</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><h3 id="前端登录HTML代码"><a href="#前端登录HTML代码" class="headerlink" title="前端登录HTML代码"></a>前端登录HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Head --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/x-javascript"</span>&gt;</span><span class="actionscript"> addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        setTimeout(hideURLbar, 0);</span><br><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">hideURLbar</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">1</span>);</span></span><br><span class="line">    &#125; <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/loginRegister.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>工具系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>管理员登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;form action="#" method="post"&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入手机号"</span> <span class="attr">v-model</span>=<span class="string">"phone"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"sendCode"</span> @<span class="attr">click</span>=<span class="string">"sendCode"</span>&gt;</span>获取手机验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"验证码"</span> <span class="attr">v-model</span>=<span class="string">"code"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"loginBtn"</span> @<span class="attr">click</span>=<span class="string">"login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">style</span>=<span class="string">"float: right;"</span>&gt;</span>学生登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/login.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="前端登录JS代码"><a href="#前端登录JS代码" class="headerlink" title="前端登录JS代码"></a>前端登录JS代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue (&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        phone: <span class="string">""</span>,</span><br><span class="line">        code: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sendCode () &#123;</span><br><span class="line">            axios.get(<span class="string">`http://localhost:8080/sendCode?phone=<span class="subst">$&#123;<span class="keyword">this</span>.phone&#125;</span>`</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        login () &#123;</span><br><span class="line">            axios.get(<span class="string">`http://localhost:8080/login?phone=<span class="subst">$&#123;<span class="keyword">this</span>.phone&#125;</span>&amp;code=<span class="subst">$&#123;<span class="keyword">this</span>.code&#125;</span>`</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response.status);</span><br><span class="line">                <span class="keyword">if</span> (response.data.status == <span class="number">20002</span>) &#123;</span><br><span class="line">                    location.replace(<span class="string">"index.html"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>代码模板</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>发送邮箱验证码示例</title>
    <url>/2020/05/27/%E5%8F%91%E9%80%81%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>前端进行邮箱登录时的逻辑梳理和代码实现</p>
<a id="more"></a>

]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>代码模板</tag>
        <tag>邮箱验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-CSS</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-CSS/</url>
    <content><![CDATA[<p>施工中</p>
<a id="more"></a>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Bootstrap</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-Bootstrap/</url>
    <content><![CDATA[<p>施工中</p>
<a id="more"></a>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>a标签的默认行为</title>
    <url>/2020/05/22/a%E6%A0%87%E7%AD%BE%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA/</url>
    <content><![CDATA[<p>a标签的默认行为以及修改、阻止的方式。相关笔记文字描述来自<a href="https://www.jianshu.com/p/8a2bd9792eec" target="_blank" rel="noopener">lincimy的简书</a>。</p>
<a id="more"></a>

<h1 id="a标签的默认行为"><a href="#a标签的默认行为" class="headerlink" title="a标签的默认行为"></a>a标签的默认行为</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>a标签的默认跳转链接行为是由<code>href</code>属性来实现的，同时设置<code>href</code>属性可以使a标签在hover状态下以手指指示的样式显示。但实际过程中发现<strong>对a标签的href属性的不同设置，可能会导致不同的行为反馈</strong>。</p>
<h2 id="1-a标签中设置href属性，没有赋任何值"><a href="#1-a标签中设置href属性，没有赋任何值" class="headerlink" title="1.a标签中设置href属性，没有赋任何值"></a>1.a标签中设置href属性，没有赋任何值</h2><p>前端代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>a标签的默认行为<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是文字<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>// 此处略去剩余的29行重复标签</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click</span>=<span class="string">"print"</span>&gt;</span>a标签，href属性为空<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vue = <span class="keyword">new</span> Vue (&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            methods: &#123;</span><br><span class="line">                print () &#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"一闪而过的弹窗"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>情况演示</p>
<p><img src="/2020/05/22/a%E6%A0%87%E7%AD%BE%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA/a%E6%A0%87%E7%AD%BE%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA%E4%B8%80.gif" alt="a标签的默认行为一"></p>
<p>可以看出，当href属性为空时，点击a标签会刷新页面，回到顶部。</p>
<h2 id="2-a标签中设置href属性，赋值href-”-”"><a href="#2-a标签中设置href属性，赋值href-”-”" class="headerlink" title="2.a标签中设置href属性，赋值href=”#”"></a>2.a标签中设置href属性，赋值href=”#”</h2><p>当把上面的a标签的href属性改为<code>#</code>时，会出现如下情况</p>
<p><img src="/2020/05/22/a%E6%A0%87%E7%AD%BE%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA/a%E6%A0%87%E7%AD%BE%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA%E4%BA%8C.gif" alt="a标签的默认行为一"></p>
<p>点击a标签后会回到页面顶部，但不刷新页面。</p>
<h2 id="修改a标签的默认行为"><a href="#修改a标签的默认行为" class="headerlink" title="修改a标签的默认行为"></a>修改a标签的默认行为</h2><ul>
<li>使用<code>javascript:void(0)</code>给href属性赋值<ul>
<li>void 是JavaScript 的一个运算符，void(0)就是什么都不做的意思，点击之后也不会回到页面顶部，使用javascript代码阻止了href属性的默认跳转链接行为。a标签点击后会执行@click中设定函数print()。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"javascript:void(0)"</span> @click=<span class="string">"print"</span>&gt;a标签， 使用javascript语句给href属性赋值&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>javascript:;</code>给href赋值<ul>
<li>javascript: 是一个伪协议，其他的伪协议还有 mail:  tel:  file:  等等。</li>
<li>javascript:是表示在触发&lt;a&gt;默认动作时，执行一段JavaScript代码，而<code>javascript:;</code> 表示什么都不执行，这样点击&lt;a&gt;时就没有任何反应。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"javascript:;"</span> @click=<span class="string">"print"</span>&gt;用javascript语句给href属性赋值&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/22/a%E6%A0%87%E7%AD%BE%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA/%E7%94%A8javascript%E8%AF%AD%E5%8F%A5%E7%BB%99href%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC.gif" alt="用javascript语句给href属性赋值"></p>
<h2 id="阻止a标签的默认行为"><a href="#阻止a标签的默认行为" class="headerlink" title="阻止a标签的默认行为"></a>阻止a标签的默认行为</h2><ul>
<li>让 a 标签的点击事件的处理函数的返回值为 false ，这样 a 链接就不会跳转。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;        </span><br><span class="line">	&lt;a href=<span class="string">"http://www.baidu.com"</span>&gt;原始DOM操作&lt;<span class="regexp">/a&gt;&lt;br/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">	document.querySelector("a").onclick = function () &#123;</span></span><br><span class="line"><span class="regexp">        console.log("弹一弹");</span></span><br><span class="line"><span class="regexp">        return false;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用e.preventDefault()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;        </span><br><span class="line">	&lt;a href=<span class="string">"http://www.baidu.com"</span>&gt;原始DOM操作&lt;<span class="regexp">/a&gt;&lt;br/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">	document.querySelector("a").onclick = function (e) &#123;</span></span><br><span class="line"><span class="regexp">        console.log("弹一弹");</span></span><br><span class="line"><span class="regexp">        e.preventDefault();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<p>注：上面的两种操作都是在<strong>原生JS</strong>里使用的</p>
<p><img src="/2020/05/22/a%E6%A0%87%E7%AD%BE%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA/%E9%98%BB%E6%AD%A2a%E6%A0%87%E7%AD%BE%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA.gif" alt="用javascript语句给href属性赋值"></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>a标签</tag>
        <tag>小细节</tag>
      </tags>
  </entry>
  <entry>
    <title>发送邮件代码示例</title>
    <url>/2020/05/27/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>几种发送邮件的方式</p>
<a id="more"></a>

<h2 id="发送邮件最原始的方式"><a href="#发送邮件最原始的方式" class="headerlink" title="发送邮件最原始的方式"></a>发送邮件最原始的方式</h2><p>该方式依赖javamail，这里使用的是javax.mail包。</p>
<p>下面的是封装的用来发送又见的工具类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendCodeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 该方法是使用javax.email包进行发送邮件的原始方式</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> email 收件人邮箱</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">basicSendEmail</span> <span class="params">(String email)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//设置参数</span></span><br><span class="line">		Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">		properties.put(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);<span class="comment">// 连接协议</span></span><br><span class="line">		properties.put(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtp.163.com"</span>);<span class="comment">// 主机名 smtp.163.com</span></span><br><span class="line">		properties.put(<span class="string">"mail.smtp.port"</span>, <span class="number">465</span>);</span><br><span class="line">		properties.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">		properties.put(<span class="string">"mail.smtp.ssl.enable"</span>, <span class="string">"true"</span>);<span class="comment">// 设置是否使用ssl安全连接 ‐‐‐一般都使用</span></span><br><span class="line">		properties.put(<span class="string">"mail.debug"</span>, <span class="string">"true"</span>);<span class="comment">// 设置是否显示debug信息 true 会在控制台显示相关信息</span></span><br><span class="line">		<span class="comment">// 得到回话对象</span></span><br><span class="line">		Session session = Session.getInstance(properties);</span><br><span class="line">		<span class="comment">// 获取邮件对象</span></span><br><span class="line">		Message message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">		<span class="comment">// 设置发件人邮箱地址</span></span><br><span class="line">		message.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"发件人邮箱"</span>));</span><br><span class="line">		<span class="comment">// 设置收件人邮箱地址</span></span><br><span class="line">		<span class="comment">//message.setRecipients(Message.RecipientType.TO, new InternetAddress[]&#123;new InternetAddress("xxxxx@qq.com"),new InternetAddress("xxxx@163.com")&#125;);</span></span><br><span class="line">		message.setRecipient(Message.RecipientType.TO, <span class="keyword">new</span> InternetAddress(email));<span class="comment">//一个收件人</span></span><br><span class="line">		<span class="comment">// 设置邮件标题</span></span><br><span class="line">		message.setSubject(<span class="string">"登陆验证码"</span>);</span><br><span class="line">		<span class="comment">// 设置邮件内容</span></span><br><span class="line">		message.setText(<span class="string">"你的验证码为aaaaa"</span>);</span><br><span class="line">		<span class="comment">// 得到邮差对象</span></span><br><span class="line">		Transport transport = session.getTransport();</span><br><span class="line">		<span class="comment">// 连接自己的邮箱账户 密码是授权码</span></span><br><span class="line">		transport.connect(<span class="string">"发件人邮箱"</span>, <span class="string">"授权码"</span>);</span><br><span class="line">		<span class="comment">// 发送邮件</span></span><br><span class="line">		transport.sendMessage(message, message.getAllRecipients());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="用Spring发送邮件"><a href="#用Spring发送邮件" class="headerlink" title="用Spring发送邮件"></a>用Spring发送邮件</h2><p>spring发送邮件需要依赖一个<code>context-support</code>包 因为在这个包中 提供了一些java发送的接口和实现类 让<br>我们发送邮件更加简单。</p>
<p><img src="/2020/05/27/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/Spring-comtext%E4%B8%AD%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E7%9A%84%E7%B1%BB.png" alt="Spring-comtext中发送邮件的类"></p>
<h3 id="引入相关依赖"><a href="#引入相关依赖" class="headerlink" title="引入相关依赖"></a>引入相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">!‐‐</span> 发送邮件需要的包‐‐&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">!‐‐发邮箱需要的支持包‐‐</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐context‐support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置Spring配置文件"><a href="#配置Spring配置文件" class="headerlink" title="配置Spring配置文件"></a>配置Spring配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!‐‐配置发送邮件的bean‐‐</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"javaMailSender"</span> <span class="attr">class</span>=<span class="string">"org.springframework.mail.javamail.JavaMailSenderImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"发件人邮箱"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"邮箱授权码"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"smtp.163.com"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaMailProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">!‐‐</span> 设置认证开关 ‐‐&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.auth"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">!‐‐</span> 启动调试开关 ‐‐&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.debug"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">!‐‐</span> 设置发送延时 ‐‐&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.timeout"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="普通邮件测试"><a href="#普通邮件测试" class="headerlink" title="普通邮件测试"></a>普通邮件测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ClassPathXmlApplicationContext applicationContext =</span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring-sendmail.xml"</span>);</span><br><span class="line">		JavaMailSender javaMailSender = applicationContext.getBean(JavaMailSender<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 配置发送简单消息的Bean</span></span><br><span class="line">		SimpleMailMessage simpleMailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        <span class="comment">// 配置各项参数，setFrom配置的时候，邮箱用尖括号括起来，尖括号前面的内容即可显示为未打开邮件时的标题样式</span></span><br><span class="line">		simpleMailMessage.setFrom(<span class="string">"天天通&lt;发件人邮箱&gt;"</span>);</span><br><span class="line">		simpleMailMessage.setTo(<span class="string">"收件人邮箱"</span>);</span><br><span class="line">		simpleMailMessage.setSubject(<span class="string">"邮件标题"</span>);</span><br><span class="line">		simpleMailMessage.setText(<span class="string">"邮件内容"</span>);</span><br><span class="line">		javaMailSender.send(simpleMailMessage);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内容为html标签的邮件测试"><a href="#内容为html标签的邮件测试" class="headerlink" title="内容为html标签的邮件测试"></a>内容为html标签的邮件测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ClassPathXmlApplicationContext applicationContext =</span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring-sendmail.xml"</span>);</span><br><span class="line">		JavaMailSender javaMailSender = applicationContext.getBean(JavaMailSender<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 没有附件的话，构造方法第二个参数可以写false，也可以不写，第三个参数是解决乱码的</span></span><br><span class="line">			MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">false</span>, <span class="string">"utf-8"</span>);</span><br><span class="line">			helper.setFrom(<span class="string">"显示的标题&lt;发件人邮箱&gt;"</span>);</span><br><span class="line">			helper.setTo(<span class="string">"收件人邮箱"</span>);</span><br><span class="line">			helper.setSubject(<span class="string">"邮件标题"</span>);</span><br><span class="line">            <span class="comment">// setText方法的第二个参数需设置为true</span></span><br><span class="line">			helper.setText(<span class="string">"&lt;h1&gt;这是一级标签嘞&lt;/h1&gt;"</span>, <span class="keyword">true</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		javaMailSender.send(mimeMessage);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="携带本地附件的邮件测试"><a href="#携带本地附件的邮件测试" class="headerlink" title="携带本地附件的邮件测试"></a>携带本地附件的邮件测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ClassPathXmlApplicationContext applicationContext =</span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring-sendmail.xml"</span>);</span><br><span class="line">		JavaMailSender javaMailSender = applicationContext.getBean(JavaMailSender<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">			helper.setFrom(<span class="string">"今天通&lt;发件人邮箱&gt;"</span>);</span><br><span class="line">			helper.setTo(<span class="string">"收件人邮箱"</span>);</span><br><span class="line">			helper.setSubject(<span class="string">"邮件标题"</span>);</span><br><span class="line">			helper.setText(<span class="string">"邮件内容"</span>);</span><br><span class="line">			<span class="comment">// 添加本地附件</span></span><br><span class="line">			helper.addAttachment(<span class="string">"附件啊.txt"</span>, <span class="keyword">new</span> File(<span class="string">"E:\\附件啊.txt"</span>));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		javaMailSender.send(mimeMessage);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="携带网络上传附件的邮件测试"><a href="#携带网络上传附件的邮件测试" class="headerlink" title="携带网络上传附件的邮件测试"></a>携带网络上传附件的邮件测试</h3><h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><h5 id="Controller层代码"><a href="#Controller层代码" class="headerlink" title="Controller层代码"></a>Controller层代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmailController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/sendEmailByFile"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">sendEmail</span> <span class="params">(String to, String subject, String text, @RequestPart Part file)</span> </span>&#123;</span><br><span class="line">		MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 没有附件的话，构造方法第二个参数可以写false，也可以不写</span></span><br><span class="line">			MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>, <span class="string">"utf-8"</span>);</span><br><span class="line">			helper.setFrom(<span class="string">"每天通&lt;pearjk777@163.com&gt;"</span>);</span><br><span class="line">			helper.setTo(to);</span><br><span class="line">			helper.setSubject(subject);</span><br><span class="line">			helper.setText(text, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">			InputStream in = file.getInputStream();</span><br><span class="line">			<span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">			in.read(bytes);</span><br><span class="line">			helper.addAttachment(file.getSubmittedFileName(), <span class="keyword">new</span> ByteArrayResource(bytes));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		javaMailSender.send(mimeMessage);</span><br><span class="line">		<span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> ResponseBean(StatusEnum.EMAIL_SUCCESS));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置欢迎页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置上传文件用的标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span><span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置字符编码集过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><h5 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">            收件人：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"to"</span> <span class="attr">v-model</span>=<span class="string">"to"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            邮件标题：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">v-model</span>=<span class="string">"subject"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            邮件内容：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            附件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>  @<span class="attr">change</span>=<span class="string">"change"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sendEmail"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/sendEmail.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue (&#123;</span><br><span class="line">   el: <span class="string">"#app"</span>,</span><br><span class="line">   data: &#123;</span><br><span class="line">       to: <span class="string">""</span>,</span><br><span class="line">       subject: <span class="string">""</span>,</span><br><span class="line">       text: <span class="string">""</span>,</span><br><span class="line">       file: <span class="string">""</span></span><br><span class="line">   &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">       sendEmail () &#123;</span><br><span class="line">           <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">           <span class="comment">// 上传的文件的属性名需和后端的Part对象的对象名一致</span></span><br><span class="line">           formData.append(<span class="string">"file"</span>, <span class="keyword">this</span>.file);</span><br><span class="line">           formData.append(<span class="string">"to"</span>, <span class="keyword">this</span>.to);</span><br><span class="line">           formData.append(<span class="string">"subject"</span>, <span class="keyword">this</span>.subject);</span><br><span class="line">           formData.append(<span class="string">"text"</span>, <span class="keyword">this</span>.text);</span><br><span class="line">           axios.post(<span class="string">"http://localhost:8080/sendEmailByFile"</span>, formData, &#123;<span class="attr">header</span> : &#123;<span class="string">"ContentType"</span> : <span class="string">"multipart/form-data"</span>&#125;&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;,</span><br><span class="line">       change (e) &#123;</span><br><span class="line">           <span class="keyword">this</span>.file = e.target.files[<span class="number">0</span>];</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="keyword">this</span>.file);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="内联格式的邮件测试"><a href="#内联格式的邮件测试" class="headerlink" title="内联格式的邮件测试"></a>内联格式的邮件测试</h3><h4 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmailController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/sendEmailByInline"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">sendEmailByInline</span> <span class="params">(String to, String subject, String text, @RequestPart Part file)</span> </span>&#123;</span><br><span class="line">		MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 没有附件的话，构造方法第二个参数可以写false，也可以不写</span></span><br><span class="line">			MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>, <span class="string">"utf-8"</span>);</span><br><span class="line">			helper.setFrom(<span class="string">"昨天通&lt;发件人邮箱&gt;"</span>);</span><br><span class="line">			helper.setTo(to);</span><br><span class="line">			helper.setSubject(subject);</span><br><span class="line">			<span class="comment">// cid是固定写法，即content-Id,mimeMessage.setContentID()</span></span><br><span class="line">			helper.setText(<span class="string">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;图片&lt;/h1&gt;&lt;br/&gt;&lt;img src='cid:imageUrl'&gt;&lt;/body&gt;&lt;/html&gt;"</span>,  <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 被注释的方式不能将图片转为内联方式进行发送</span></span><br><span class="line">			<span class="comment">// InputStream in = file.getInputStream();</span></span><br><span class="line">			<span class="comment">// byte[] bytes = new byte[in.available()];</span></span><br><span class="line">			<span class="comment">// in.read(bytes);</span></span><br><span class="line">			<span class="comment">// helper.addInline("imageUrl", new ByteArrayResource(bytes));</span></span><br><span class="line"></span><br><span class="line">			helper.addInline(<span class="string">"imageUrl"</span>,</span><br><span class="line">					<span class="keyword">new</span> File(<span class="string">"C:\\Users\\JAVASM\\Pictures\\测试.png"</span>));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		javaMailSender.send(mimeMessage);</span><br><span class="line">		<span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> ResponseBean(StatusEnum.EMAIL_SUCCESS));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>代码模板</tag>
        <tag>发邮件</tag>
        <tag>javamail</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-ECMAScript 6.0</title>
    <url>/2020/04/25/%E7%AC%94%E8%AE%B0-ECMAScript%206.0/</url>
    <content><![CDATA[<p>ES6的新特性简单介绍</p>
<a id="more"></a>

<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="0-块级作用域"><a href="#0-块级作用域" class="headerlink" title="0. 块级作用域"></a>0. 块级作用域</h2><p> ES6之前没有块级作用域，<strong>ES5的var没有块级作用域</strong>的概念，只有function有作用域的概念。ES6的let、const引入了块级作用域。</p>
<p> <strong>ES5之前if和for都没有作用域</strong>，所以很多时候需要使用function的作用域，比如闭包。</p>
<h3 id="0-1-没有块级作用域出现的问题"><a href="#0-1-没有块级作用域出现的问题" class="headerlink" title="0.1. 没有块级作用域出现的问题"></a>0.1. 没有块级作用域出现的问题</h3><h4 id="0-1-0-ES5的if没有块级作用域"><a href="#0-1-0-ES5的if没有块级作用域" class="headerlink" title="0.1.0. ES5的if没有块级作用域"></a>0.1.0. ES5的<strong>if</strong>没有块级作用域</h4><p>下列代码输出结果为<code>&#39;zzz&#39;,&#39;ttt&#39;,&#39;ttt&#39;</code>，第一次调用func()，此时name=‘zzz’，在if块外将name置成‘ttt’，此时生效了，if没有块级作用域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> func;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">'zzz'</span>;</span><br><span class="line">	func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(name);</span><br><span class="line">	&#125;</span><br><span class="line">	func();</span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">'ttt'</span>;</span><br><span class="line">func();</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>

<h4 id="0-1-1-ES5的for没有块级作用域"><a href="#0-1-1-ES5的for没有块级作用域" class="headerlink" title="0.1.1. ES5的for没有块级作用域"></a>0.1.1. ES5的for没有块级作用域</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;块级作用域&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button&gt;按钮<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button&gt;按钮2&lt;/</span>button&gt;</span><br><span class="line">  &lt;button&gt;按钮<span class="number">3</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button&gt;按钮4&lt;/</span>button&gt;</span><br><span class="line">  &lt;button&gt;按钮<span class="number">5</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue@<span class="number">2.6</span><span class="number">.10</span>/dist/vue.js<span class="string">"&gt;    &lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">      var btns = document.getElementsByTagName("</span>button<span class="string">");</span></span><br><span class="line"><span class="string">      for (var i = 0; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="string">        btns[i].addEventListener('click',function (param) &#123;</span></span><br><span class="line"><span class="string">        console.log("</span>第<span class="string">"+i+"</span>个按钮被点击了<span class="string">");</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<p> for块级中使用<code>var</code>声明变量i时，是全局变量，点击任意按钮结果都是“第五个按钮被点击了”。说明在执行<code>btns[i].addEventListener(&#39;click&#39;,function())</code>时，for块级循环已经走完，此时<code>i=5</code>，所有添加的事件的i都是5。</p>
<p>而使用闭包能解决上述问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">	(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">		btns[i].addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"第"</span>+i+<span class="string">"个按钮被点击了"</span>);</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或在ES6中使用let/const解决块级作用域问题，let和const有块级作用域，const定义常量，在for块级中使用let解决块级作用域问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6使用let/const</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">	btns[i].addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"第"</span>+i+<span class="string">"个按钮被点击了"</span>);</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0-1-2-const的使用"><a href="#0-1-2-const的使用" class="headerlink" title="0.1.2. const的使用"></a>0.1.2. const的使用</h4><ul>
<li><p>const用来定义常量，赋值之后不能再赋值，再次赋值会报错。</p>
</li>
<li><p>const不能只声明不赋值，会报错。</p>
</li>
<li><p>const常量含义是你不能改变其指向的对象，例如user，但是你可以改变user属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> user = &#123;</span><br><span class="line">        name:<span class="string">"zzz"</span>,</span><br><span class="line">        age:<span class="number">24</span>,</span><br><span class="line">        height:<span class="number">175</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(user)</span><br><span class="line">    user.name = <span class="string">"ttt"</span></span><br><span class="line">    user.age = <span class="number">22</span></span><br><span class="line">    user.height = <span class="number">188</span></span><br><span class="line">    <span class="built_in">console</span>.log(user)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="1-ES6的增强写法"><a href="#1-ES6的增强写法" class="headerlink" title="1. ES6的增强写法"></a>1. ES6的增强写法</h2><h3 id="1-0-ES6的对象属性增强型写法"><a href="#1-0-ES6的对象属性增强型写法" class="headerlink" title="1.0. ES6的对象属性增强型写法"></a>1.0. ES6的对象属性增强型写法</h3><p> ES6以前定义一个对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"zzz"</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name:name,</span><br><span class="line">  age:age</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure>

<p> ES6写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"zzz"</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">	name,age</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure>

<h3 id="1-1-ES6对象的函数增强型写法"><a href="#1-1-ES6对象的函数增强型写法" class="headerlink" title="1.1. ES6对象的函数增强型写法"></a>1.1. ES6对象的函数增强型写法</h3><p> ES6之前对象内定义函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  run:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"奔跑"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  run()&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"奔跑"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在外部定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在对象内部只用 名字 进行调用</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  success</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-箭头函数"><a href="#2-箭头函数" class="headerlink" title="2. 箭头函数"></a>2. 箭头函数</h2><h3 id="2-0-认识箭头函数"><a href="#2-0-认识箭头函数" class="headerlink" title="2.0. 认识箭头函数"></a>2.0. 认识箭头函数</h3><p>传统定义函数的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aaa = <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对象字面量中定义函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    bbb (param) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6中的箭头函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const ccc = (参数列表) =&gt;&#123;&#125;</span></span><br><span class="line"><span class="keyword">const</span> ccc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-箭头函数的参数和返回值"><a href="#2-1-箭头函数的参数和返回值" class="headerlink" title="2.1. 箭头函数的参数和返回值"></a>2.1. 箭头函数的参数和返回值</h3><h4 id="2-1-0-参数问题"><a href="#2-1-0-参数问题" class="headerlink" title="2.1.0. 参数问题"></a>2.1.0. 参数问题</h4><p>放两个参数时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">num1,num2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>放入一个参数时，()可以省略</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> power = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-1-函数内部"><a href="#2-1-1-函数内部" class="headerlink" title="2.1.1. 函数内部"></a>2.1.1. 函数内部</h4><p>函数内部代码块中有多行代码时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello zzz"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello vue"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码块中只有一行代码，可以省略<strong>{}</strong>和return</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const mul = (num1,num2) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   return num1 * num2</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">const</span> mul = <span class="function">(<span class="params">num1,num2</span>) =&gt;</span> num1* num2</span><br><span class="line"><span class="comment">// const log = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log("log")</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">const</span> log = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"log"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-箭头函数this的使用"><a href="#2-1-2-箭头函数this的使用" class="headerlink" title="2.1.2. 箭头函数this的使用"></a>2.1.2. 箭头函数this的使用</h4><h5 id="什么时候使用箭头函数"><a href="#什么时候使用箭头函数" class="headerlink" title="什么时候使用箭头函数"></a>什么时候使用箭头函数</h5><ul>
<li>对于需要使用object.method()方式调用的函数，使用普通函数定义，不要使用箭头函数。对象方法中所使用的this值有确定的含义，指的就是object本身。</li>
<li>其他情况下，全部使用箭头函数。</li>
</ul>
<p>箭头函数<strong>没有自己的this值</strong>，箭头函数中所使用的this都是来自函数作用域链，它的取值遵循普通变量一样的规则，在函数作用域链中<strong>一层一层往上找</strong>。</p>
<h5 id="测试示例"><a href="#测试示例" class="headerlink" title="测试示例"></a>测试示例</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  aaa() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//window</span></span><br><span class="line">      &#125;)</span><br><span class="line">        </span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//window</span></span><br><span class="line">      &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">      </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//window</span></span><br><span class="line">      &#125;)</span><br><span class="line">        </span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//obj</span></span><br><span class="line">      &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.aaa()</span><br></pre></td></tr></table></figure>

<h2 id="3-高阶函数"><a href="#3-高阶函数" class="headerlink" title="3. 高阶函数"></a>3. 高阶函数</h2><h3 id="3-0-filter过滤函数"><a href="#3-0-filter过滤函数" class="headerlink" title="3.0. filter过滤函数"></a>3.0. filter过滤函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">77</span>,<span class="number">55</span>,<span class="number">100</span>,<span class="number">200</span>]</span><br><span class="line"><span class="comment">//要求：获取nums中大于50的数</span></span><br><span class="line"><span class="comment">//回调函数会遍历nums中每一个数，传入回调函数，在回调函数中写判断逻辑，返回true则会被数组接收，false会被拒绝</span></span><br><span class="line"><span class="keyword">let</span> newNums = nums.filter(<span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num &gt; <span class="number">50</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用箭头函数简写</span></span><br><span class="line"><span class="comment">//  let newNums = nums.filter(num =&gt; num &gt;50)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-map高阶函数"><a href="#3-1-map高阶函数" class="headerlink" title="3.1. map高阶函数"></a>3.1. map高阶函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要求：将上面已经过滤的新数组每项乘以2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map函数同样会遍历数组每一项，传入回调函数为参数，num是map遍历的每一项，回调函数function返回值会被添加到新数组中</span></span><br><span class="line"><span class="keyword">let</span> newNums2 = newNums.map(<span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数简写</span></span><br><span class="line"><span class="comment">// let newNums2 = newNums.map(num =&gt; num * 2)</span></span><br><span class="line"><span class="built_in">console</span>.log(newNums2);</span><br></pre></td></tr></table></figure>

<h3 id="3-2-reduce高阶函数"><a href="#3-2-reduce高阶函数" class="headerlink" title="3.2. reduce高阶函数"></a>3.2. reduce高阶函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//要求：将上面map函数得到的newNums2数组所有数累加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//reduce函数同样会遍历数组每一项，传入回调函数和‘0’为参数，0表示回调函数中preValue初始值为0，回调函数中参数preValue是每一次回调函数function返回的值，currentValue是当前值</span></span><br><span class="line"><span class="comment">//例如数组为[154, 110, 200, 400],则回调函数第一次返回值为0+154=154，第二次preValue为154，返回值为154+110=264，以此类推直到遍历完成</span></span><br><span class="line"><span class="keyword">let</span> newNum = newNums2.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">preValue,currentValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> preValue + currentValue</span><br><span class="line"> &#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数简写</span></span><br><span class="line"><span class="comment">// let newNum = newNums2.reduce((preValue,currentValue) =&gt; preValue + currentValue)</span></span><br><span class="line"><span class="built_in">console</span>.log(newNum);</span><br></pre></td></tr></table></figure>

<h3 id="3-3-filter、map和reduce三者结合使用"><a href="#3-3-filter、map和reduce三者结合使用" class="headerlink" title="3.3. filter、map和reduce三者结合使用"></a>3.3. filter、map和reduce三者结合使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上述三个需求综合使用</span></span><br><span class="line"><span class="keyword">let</span> n = nums.filter(<span class="function"><span class="params">num</span> =&gt;</span> num &gt; <span class="number">50</span>).map(<span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">2</span>).reduce(<span class="function">(<span class="params">preValue,currentValue</span>) =&gt;</span> preValue + currentValue)</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br></pre></td></tr></table></figure>

<h2 id="4-参数解构"><a href="#4-参数解构" class="headerlink" title="4.  参数解构"></a>4.  参数解构</h2><p><strong>解构</strong>(Destructuring)：是将一个数据结构分解为更小的部分的过程。大大的简化数组或者对象里面的元素的赋值语句。<br>在ES6中，从数组和对象中提取值，对变量进行赋值。</p>
<h3 id="4-0-数组的解构赋值"><a href="#4-0-数组的解构赋值" class="headerlink" title="4.0. 数组的解构赋值"></a>4.0. 数组的解构赋值</h3><p>使用ES6的结构语法，可以一次性给多个变量赋值。还有可以很简单的交换变量值：</p>
<h4 id="4-0-0-ES6前的数组赋值方式"><a href="#4-0-0-ES6前的数组赋值方式" class="headerlink" title="4.0.0. ES6前的数组赋值方式"></a>4.0.0. ES6前的数组赋值方式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h4 id="4-0-1-ES6的数组赋值方式一"><a href="#4-0-1-ES6的数组赋值方式一" class="headerlink" title="4.0.1. ES6的数组赋值方式一"></a>4.0.1. ES6的数组赋值方式一</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h4 id="4-0-2-ES6的数组赋值方式二"><a href="#4-0-2-ES6的数组赋值方式二" class="headerlink" title="4.0.2. ES6的数组赋值方式二"></a>4.0.2. ES6的数组赋值方式二</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [a,[b,c]] = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<h4 id="4-0-3-ES6的数组赋值方式三"><a href="#4-0-3-ES6的数组赋值方式三" class="headerlink" title="4.0.3. ES6的数组赋值方式三"></a>4.0.3. ES6的数组赋值方式三</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [a,b,c] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//6</span></span><br></pre></td></tr></table></figure>

<h4 id="4-0-4-ES6的数组赋值方式四"><a href="#4-0-4-ES6的数组赋值方式四" class="headerlink" title="4.0.4. ES6的数组赋值方式四"></a>4.0.4. ES6的数组赋值方式四</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [a=<span class="number">1</span>,b=a] = [];<span class="comment">// 相当于指定了a和b的默认值，a=1,b=a=1</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<h4 id="4-0-5-ES6的数组赋值方式五"><a href="#4-0-5-ES6的数组赋值方式五" class="headerlink" title="4.0.5. ES6的数组赋值方式五"></a>4.0.5. ES6的数组赋值方式五</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [a=<span class="number">1</span>,b=a] = [<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<h4 id="4-0-6-ES6的数组赋值方式六"><a href="#4-0-6-ES6的数组赋值方式六" class="headerlink" title="4.0.6. ES6的数组赋值方式六"></a>4.0.6. ES6的数组赋值方式六</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类似函数的剩余参数，数组解构有个类似的，剩余项的概念。 ...tail，里面的tail就是剩余项，也是个数组</span></span><br><span class="line"><span class="keyword">let</span> [head,...tail] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]; <span class="comment">//head:1,tail:[2,3,4]</span></span><br></pre></td></tr></table></figure>

<h4 id="4-0-7-ES6中用剩余项克隆数组的方式"><a href="#4-0-7-ES6中用剩余项克隆数组的方式" class="headerlink" title="4.0.7. ES6中用剩余项克隆数组的方式"></a>4.0.7. ES6中用剩余项克隆数组的方式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">let</span> [...cloneColors] = colors;</span><br><span class="line"><span class="comment">// 需注意，剩余项...cloneColors是最后一项，后面不能有逗号</span></span><br><span class="line"><span class="built_in">console</span>.log(cloneColors)  <span class="comment">//["red", "green", "blue"]</span></span><br></pre></td></tr></table></figure>

<h5 id="若只想获取数组中的第三个元素，则不必给前两项提供变量名。"><a href="#若只想获取数组中的第三个元素，则不必给前两项提供变量名。" class="headerlink" title="若只想获取数组中的第三个元素，则不必给前两项提供变量名。"></a>若只想获取数组中的第三个元素，则不必给前两项提供变量名。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">let</span> [,,thirdColor] = colors;</span><br><span class="line"><span class="built_in">console</span>.log(thirdColor)  <span class="comment">//blue</span></span><br></pre></td></tr></table></figure>

<h3 id="5-0-对象的解构赋值"><a href="#5-0-对象的解构赋值" class="headerlink" title="5.0. 对象的解构赋值"></a>5.0. 对象的解构赋值</h3><h4 id="5-0-0-ES6前的对象赋值"><a href="#5-0-0-ES6前的对象赋值" class="headerlink" title="5.0.0. ES6前的对象赋值"></a>5.0.0. ES6前的对象赋值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="5-0-1-ES6的对象赋值"><a href="#5-0-1-ES6的对象赋值" class="headerlink" title="5.0.1. ES6的对象赋值"></a>5.0.1. ES6的对象赋值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;<span class="attr">a</span>:name,b&#125; = &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;a,b&#125; = &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;a,b&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:[<span class="number">2</span>,<span class="number">3</span>]&#125;;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">	a:[</span><br><span class="line">		<span class="string">'hi'</span>,</span><br><span class="line">		&#123;<span class="attr">b</span>:<span class="string">'hello'</span>&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">a</span>:[name,&#123;b&#125;]&#125; = json;</span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">//hi</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//hello</span></span><br></pre></td></tr></table></figure>

<h3 id="6-0-函数的解构赋值"><a href="#6-0-函数的解构赋值" class="headerlink" title="6.0. 函数的解构赋值"></a>6.0. 函数的解构赋值</h3><h4 id="6-0-0-ES6前的函数赋值"><a href="#6-0-0-ES6前的函数赋值" class="headerlink" title="6.0.0. ES6前的函数赋值"></a>6.0.0. ES6前的函数赋值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log([a,b]);</span><br><span class="line">　　&#125;</span><br><span class="line">　　fn(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure>

<h4 id="6-0-1-ES6的函数赋值方式一"><a href="#6-0-1-ES6的函数赋值方式一" class="headerlink" title="6.0.1. ES6的函数赋值方式一"></a>6.0.1. ES6的函数赋值方式一</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">[a,b]</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log([a,b]);</span><br><span class="line">&#125;</span><br><span class="line">fn([<span class="number">3</span>,<span class="number">4</span>]);<span class="comment">//[3, 4]</span></span><br></pre></td></tr></table></figure>

<h4 id="6-0-2-ES6的函数赋值方式二"><a href="#6-0-2-ES6的函数赋值方式二" class="headerlink" title="6.0.2. ES6的函数赋值方式二"></a>6.0.2. ES6的函数赋值方式二</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">&#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125; = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log([a,b]);</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　fn(); <span class="comment">//[1, 2]</span></span><br><span class="line">　　fn(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;); <span class="comment">//[1, 2]</span></span><br><span class="line">　　fn(&#123;<span class="attr">a</span>:<span class="number">10</span>,<span class="attr">b</span>:<span class="number">11</span>&#125;); <span class="comment">//[10, 11]</span></span><br></pre></td></tr></table></figure>

<h5 id="ES6的函数赋值方式三"><a href="#ES6的函数赋值方式三" class="headerlink" title="ES6的函数赋值方式三"></a>ES6的函数赋值方式三</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">&#123;a,b&#125; = &#123;a:<span class="number">1</span>,b:<span class="number">2</span>&#125;</span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log([a,b]);</span><br><span class="line">　　&#125;</span><br><span class="line">　　fn(); <span class="comment">//[1, 2]</span></span><br><span class="line">　　fn(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;); <span class="comment">//[1, undefined]</span></span><br><span class="line">　　fn(&#123;<span class="attr">a</span>:<span class="number">10</span>,<span class="attr">b</span>:<span class="number">11</span>&#125;); <span class="comment">//[10, 11]</span></span><br></pre></td></tr></table></figure>

<h2 id="7-0-ES6的字符串拼接"><a href="#7-0-ES6的字符串拼接" class="headerlink" title="7.0. ES6的字符串拼接"></a>7.0. ES6的字符串拼接</h2><p>不需要任何的加号和引号，全部字符仅仅由一组<strong>``</strong>符号包裹即可，而放置动态数据或者变量用<code>${变量}</code>的方式即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstname=<span class="string">"张"</span></span><br><span class="line"><span class="keyword">var</span> lastname=<span class="string">"三"</span></span><br><span class="line"><span class="keyword">var</span> newSplicing=<span class="string">`我姓<span class="subst">$&#123;firstname&#125;</span>名<span class="subst">$&#123;lastname&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(newSplicing)  <span class="comment">//我姓张名三</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端笔记</tag>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Git</title>
    <url>/2020/04/21/%E7%AC%94%E8%AE%B0-Git/</url>
    <content><![CDATA[<p>施工中</p>
<a id="more"></a>]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本控制工具</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Html</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-Html/</url>
    <content><![CDATA[<p>施工中</p>
<a id="more"></a>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Cookie和Session</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-Cookie%E5%92%8CSession/</url>
    <content><![CDATA[<p>Cookie和Session的简单学习</p>
<a id="more"></a>

<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="什么是Cookie"><a href="#什么是Cookie" class="headerlink" title="什么是Cookie"></a>什么是Cookie</h2><ul>
<li>Cookie 翻译过来是饼干的意思。</li>
<li>Cookie 是服务器通知客户端保存键值对的一种技术。</li>
<li>客户端有了 Cookie 后，每次请求<strong>对应路径</strong>时都发送<strong>对应Cookie</strong>给服务器。</li>
</ul>
<h2 id="Cookie的特点"><a href="#Cookie的特点" class="headerlink" title="Cookie的特点"></a>Cookie的特点</h2><ul>
<li>每个 Cookie 的大小不能超过 4kb</li>
<li>服务器可以一次向浏览器发送多个Cookie</li>
<li>Cookie对象的key和value的类型必须是字符串，key不能是中文或特殊字符，且key和value中不能有空格</li>
<li>Cookie默认无有效时长，默认保存在浏览器中，浏览器关闭，Cookie消失。<ul>
<li>Cookie有效时长 = 0，直接被删除</li>
<li>Cookie有效时长 &lt; 0，不会被存储</li>
<li>Cookie有效时长 &gt; 0，存储在硬盘文件中</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置Cookie的有效时长为1小时</span></span><br><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Cookie的创建"><a href="#Cookie的创建" class="headerlink" title="Cookie的创建"></a>Cookie的创建</h2><p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Cookie%E5%92%8CSession/Cookie%E7%9A%84%E5%88%9B%E5%BB%BA.png" alt="Cookie的创建"><br>示例代代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span></span><br><span class="line"><span class="function">IOException </span>&#123;</span><br><span class="line">  <span class="comment">//1 创建 Cookie 对象</span></span><br><span class="line">  Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"key4"</span>, <span class="string">"value4"</span>);</span><br><span class="line">  <span class="comment">//2 通知客户端保存 Cookie</span></span><br><span class="line">  resp.addCookie(cookie);</span><br><span class="line">  <span class="comment">//1 创建 Cookie 对象</span></span><br><span class="line">  Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">"key5"</span>, <span class="string">"value5"</span>);</span><br><span class="line">  <span class="comment">//2 通知客户端保存 Cookie</span></span><br><span class="line">  resp.addCookie(cookie1);</span><br><span class="line">  resp.getWriter().write(<span class="string">"Cookie 创建成功"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="服务器如何获取Cookie"><a href="#服务器如何获取Cookie" class="headerlink" title="服务器如何获取Cookie"></a>服务器如何获取Cookie</h2><p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Cookie%E5%92%8CSession/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%8E%B7%E5%8F%96Cookie.png" alt="服务端获取Cookie"><br>先封装一个获取Cookie的工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieUtils</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查找指定名称的 Cookie 对象</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> cookies</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title">findCookie</span><span class="params">(String name , Cookie[] cookies)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span> || cookies == <span class="keyword">null</span> || cookies.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.equals(cookie.getName())) &#123;</span><br><span class="line">      <span class="keyword">return</span> cookie;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着上示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">getCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span></span><br><span class="line"><span class="function">IOException </span>&#123;</span><br><span class="line">  Cookie[] cookies = req.getCookies();</span><br><span class="line">  <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">  <span class="comment">// getName 方法返回 Cookie 的 key（名）</span></span><br><span class="line">  <span class="comment">// getValue 方法返回 Cookie 的 value 值</span></span><br><span class="line">  resp.getWriter().write(<span class="string">"Cookie["</span> + cookie.getName() + <span class="string">"="</span> + cookie.getValue() + <span class="string">"] &lt;br/&gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Cookie iWantCookie = CookieUtils.findCookie(<span class="string">"key1"</span>, cookies);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果不等于 null，说明赋过值，也就是找到了需要的 Cookie</span></span><br><span class="line">  <span class="keyword">if</span> (iWantCookie != <span class="keyword">null</span>) &#123;</span><br><span class="line">    resp.getWriter().write(<span class="string">"找到了需要的 Cookie"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Cookie值的修改"><a href="#Cookie值的修改" class="headerlink" title="Cookie值的修改"></a>Cookie值的修改</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>1、先创建一个要修改的同名（指的就是 key）的 Cookie 对象<br>2、调用构造器，同时赋于新的 Cookie 值。<br>3、调用 response.addCookie( Cookie );</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、先创建一个要修改的同名的 Cookie 对象</span></span><br><span class="line"><span class="comment">// 2、调用构造器，同时赋于新的 Cookie 值</span></span><br><span class="line">  Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"key1"</span>,<span class="string">"newValue1"</span>);</span><br><span class="line"><span class="comment">// 3、调用 response.addCookie( Cookie ); 通知 客户端 保存修改</span></span><br><span class="line">  resp.addCookie(cookie);</span><br></pre></td></tr></table></figure>

<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>1、先查找到需要修改的 Cookie 对象<br>2、调用 setValue()方法赋于新的 Cookie 值。<br>3、调用 response.addCookie()通知客户端保存修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、先查找到需要修改的 Cookie 对象</span></span><br><span class="line">  Cookie cookie = CookieUtils.findCookie(<span class="string">"key2"</span>, req.getCookies());</span><br><span class="line">  <span class="keyword">if</span> (cookie != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 2、调用 setValue()方法赋于新的 Cookie 值。</span></span><br><span class="line">    cookie.setValue(<span class="string">"newValue2"</span>);</span><br><span class="line"><span class="comment">// 3、调用 response.addCookie()通知客户端保存修改</span></span><br><span class="line">  resp.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul>
<li>String getName();</li>
<li>String getValue();</li>
<li>cookie.setValue(value)重置cookie的value值</li>
<li>cookie.setMaxAge(60 * 60):设置有效时长</li>
<li>cookie.setDomain(“域名”):当访问指定的域名时，才携带Cookie</li>
<li>cookie.setPath(“路径”):当访问指定的路径时，才携带Cookie<ul>
<li>Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。</li>
<li>path 属性是通过请求的地址来进行有效的过滤。<br>CookieA path=/工程路径;CookieB path=/工程路径/abc<br>请求地址如下：<a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a><br>CookieA 发送;CookieB 不发送。<br><a href="http://ip:port/工程路径/abc/a.html">http://ip:port/工程路径/abc/a.html</a><br>CookieA 发送;CookieB 发送。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">testPath</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,IOException </span>&#123;</span><br><span class="line"> Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"path1"</span>, <span class="string">"path1"</span>);</span><br><span class="line"><span class="comment">// getContextPath() ===&gt;&gt;&gt;&gt; 得到工程路径</span></span><br><span class="line">cookie.setPath( req.getContextPath() + <span class="string">"/abc"</span> ); <span class="comment">// ===&gt;&gt;&gt;&gt; /工程路径/abc</span></span><br><span class="line">resp.addCookie(cookie);</span><br><span class="line">resp.getWriter().write(<span class="string">"创建了一个带有 Path 路径的 Cookie"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><h2 id="什么是Session"><a href="#什么是Session" class="headerlink" title="什么是Session"></a>什么是Session</h2><ul>
<li>Session表示会话，它是用来维护一个客户端和服务器之间关联的一种技术。在java中对应的类型是javax.servlet.http.HttpSession,简称session/会话</li>
<li>一次会话对应一个HttpSession对象，一次会话指Session对象从创建到超时销毁的过程</li>
<li>session对象的超时默认为30分钟</li>
<li>因为本地Timcat服务器的xml文件里设置的就是30分钟</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Session 会话中，经常用来保存用户登录之后的信息。</li>
</ul>
<h2 id="Session的常用方法"><a href="#Session的常用方法" class="headerlink" title="Session的常用方法"></a>Session的常用方法</h2><ul>
<li><strong>void setAttribute(String name, Object value)</strong></li>
<li><strong>Object getAttribute(String name)</strong></li>
<li><strong>void removeAttribute(String name)</strong></li>
<li><strong>String getId()</strong>:获取sessionId</li>
<li><strong>boolean isNew()</strong>:判断是否是新用户</li>
<li><strong>void invalidate()</strong> :销毁session</li>
<li><strong>void setMaxInactiveInterval(second)</strong>:设置最大有效 非活动时间，即超时时间。Session的超时时间，指客户端的两次请求的最大间隔时间。</li>
<li><strong>void getMaxInactiveInterval(second)</strong>:获取最大有效 非活动时间</li>
</ul>
<h2 id="Session的原理简述"><a href="#Session的原理简述" class="headerlink" title="Session的原理简述"></a>Session的原理简述</h2><ul>
<li>浏览器首次发送请求，服务器会创建一个HttpSession对象，该对象代表一次会话</li>
<li>同时生成HttpSession对象对应的Cookie对象，Cookie对象的name是“JSESSIONID”，Cookie的value是32位长度的字符串。</li>
<li>服务器将Cookie的value和HttpSession对象绑定到session列表中</li>
<li>然后服务器将Cookie完整发给浏览器客户端，浏览器客户端将Cookie保存到缓存中(浏览器不关闭，Cookie不消失)</li>
<li>当浏览器再次发送请求时，会自动提交缓存中的Cookie</li>
<li>服务器接收Cookie后，通过Cookie的name得到其value,然后去session列表中检索对应的HttpSession对象</li>
</ul>
<h2 id="浏览器禁用Cookie的问题"><a href="#浏览器禁用Cookie的问题" class="headerlink" title="浏览器禁用Cookie的问题"></a>浏览器禁用Cookie的问题</h2><ul>
<li>禁用后，浏览器缓存中不会再保存Cookie</li>
<li>导致一个会话中，每次刷新获取新的会话对象，无法获取对应的会话对象</li>
<li>禁用Cookie后，每次获取的会话对象都是新的<br>浏览器禁用Cookie后，若想拿到对应的Session对象，需用URL重写机制<br>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://localhost/xxxx/user/xxxxxSession;jsessionid=**xxxxxxxxxxxxxxxxxxxxxxxxx(Cookie的32位value)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>Cookie</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-JQuery</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-JQuery/</url>
    <content><![CDATA[<p>施工中</p>
<a id="more"></a>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis入门配置示例</title>
    <url>/2020/04/20/MyBatis%E5%85%A5%E9%97%A8%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>MyBatis的几个入门示例</p>
<a id="more"></a>

<h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>该示例不使用mapper代理的方式，也不写DAO接口和DAO实现类</p>
<h4 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h4><p>导两个关键的包，<strong>mybatis-3.5.3.jar</strong>和<strong>mysql-connector-java-5.1.47.jar</strong></p>
<h4 id="2、编写MyBatis主配置文件"><a href="#2、编写MyBatis主配置文件" class="headerlink" title="2、编写MyBatis主配置文件"></a>2、编写MyBatis主配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--数据源的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  此处需注意url的写法，"jdbc:mysql:///mybatistest"</span></span><br><span class="line"><span class="comment">                    也可写 jdbc:mysql://ip:port/mybatistest --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatistest"/&gt; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///mybatistest?useSSL=false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"rootrr"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="org/mybatis/example/BlogMapper.xml"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--不能写.  以文件夹的形式展示映射文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/javasm/cn/mapper/user.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、编写mapper映射文件"><a href="#3、编写mapper映射文件" class="headerlink" title="3、编写mapper映射文件"></a>3、编写mapper映射文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span>  <span class="attr">resultType</span>=<span class="string">"com.javasm.cn.entity.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOne"</span> <span class="attr">resultType</span>=<span class="string">"com.javasm.cn.entity.User"</span>&gt;</span></span><br><span class="line">        select * from user where uage=#&#123;uage&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 此处#&#123;&#125;里的值必须要和传进来的实体类的属性名一致，包括大小写</span></span><br><span class="line"><span class="comment">         insert标签可不用写parameterType属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertOne"</span>&gt;</span></span><br><span class="line">        INSERT INTO user (uname, uage, ubirthday)   VALUES(#&#123;uName&#125;, #&#123;uAge&#125;, #&#123;uBirthday&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteOne"</span>&gt;</span></span><br><span class="line">        DELETE FROM user WHERE uid=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateOne"</span>&gt;</span></span><br><span class="line">        UPDATE user SET uname=#&#123;uName&#125; WHERE uid=#&#123;uId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4、编写实体类"><a href="#4、编写实体类" class="headerlink" title="4、编写实体类"></a>4、编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uId;</span><br><span class="line">    <span class="keyword">private</span> String uName;</span><br><span class="line">    <span class="keyword">private</span> Integer uAge;</span><br><span class="line">    <span class="keyword">private</span> Date uBirthday;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// setter、getter、toString方法略</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String uName, Integer uAge, Date uBirthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uName = uName;</span><br><span class="line">        <span class="keyword">this</span>.uAge = uAge;</span><br><span class="line">        <span class="keyword">this</span>.uBirthday = uBirthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5、编写测试类测试"><a href="#5、编写测试类测试" class="headerlink" title="5、编写测试类测试"></a>5、编写测试类测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">// 从配置文件的信息中 获取到sqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">// 获得SqlSession 对象  该对象可以调用映射文件中定义的 各种标签</span></span><br><span class="line">        sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAll</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 查询所有</span></span><br><span class="line">        List&lt;Object&gt; objects = sqlSession.selectList(<span class="string">"test.findAll"</span>);</span><br><span class="line">        System.out.println(objects);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectOne</span> <span class="params">(Integer uAge)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 查询单个</span></span><br><span class="line">        User o = (User)sqlSession.selectOne(<span class="string">"test.findOne"</span>, uAge);</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 插入单条数据</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"王三"</span>, <span class="number">15</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        sqlSession.insert(<span class="string">"test.insertOne"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOne</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 删除单条数据</span></span><br><span class="line">        sqlSession.delete(<span class="string">"test.deleteOne"</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOne</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 更新单条数据</span></span><br><span class="line">        User user = selectOne(<span class="number">14</span>);</span><br><span class="line">        user.setuName(<span class="string">"更新后的王二"</span>);</span><br><span class="line">        sqlSession.update(<span class="string">"test.updateOne"</span>, user );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTest</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><p>该示例不使用mapper代理的方式，编写mapper接口及其实现类。</p>
<h4 id="1、导包-1"><a href="#1、导包-1" class="headerlink" title="1、导包"></a>1、导包</h4><p>导两个关键的包，<strong>mybatis-3.5.3.jar</strong>和<strong>mysql-connector-java-5.1.47.jar</strong></p>
<h4 id="2、编写MyBatis主配置文件-1"><a href="#2、编写MyBatis主配置文件-1" class="headerlink" title="2、编写MyBatis主配置文件"></a>2、编写MyBatis主配置文件</h4><p><strong>注意</strong>：这里的配置文件中的<strong>mapper标签</strong>里使用了resource属性来引入外部的mapper映射文件，所以，对mapper接口和mapper映射文件二者位置的关系不做要求。如果是使用class、url或package属性引入的话，这两个文件，必须要在同一目录结构下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--数据源的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  此处需注意url的写法，"jdbc:mysql:///mybatistest"</span></span><br><span class="line"><span class="comment">                    也可写 jdbc:mysql://ip:port/mybatistest --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatistest"/&gt; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///mybatistest?useSSL=false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"rootrr"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="org/mybatis/example/BlogMapper.xml"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--不能写.  以文件夹的形式展示映射文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/javasm/cn/mapper/user.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、编写mapper映射文件-1"><a href="#3、编写mapper映射文件-1" class="headerlink" title="3、编写mapper映射文件"></a>3、编写mapper映射文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span>  <span class="attr">resultType</span>=<span class="string">"com.javasm.cn.entity.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOne"</span> <span class="attr">resultType</span>=<span class="string">"com.javasm.cn.entity.User"</span>&gt;</span></span><br><span class="line">        select * from user where uage=#&#123;uage&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 此处#&#123;&#125;里的值必须要和传进来的实体类的属性名一致，包括大小写</span></span><br><span class="line"><span class="comment">         insert标签可不用写parameterType属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertOne"</span>&gt;</span></span><br><span class="line">        INSERT INTO user (uname, uage, ubirthday)   VALUES(#&#123;uName&#125;, #&#123;uAge&#125;, #&#123;uBirthday&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteOne"</span>&gt;</span></span><br><span class="line">        DELETE FROM user WHERE uid=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateOne"</span>&gt;</span></span><br><span class="line">        UPDATE user SET uname=#&#123;uName&#125; WHERE uid=#&#123;uId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4、编写mapper接口"><a href="#4、编写mapper接口" class="headerlink" title="4、编写mapper接口"></a>4、编写mapper接口</h4><p>mapper、dao、handler，都一个东西</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectAll</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">selectOne</span> <span class="params">(Integer uAge)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertOne</span> <span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateOne</span> <span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteOne</span> <span class="params">(Integer uId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5、编写mapper实现类"><a href="#5、编写mapper实现类" class="headerlink" title="5、编写mapper实现类"></a>5、编写mapper实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDAOImpl</span> <span class="keyword">implements</span> <span class="title">IUserDAO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">// 从配置文件的信息中 获取到sqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">// 获得SqlSession 对象  该对象可以调用映射文件中定义的 各种标签</span></span><br><span class="line">        sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDAOImpl</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">"test.findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectOne</span><span class="params">(Integer uAge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (User)sqlSession.selectOne(<span class="string">"test.findOne"</span>, uAge);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertOne</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.insert(<span class="string">"test.insertOne"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateOne</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.update(<span class="string">"test.updateOne"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteOne</span><span class="params">(Integer uId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.delete(<span class="string">"test.deleteOne"</span>, uId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6、编写实体类"><a href="#6、编写实体类" class="headerlink" title="6、编写实体类"></a>6、编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uId;</span><br><span class="line">    <span class="keyword">private</span> String uName;</span><br><span class="line">    <span class="keyword">private</span> Integer uAge;</span><br><span class="line">    <span class="keyword">private</span> Date uBirthday;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// setter、getter、toString方法略</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String uName, Integer uAge, Date uBirthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uName = uName;</span><br><span class="line">        <span class="keyword">this</span>.uAge = uAge;</span><br><span class="line">        <span class="keyword">this</span>.uBirthday = uBirthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7、编写测试类测试"><a href="#7、编写测试类测试" class="headerlink" title="7、编写测试类测试"></a>7、编写测试类测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisDAOTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDAOImpl userDAO = <span class="keyword">new</span> UserDAOImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBatisDAOTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        userDAO.release();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAll</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDAO.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectOne</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userDAO.selectOne(<span class="number">14</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertOne</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"王四"</span>, <span class="number">8</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        userDAO.insertOne(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateOne</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userDAO.selectOne(<span class="number">14</span>);</span><br><span class="line">        user.setuName(<span class="string">"改后的王"</span>);</span><br><span class="line">        userDAO.updateOne(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteOne</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        userDAO.deleteOne(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h3><p>该示例使用了mapper代理的方式，免去了编写mapper接口的实现类。</p>
<h4 id="1、导包-2"><a href="#1、导包-2" class="headerlink" title="1、导包"></a>1、导包</h4><p>导两个关键的包，<strong>mybatis-3.5.3.jar</strong>和<strong>mysql-connector-java-5.1.47.jar</strong></p>
<h4 id="2、编写MyBatis主配置文件-2"><a href="#2、编写MyBatis主配置文件-2" class="headerlink" title="2、编写MyBatis主配置文件"></a>2、编写MyBatis主配置文件</h4><p><strong>注意</strong>：这里的配置文件中的<strong>mapper标签</strong>里使用了resource属性来引入外部的mapper映射文件，所以，对mapper接口和mapper映射文件二者位置的关系不做要求。<strong>如果是使用class、url或package属性引入的话，这两个文件，必须要在同一目录结构下</strong>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据源的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  此处需注意url的写法，"jdbc:mysql:///mybatistest"</span></span><br><span class="line"><span class="comment">                    也可写 jdbc:mysql://ip:port/mybatistest --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatistest"/&gt; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///mybatistest?useSSL=false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"rootrr"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="org/mybatis/example/BlogMapper.xml"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--不能写点，以文件夹的形式展示映射文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/javasm/cn/xml/usermapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、编写mapper映射文件-2"><a href="#3、编写mapper映射文件-2" class="headerlink" title="3、编写mapper映射文件"></a>3、编写mapper映射文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.javasm.cn.mapper.IUserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span>  <span class="attr">resultType</span>=<span class="string">"com.javasm.cn.entity.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOneByAge"</span> <span class="attr">resultType</span>=<span class="string">"com.javasm.cn.entity.User"</span>&gt;</span></span><br><span class="line">        select * from user where uage=#&#123;uage&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 此处#&#123;&#125;里的值必须要传进来的实体类的属性名一致，包括大小写</span></span><br><span class="line"><span class="comment">         insert标签可不用写parameterType属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertOne"</span>&gt;</span></span><br><span class="line">        INSERT INTO user (uname, uage, ubirthday)   VALUES(#&#123;uName&#125;, #&#123;uAge&#125;, #&#123;uBirthday&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateOne"</span>&gt;</span></span><br><span class="line">        UPDATE user SET uname=#&#123;uName&#125; WHERE uid=#&#123;uId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteOne"</span>&gt;</span></span><br><span class="line">        DELETE FROM user WHERE uid=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4、编写mapper接口-1"><a href="#4、编写mapper接口-1" class="headerlink" title="4、编写mapper接口"></a>4、编写mapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectAll</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">selectOneByAge</span> <span class="params">(Integer uAge)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertOne</span> <span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateOne</span> <span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteOne</span> <span class="params">(Integer uId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5、编写实体类"><a href="#5、编写实体类" class="headerlink" title="5、编写实体类"></a>5、编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uId;</span><br><span class="line">    <span class="keyword">private</span> String uName;</span><br><span class="line">    <span class="keyword">private</span> Integer uAge;</span><br><span class="line">    <span class="keyword">private</span> Date uBirthday;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// setter、getter、toString方法略</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String uName, Integer uAge, Date uBirthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uName = uName;</span><br><span class="line">        <span class="keyword">this</span>.uAge = uAge;</span><br><span class="line">        <span class="keyword">this</span>.uBirthday = uBirthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6、编写测试类测试"><a href="#6、编写测试类测试" class="headerlink" title="6、编写测试类测试"></a>6、编写测试类测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTestByProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> IUserMapper mapper;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String config = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream in = Resources.getResourceAsStream(config);</span><br><span class="line">        SqlSessionFactory build = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        sqlSession = build.openSession(<span class="keyword">true</span>);</span><br><span class="line">        mapper = sqlSession.getMapper(IUserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTest</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAll</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = mapper.selectAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectOneByAge</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = mapper.selectOneByAge(<span class="number">14</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertOne</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"王六"</span>, <span class="number">22</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        mapper.insertOne(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateOne</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = mapper.selectOneByAge(<span class="number">14</span>);</span><br><span class="line">        user.setuName(<span class="string">"又改回来的王"</span>);</span><br><span class="line">        mapper.updateOne(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteOne</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        mapper.deleteOne(<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>入门配置示例</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>配置案例</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Filter和Listener</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-Filter%E5%92%8CListener/</url>
    <content><![CDATA[<p>简单了解下Filter和Listener</p>
<a id="more"></a>

<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>Filter，JavaWeb 三大组件之一。Filter是 JavaEE 的规范，也就是接口。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li><strong>统一编码</strong>，在doFilter方法中统一设置编码方法</li>
<li><strong>登录拦截</strong>，在doFilter方法中获取Session来判断是否登录</li>
<li><strong>过滤关键字</strong></li>
</ul>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="编写类实现Filter接口"><a href="#编写类实现Filter接口" class="headerlink" title="编写类实现Filter接口"></a>编写类实现Filter接口</h4><p>实现Filter接口，并重写doFilter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * doFilter 方法，专门用于拦截请求。可以做权限检查</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpSession session = httpServletRequest.getSession();</span><br><span class="line">        Object user = session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="comment">// 如果等于 null，说明还没有登录</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">        servletRequest.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(servletRequest,servletResponse);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 让程序继续往下访问用户的目标资源</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><p>略</p>
<h4 id="配置拦截路径"><a href="#配置拦截路径" class="headerlink" title="配置拦截路径"></a>配置拦截路径</h4><h5 id="方式一-在web-xml中配置"><a href="#方式一-在web-xml中配置" class="headerlink" title="方式一 在web.xml中配置"></a>方式一 在web.xml中配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--filter 标签用于配置一个 Filter 过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--给 filter 起一个别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置 filter 的全类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filter.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--filter-mapping 配置 Filter 过滤器的拦截路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter-name 表示当前的拦截路径给哪个 filter 使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--url-pattern 配置拦截路径</span></span><br><span class="line"><span class="comment">	/ 表示请求地址为：http://ip:port/工程路径/ 映射到 IDEA 的 web 目录</span></span><br><span class="line"><span class="comment">	/admin/* 表示请求地址为：http://ip:port/工程路径/admin/*</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="方式二-注解方式配置"><a href="#方式二-注解方式配置" class="headerlink" title="方式二 注解方式配置"></a>方式二 注解方式配置</h5><p>在实现Filter的类上添加<strong>@WebFilter</strong>注解即可。</p>
<h3 id="执行流程简述"><a href="#执行流程简述" class="headerlink" title="执行流程简述"></a>执行流程简述</h3><ul>
<li>执行过滤器</li>
<li>执行放行后的资源</li>
<li>再执行过滤器放行代码下的代码</li>
</ul>
<h3 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h3><ul>
<li>init：服务器启动时创建Filter对象，调用init方法。只执行一次。用于加载资源</li>
<li>doFilter：每一次请求被拦截资源时，会执行。执行多次</li>
<li>destroy：服务器<strong>正常</strong>关闭Filter对象销毁，只执行一次。用于释放资源</li>
</ul>
<h3 id="过滤器配置"><a href="#过滤器配置" class="headerlink" title="过滤器配置"></a>过滤器配置</h3><h4 id="配置拦截路径-1"><a href="#配置拦截路径-1" class="headerlink" title="配置拦截路径"></a>配置拦截路径</h4><ol>
<li>具体资源路径：<strong>/xxx.jsp</strong>。只有访问xxx.jsp资源时，过滤器才会执行</li>
<li>拦截目录：<strong>/user/</strong>。访问/user下的所有资源时，过滤器才会执行</li>
<li>后缀名拦截：<strong>*.jsp</strong>或<strong>*.do</strong>等。访问所有后缀名为jsp或do等资源时，过滤器才会执行</li>
<li>拦截所有资源：<strong>/*</strong>。访问所有资源时，过滤器会执行</li>
</ol>
<h4 id="配置拦截方式"><a href="#配置拦截方式" class="headerlink" title="配置拦截方式"></a>配置拦截方式</h4><h5 id="注解方式配置"><a href="#注解方式配置" class="headerlink" title="注解方式配置"></a>注解方式配置</h5><ul>
<li><strong>@WebFilter(value=” /* “, dispatcherTypes=DispatcherType.REQUEST)</strong>：浏览器直接请求<strong>资源</strong>时，过滤器会被执行(不写默认REQUEST)</li>
<li><strong>@WebFilter(value=” /* “, dispatcherTypes=DispatcherType.FORWARD)</strong>：只有转发访问<strong>资源</strong>时，过滤器会被执行</li>
<li><strong>@WebFilter(value=” /* “, dispatcherTypes=DispatcherType.INCLUDE)</strong>：包含访问资源？？？</li>
<li><strong>@WebFilter(value=” /* “, dispatcherTypes=DispatcherType.ERROR)</strong>：错误跳转资源？？？</li>
<li><strong>@WebFilter(value=” /* “, dispatcherTypes=DispatcherType.ASYNC)</strong>：异步访问资源？？？</li>
</ul>
<p>注：dispatcherTypes可有多个值，例dispatcherTypes={DispatcherType.REQUEST,DispatcherType.FORWARD}</p>
<h5 id="web-xml方式配置"><a href="#web-xml方式配置" class="headerlink" title="web.xml方式配置"></a>web.xml方式配置</h5><p>在&lt;filter-mapping&gt;标签里设置&lt;dispatcher&gt;标签。值还是那五个值</p>
<h3 id="FilterChain"><a href="#FilterChain" class="headerlink" title="FilterChain"></a>FilterChain</h3><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p><strong>过滤器A—-&gt;过滤器B—-&gt;资源执行—-&gt;过滤器B—-&gt;过滤器A</strong></p>
<h4 id="配置顺序"><a href="#配置顺序" class="headerlink" title="配置顺序"></a>配置顺序</h4><ul>
<li>如果是按注解配置，<strong>按照类名的字符串比较规则，值小的先执行</strong>。例：AFilter先执行，BFilter后执行<br>FilterDemo17先执行，FilterDemo7后执行</li>
<li>如果是按web.xml配置，谁的&lt;filter&gt;标签定义在上面谁先执行</li>
</ul>
<h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Filter%E5%92%8CListener/FilterChain%E5%9B%BE%E7%A4%BA.png" alt="Filter图示"></p>
<h1 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h1><h2 id="事件监听相关概念"><a href="#事件监听相关概念" class="headerlink" title="事件监听相关概念"></a>事件监听相关概念</h2><ul>
<li>事件：一件事情</li>
<li>事件源：事件发生的地方</li>
<li>监听器：一个对象</li>
<li>注册监听：将事件、事件源、监听器绑定在一起，当事件源发生某个事件时，执行监听器代码</li>
</ul>
<h2 id="监听器分类"><a href="#监听器分类" class="headerlink" title="监听器分类"></a>监听器分类</h2><ol>
<li><p>监听域对象(pageContext，request，application)自身创建和销毁的事件监听器，需在web.xml文件中注册。</p>
</li>
<li><p>监听域对象中属性的增加和删除的事件监听器，需在web.xml文件中注册。</p>
</li>
<li><p>监听绑定到HttpSession域中的某个对象状态的事件监听器,HttpSessionBindingListener接口和HttpSessionActivationListener接口。较少使用，无需配置，其实现类如未实现Serializable接口，则只能写到磁盘上，不能读取出来。</p>
<h2 id="ServletContextListener-接口"><a href="#ServletContextListener-接口" class="headerlink" title="ServletContextListener(接口)"></a>ServletContextListener(接口)</h2><h3 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h3></li>
<li><p>定义类去实现ServletContextListener接口</p>
</li>
<li><p>重写方法</p>
</li>
<li><p>配置</p>
<ul>
<li><p>注解方式配置，实现类上配个@WebListener注解</p>
</li>
<li><p>web.xml方式配置</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>类路径<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><ul>
<li>void contextDestroyed(ServletContextEvent sce)：ServletContext对象被销毁<strong>前</strong>会调用该方法</li>
<li>void contextInitialized(ServletContextEvent sce)：ServletContext对象创建<strong>后</strong>会调用该方法<ul>
<li>在contextInitialized方法中加载资源文件的步骤</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.  获取Servletcontext对象</span></span><br><span class="line">ServletContext servletContext = servletContextEvent.getServletContext();</span><br><span class="line"><span class="comment">// 2.  加载资源文件 加载前要在web.xml里配置相关标签,指定初始化参数</span></span><br><span class="line">/ * &lt;!--指定初始化参数--&gt;</span><br><span class="line">  *	&lt;context-param&gt;</span><br><span class="line">  *		&lt;param-name&gt;</span><br><span class="line">  *			contextConfigLocation</span><br><span class="line">  *		&lt;/param-name&gt;</span><br><span class="line">  *		&lt;param-value&gt;</span><br><span class="line">  *			xml文件的相对路径</span><br><span class="line">  *		&lt;/param-value&gt;</span><br><span class="line">  * &lt;/context-param&gt;</span><br><span class="line">  **/</span><br><span class="line">String contextConfigLocation = servletContext.getInitParameter(<span class="string">"contextConfigLocation"</span>);</span><br><span class="line"><span class="comment">// 3.  获取真实路径</span></span><br><span class="line">String realPath = servletContext.getRealPath(contextConfigLocation);</span><br><span class="line"><span class="comment">// 4.  通过流加载进内存</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Filter</tag>
        <tag>Listener</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-IO流</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-IO%E6%B5%81/</url>
    <content><![CDATA[<p>各种各样的流</p>
<a id="more"></a>

<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="基本叙述"><a href="#基本叙述" class="headerlink" title="基本叙述"></a>基本叙述</h3><ul>
<li><strong>java.io.File</strong>类：<strong>文件</strong>和<strong>文件目录路径</strong>的抽象表示形式，与平台无关</li>
<li><strong>File</strong> 能新建、删除、重命名文件和目录，但 <strong>File 不能访问文件内容本身</strong>。如果需要访问文件内容本身，则需要使用<strong>输入</strong>/<strong>输出</strong>流。</li>
<li>在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象。但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。</li>
<li><strong>File对象</strong>可以作为<strong>参数</strong>传递给流的构造器</li>
</ul>
<h3 id="路径分隔符"><a href="#路径分隔符" class="headerlink" title="路径分隔符"></a>路径分隔符</h3><p>路径中的每级目录之间用一个路径分隔符隔开。</p>
<ul>
<li><strong>UNIX</strong>和<strong>URL</strong>使用<code>/</code>来表示</li>
</ul>
<p>File类提供了一个常量：<strong>public static final String separator</strong>。可根据操作系统，动态的提供分隔符</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">"d:\\xxxx\\info.txt"</span>);<span class="comment">// windows和DOS系统中用 \\,用了两个 \ 是因为要转义</span></span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">"d:"</span> + File.separator + <span class="string">"xxxx"</span> + File.separator + <span class="string">"info.txt"</span>);</span><br><span class="line">File file3 = <span class="keyword">new</span> File(<span class="string">"d:/xxxx"</span>);<span class="comment">// UNIX和URL使用 /</span></span><br></pre></td></tr></table></figure>

<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="FIle的构造方法"><a href="#FIle的构造方法" class="headerlink" title="FIle的构造方法"></a>FIle的构造方法</h4><ul>
<li><strong>public File(String pathnam)</strong>：以pathname为路径创建File对象，可以是<strong>绝对路径</strong>或者<strong>相对路径</strong>，如果pathname是<strong>相对路径</strong>，则默认的当前路径在系统属性<code>user.dir</code>中存储。<ul>
<li>绝对路径：是一个固定的路径,从盘符开始</li>
<li>相对路径：是相对于某个位置开始</li>
</ul>
</li>
<li><strong>public File(String parent,String child)</strong>：以parent为<strong>父路径</strong>，child为<strong>子路径</strong>创建File对象。</li>
<li><strong>public File(File parent,String child)</strong>：根据一个<strong>父File对象</strong>和<strong>子文件路径</strong>创建File对象</li>
</ul>
<h4 id="File的获取方法"><a href="#File的获取方法" class="headerlink" title="File的获取方法"></a>File的获取方法</h4><ul>
<li><strong>public String getAbsolutePath()</strong>：获取绝对路径</li>
<li><strong>public String getPath()</strong> ：获取路径</li>
<li><strong>public String getName()</strong>：获取名称</li>
<li><strong>public String getParent()</strong>：获取上层文件目录路径。若无，返回null</li>
<li><strong>public long length()</strong>：获取文件长度（即：字节数）。不能获取目录的长度。</li>
<li><strong>public long lastModified()</strong>：获取最后一次的修改时间，毫秒值</li>
<li><strong>public String[] list()</strong>：获取指定目录下的所有文件或者文件目录的名称数组</li>
<li><strong>public File[] listFiles()</strong>：获取指定目录下的所有文件或者文件目录的File数组</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"D:\\213.txt"</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"D:\\"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. file1.getAbsoluteFile(),获取当前文件的绝对路径,返回一个File类型</span></span><br><span class="line">        File absoluteFile = file1.getAbsoluteFile();</span><br><span class="line">        System.out.println(absoluteFile);<span class="comment">// D:\213.txt</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. getAbsolutePath(),获取文件的绝对路径,返回值类型：String</span></span><br><span class="line">        String absolutePath = file1.getAbsolutePath();</span><br><span class="line">        System.out.println(absolutePath);<span class="comment">// D:\213.txt</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. getName(),获取文件或文件夹的名称</span></span><br><span class="line">        String name = file1.getName();</span><br><span class="line">        System.out.println(name);<span class="comment">// 213.txt</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. getPath(),获取其相对路径</span></span><br><span class="line">        String path = file1.getPath();</span><br><span class="line">        System.out.println(path);<span class="comment">// D:\213.txt</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. getParentFile(),获取父路径</span></span><br><span class="line">        File parentFile = file1.getParentFile();</span><br><span class="line">        System.out.println(parentFile);<span class="comment">// D:\</span></span><br><span class="line">        System.out.println(parentFile.equals(file2));<span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. getParent(),获取父路径名的字符串</span></span><br><span class="line">        String parent = file1.getParent();</span><br><span class="line">        System.out.println(parent);<span class="comment">// D:\       </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="File的判断方法"><a href="#File的判断方法" class="headerlink" title="File的判断方法"></a>File的判断方法</h4><ul>
<li><strong>public boolean isDirectory()</strong>：判断是否是文件目录</li>
<li><strong>public boolean isFile()</strong>：判断是否是文件</li>
<li><strong>public boolean exists()</strong>：判断是否存在</li>
<li><strong>public boolean canRead()</strong>：判断是否可读</li>
<li><strong>public boolean canWrite()</strong> ：判断是否可写</li>
<li><strong>public boolean isHidden()</strong> ：判断是否隐藏</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\213.txt"</span>);</span><br><span class="line">        <span class="comment">// 1. isDirectory(),判断该目录是否存在</span></span><br><span class="line">        <span class="keyword">boolean</span> directory = file.isDirectory();</span><br><span class="line">        System.out.println(directory);<span class="comment">// false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. isFile(),判断是否为文件</span></span><br><span class="line">        <span class="keyword">boolean</span> file2 = file.isFile();</span><br><span class="line">        System.out.println(file2);<span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. isHidden(),判断文件是否隐藏</span></span><br><span class="line">        <span class="keyword">boolean</span> hidden = file.isHidden();</span><br><span class="line">        System.out.println(hidden);<span class="comment">// false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. canRead(),判断文件是否可读</span></span><br><span class="line">        <span class="keyword">boolean</span> canRead = file.canRead();</span><br><span class="line">        System.out.println(canRead);<span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. canExecute(),判断是否可执行</span></span><br><span class="line">        <span class="keyword">boolean</span> canExecute = file.canExecute();</span><br><span class="line">        System.out.println(canExecute);<span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. canWrite(),判断是否可写</span></span><br><span class="line">        <span class="keyword">boolean</span> canWrite = file.canWrite();</span><br><span class="line">        System.out.println(canWrite);<span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="File的创建方法"><a href="#File的创建方法" class="headerlink" title="File的创建方法"></a>File的创建方法</h4><ul>
<li><strong>public boolean createNewFile()</strong>：创建文件。若文件存在，则不创建，返回false。</li>
<li><strong>public boolean mkdir()</strong>：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</li>
<li><strong>public boolean mkdirs()</strong>：创建文件目录。如果上层文件目录不存在，一并创建。</li>
</ul>
<p>注：如果创建文件或者文件目录没有写盘符路径，那么，默认在<strong>项目路径</strong>下</p>
<h4 id="File的其他方法"><a href="#File的其他方法" class="headerlink" title="File的其他方法"></a>File的其他方法</h4><ul>
<li><strong>public boolean renameTo(File dest)</strong>：把文件重命名为指定的文件路径</li>
<li><strong>public boolean delete()</strong>：删除文件或者文件夹。Java 中的删除不走回收站，且该文件目录内<strong>不能包含文件或者文件目录</strong>。</li>
<li><strong>public long length()</strong>：获取文件的大小或文件夹的隐藏属性</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\123.txt"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> createNewFile = file.createNewFile();</span><br><span class="line">              </span><br><span class="line">        <span class="comment">// 1. length(),获取文件的大小或文件夹的隐藏属性</span></span><br><span class="line">        <span class="keyword">long</span> length = file.length();</span><br><span class="line">        System.out.println(length);</span><br><span class="line"> </span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"E:\\123.txt"</span>);</span><br><span class="line">        <span class="comment">// 2. renameTo(),要想返回true，需file存在，fiel3不存在</span></span><br><span class="line">        <span class="comment">// 可以移动已存在的文件</span></span><br><span class="line">        file.renameTo(file3); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. delete(),删除文件或文件夹，但只能删除空文件夹，且不会进回收站</span></span><br><span class="line">        <span class="keyword">boolean</span> delete = file.delete();</span><br><span class="line">        System.out.println(delete);<span class="comment">// true       </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IO流原理简述"><a href="#IO流原理简述" class="headerlink" title="IO流原理简述"></a>IO流原理简述</h2><ul>
<li>I/O是<strong>Input</strong>/<strong>Output</strong>的缩写，用于处理设备之间的数据传输。如<strong>读/写文件</strong>，<strong>网络通讯</strong>等。</li>
<li>Java程序中，对于数据的<strong>输入</strong>/<strong>输出</strong>操作以“<strong>流(stream)</strong>” 的方式进行。</li>
<li><strong>java.io</strong>包下提供了各种“<strong>流</strong>”类和接口，用以获取不同种类的数据，并通过标准的方法<strong>输入</strong>或<strong>输出</strong>数据。</li>
</ul>
<p><strong>输入input</strong>：<strong>读取</strong>外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。</p>
<p><strong>输出output</strong>：将程序（内存）数据<strong>写入</strong>到磁盘、光盘等存储设备中。</p>
<p>注：程序中打开的文件 IO 资源<strong>不属于内存里的资源</strong>，<strong>垃圾回收机制无法回收该资源</strong>，所以应该<strong>显式关闭文件 IO 资源</strong>。</p>
<h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><ul>
<li><p>按操作<strong>数据单位不同</strong>分为：<strong>字节流</strong>(8 bit)，<strong>字符流</strong>(16 bit)</p>
</li>
<li><p>按数据流的<strong>流向不同</strong>分为：<strong>输入流</strong>，<strong>输出流</strong></p>
</li>
<li><p>按流的<strong>角色不同</strong>分为：<strong>节点流</strong>，<strong>处理流</strong></p>
<ul>
<li><strong>节点流</strong>：直接从数据源或目的地读写数据</li>
</ul>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-IO%E6%B5%81/%E8%8A%82%E7%82%B9%E6%B5%81.png" alt="节点流图示"></p>
<ul>
<li><strong>处理流</strong>：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</li>
</ul>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-IO%E6%B5%81/%E5%A4%84%E7%90%86%E6%B5%81.png" alt="节点流图示"></p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">(抽象基类)</th>
<th align="center">字节流</th>
<th align="center">字符流</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>输入流</strong></td>
<td align="center"><strong>InputStream</strong></td>
<td align="center"><strong>Reader</strong></td>
</tr>
<tr>
<td align="center"><strong>输出流</strong></td>
<td align="center"><strong>OutputStream</strong></td>
<td align="center"><strong>Writer</strong></td>
</tr>
</tbody></table>
<p>Java的<strong>IO流</strong>共涉及40多个类，实际上非常规则，都是从<strong>以上4个抽象基类派生</strong>的。由这四个类派生出来的子类名称都是<strong>以其父类名作为子类名后缀</strong>。</p>
<p>IO流体系图</p>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-IO%E6%B5%81/IO%E6%B5%81%E4%BD%93%E7%B3%BB%E5%9B%BE.png" alt="IO流体系图"></p>
<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h3><p><strong>Reader</strong>,所有字符输入流的基类。它的典型实现是<strong>FileReader</strong>，用来读取字符流。</p>
<h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li><strong>public int read()</strong>：读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个<br>字节的Unicode码），如果已到达流的末尾，则返回 -1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderWriterTest</span> </span>&#123;  </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 实例化File类对象 </span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            <span class="comment">// 2. 提供具体的流</span></span><br><span class="line">            fileReader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//方式一 read()返回的是读取到内容对应的ASCII码</span></span><br><span class="line">            <span class="keyword">int</span> data = fileReader.read();</span><br><span class="line">            <span class="keyword">while</span> (data != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>)data);</span><br><span class="line">                data = fileReader.read();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 方式二</span></span><br><span class="line">            <span class="keyword">int</span> data1;</span><br><span class="line">            <span class="keyword">while</span> ((data1 = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)data1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 流的关闭操作,手动操作</span></span><br><span class="line">            	<span class="keyword">if</span> (fr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                	fr.close();</span><br><span class="line">            	&#125;</span><br><span class="line">        	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            	e.printStackTrace();</span><br><span class="line">        	&#125;   </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>public int read(char[] cbuf)</strong>：将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderWriterTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. File类的实例化</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            <span class="comment">// 2. FileReader流的实例化</span></span><br><span class="line">            fileReader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 读入的操作</span></span><br><span class="line">            <span class="comment">// read(char[] cbuf):每次返回读入字符的个数或者-1，读取的内容保存在数组中</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fileReader.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 错误的写法一</span></span><br><span class="line">				<span class="comment">// for (int i = 0;i &lt; cbuf.length;i ++) &#123;</span></span><br><span class="line">				<span class="comment">//System.out.println(cbuf[i]);</span></span><br><span class="line">				<span class="comment">//&#125;</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 正确的写法一</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i ++) &#123;</span><br><span class="line">                    System.out.print(cbuf[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 错误写法二</span></span><br><span class="line">				<span class="comment">// String str = new String(cbuf);</span></span><br><span class="line">				<span class="comment">// System.out.println(str);</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 正确写法二</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 4. 资源的关闭</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>public int read(char[] cbuf,int off,int len)</strong>：将字符读入数组的某一部分。存到数组cbuf中，从off处开始存储，最多读len个字符。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。</li>
<li><strong>public void close() throws IOException</strong>：关闭此输入流并释放与该流关联的所有系统资源</li>
</ul>
<h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3><p><strong>Writer</strong>，所有字符输出流的基类。因为直接以字符作为操作单位，所以 Writer 可以用<strong>字符串来替换字符数组。</strong></p>
<h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li><strong>public void write(int c)</strong>：写入单个字符。要写入的字符包含在给定整数值的 16 个低位中，16 高位被忽略。 即写入0 到 65535 之间的Unicode码。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.提供File类的对象，指明写出的文件</span></span><br><span class="line">            File file1 = <span class="keyword">new</span> File(<span class="string">"hello1.txt"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2. 提供 FileWriter的对象，用于数据的写出,对应的文件如不存在会自动创建;</span></span><br><span class="line">            fileWriter = <span class="keyword">new</span> FileWriter(file1);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 写出的操作</span></span><br><span class="line">            <span class="comment">// write(file,true): 在原有文件上追加内容;</span></span><br><span class="line">            <span class="comment">// write(file,false) 或 write(file):会重写原有文件</span></span><br><span class="line">            fileWriter.write(<span class="string">"I have a dream!\n"</span>);</span><br><span class="line">            fileWriter.write(<span class="string">"You need have a dream!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// 4. 流资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span> (fileWriter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileWriter.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>public void write(char[] cbuf)</strong>：写入字符数组。</li>
<li><strong>public void write(char[] cbuf,int off,int len)</strong>：写入字符数组的某一部分。从off开始，写入len个字符</li>
<li><strong>public void write(String str)</strong>：写入字符串。</li>
<li><strong>public void write(String str,int off,int len)</strong>：写入字符串的某一部分。</li>
<li><strong>public void flush()</strong>：刷新该流的缓冲，则立即将它们写入预期目标。</li>
<li><strong>public void close() throws IOException</strong>：关闭此输出流并释放与该流关联的所有系统资源。</li>
</ul>
<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><p><strong>InputStream</strong>是所有输入流的基类。它的典型实现是<strong>FileInputStream</strong>。<strong>FileInputStream</strong> 从文件系统中的某个文件中获得输入字节。<strong>FileInputStream</strong>用于<strong>读取非文本数据</strong>之类的原始字节流。</p>
<h4 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li><strong>public int read()</strong>：从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。</li>
<li><strong>public int read(byte[] b)</strong>：从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。如果因为已<br>经到达流末尾而没有可用的字节，则返回值 -1。否则以整数形式返回实际读取的字节数。</li>
<li><strong>public int read(byte[] b, int off,int len)</strong>：将输入流中最多 len 个数据字节读入 byte 数组。尝试读取 len 个字节，但读取的字节也可能小于该值。以整数形式返回实际读取的字节数。如果因为流位于文件末尾而没有可用的字节，则返回值 -1。</li>
<li><strong>public void close() throws IOException</strong>：关闭此输入流并释放与该流关联的所有系统资源。</li>
</ul>
<h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h3><p><strong>OutputStream</strong>，所有字节输出流的基类。<strong>FileOutputStream</strong> 从文件系统中的某个文件中获得输出字节。<strong>FileOutputStream</strong> 用于<strong>写出非文本数据</strong>之类的原始字节流。</p>
<h4 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li><strong>public void write(byte[] b)</strong>：将 b.length 个字节从指定的 byte 数组写入此输出流。write(b) 的常规协定是：应该与调用 write(b, 0, b.length) 的效果完全相同。</li>
<li><strong>public void write(byte[] b,int off,int len)</strong>：将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。</li>
<li><strong>public void flush()throws IOException</strong>：刷新此输出流并强制写出所有缓冲的输出字节，调用此方法指示应将这些字节立即写入它们预期的目标。</li>
<li><strong>public void close() throws IOException</strong>：关闭此输出流并释放与该流关联的所有系统资源。</li>
</ul>
<h2 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h2><h3 id="处理流之一-缓冲流"><a href="#处理流之一-缓冲流" class="headerlink" title="处理流之一 缓冲流"></a>处理流之一 缓冲流</h3><ul>
<li>为了<strong>提高数据读写的速度</strong>，Java API提供的带缓冲功能的流类，在使用这些流类时，会创建一个<strong>内部缓冲区数组</strong>，缺省使用<strong>8192个字节(8Kb)</strong>的缓冲区。</li>
<li>缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：<ul>
<li><strong>BufferedInputStream</strong> 和 <strong>BufferedOutputStream</strong></li>
<li><strong>BufferedReader</strong> 和 <strong>BufferedWriter</strong></li>
</ul>
</li>
<li>使用<strong>BufferedInputStream</strong>读取字节文件时，<strong>BufferedInputStream</strong>会一次性从文件中读取8192个(8Kb)，存在缓冲区中，直到缓冲区装满了，才重新从文件中读取下一个8192个字节数组。</li>
<li>向流中写入字节时，不会直接写到文件，先<strong>写到缓冲区中直到缓冲区写满</strong>，才会把缓冲区中的数据一次性写到文件里。</li>
<li>关闭流的顺序和打开流的顺序相反。只要关闭最外层流即可，<strong>关闭最外层流也会相应关闭内层节点流</strong>。</li>
<li><code>flush()</code>方法可以强制将输入流的缓冲区的内容全部写入到文件中。</li>
</ul>
<h4 id="字符缓冲流示例"><a href="#字符缓冲流示例" class="headerlink" title="字符缓冲流示例"></a>字符缓冲流示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"D:"</span> + File.separator + <span class="string">"ttt.txt"</span>));</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"E:"</span> + File.separator + <span class="string">"ttt.txt"</span>));</span><br><span class="line">        </span><br><span class="line">          <span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//        char[] ch = new char[1024];</span></span><br><span class="line"><span class="comment">//        int len;</span></span><br><span class="line"><span class="comment">//        while ((len = br.read(ch)) != -1) &#123;</span></span><br><span class="line"><span class="comment">//            bw.write(ch,0,len);</span></span><br><span class="line"><span class="comment">//            bw.flush();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        </span></span><br><span class="line"><span class="comment">//        br.close();</span></span><br><span class="line"><span class="comment">//        bw.close();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 方式二 使用String和readLine()</span></span><br><span class="line">        <span class="comment">// readLine() 读到末尾返回null,readLine读取不了\n和\r</span></span><br><span class="line">        String data;</span><br><span class="line">        <span class="keyword">while</span> ((data = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(data + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bw.flush();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字节缓冲流示例"><a href="#字节缓冲流示例" class="headerlink" title="字节缓冲流示例"></a>字节缓冲流示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test0002</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//  1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\JAVASM\\Downloads\\YNote.exe"</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">"E:\\Y.exe"</span>);</span><br><span class="line">            <span class="comment">// 2.造流</span></span><br><span class="line">            <span class="comment">// 2.1造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">// 2.2造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3.复制细节：读取，写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 4.资源关闭</span></span><br><span class="line">            <span class="comment">// 先关闭外层的流，再关闭内层的流。注：关闭外层流的同时，内层流会自动关闭     </span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理流之二-转换流"><a href="#处理流之二-转换流" class="headerlink" title="处理流之二 转换流"></a>处理流之二 转换流</h3><ul>
<li>转换流用于转换字节流和字符流</li>
<li>常用来处理文件乱码问题，实现编码和解码的功能</li>
<li>Java API提供了两个转换流：<ul>
<li><strong>InputStreamReader</strong>：将InputStream转换为Reader，字节、字节数组 –&gt; 字符数组、字符串(解码)<ul>
<li>实现将字节的输入流按指定字符集转换为字符的输入流。<strong>需要和InputStream“套接</strong></li>
</ul>
</li>
<li><strong>OutputStreamWriter</strong>：将Writer转换为OutputStream，字符数组、字符串 –&gt; 字节、字节数组(编码)<ul>
<li>实现将字符的输出流按指定字符集转换为字节的输出流。<strong>需要和OutputStream“套接”。</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// InputStreamReader:字节、字节数组 --&gt; 字符数组、字符串(解码)</span></span><br><span class="line"><span class="comment">// OutputStreamWriter：字符数组、字符串 --&gt; 字节、字节数组(编码)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderAndOutputStreamWriter</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">       OutputStreamWriter osw = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>);</span><br><span class="line">           FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"test_gbk.txt"</span>);</span><br><span class="line">           </span><br><span class="line">           isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">"gbk"</span>);</span><br><span class="line">           osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">"utf-8"</span>);</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">           <span class="keyword">int</span> len;</span><br><span class="line">           <span class="keyword">while</span> ((len = isr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">               osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (isr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   isr.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (osw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   osw.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;        </span><br><span class="line">       &#125;     </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理流之三-标准输入、输出流"><a href="#处理流之三-标准输入、输出流" class="headerlink" title="处理流之三 标准输入、输出流"></a>处理流之三 标准输入、输出流</h3><ul>
<li><strong>System.in</strong>和<strong>System.out</strong>分别代表了系统标准的输入和输出设备</li>
<li>默认输入设备是：键盘，输出设备是：显示器</li>
<li>System.in的类型是<strong>InputStream</strong></li>
<li>System.out的类型，是OutputStream的子类FilterOutputStream 的子类<strong>PrintStream</strong></li>
<li>重定向：通过System类的setIn，setOut方法对默认设备进行改变。<ul>
<li><strong>public static void setIn(InputStream in)</strong></li>
<li><strong>public static void setOut(PrintStream out)</strong></li>
</ul>
</li>
</ul>
<h3 id="处理流之四-打印流"><a href="#处理流之四-打印流" class="headerlink" title="处理流之四 打印流"></a>处理流之四 打印流</h3><p>打印流，<strong>PrintStream</strong>和<strong>PrintWriter</strong>。可将基本数据类型的数据格式转化为字符串输出。</p>
<ul>
<li>提供了一系列重载的print()和println()方法，用于多种数据类型的输出</li>
<li><strong>PrintStream</strong>和<strong>PrintWriter</strong>的输出不会抛出IOException异常</li>
<li><strong>PrintStream</strong>和<strong>PrintWriter</strong>有自动flush功能</li>
<li><strong>PrintStream</strong> 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用 <strong>PrintWriter</strong> 类</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"D:\\IO\\text.txt"</span>));</span><br><span class="line">    <span class="comment">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 '\n' 时都会刷新输出缓冲区)</span></span><br><span class="line">    ps = <span class="keyword">new</span> PrintStream(fos, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;<span class="comment">// 把标准输出流(控制台输出)改成文件</span></span><br><span class="line">        System.setOut(ps);</span><br><span class="line">    &#125;	</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i++) &#123; <span class="comment">// 输出ASCII字符</span></span><br><span class="line">        System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">50</span> == <span class="number">0</span>) &#123; <span class="comment">// 每50个数据一行</span></span><br><span class="line">            System.out.println(); <span class="comment">// 换行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="处理流之五-数据流"><a href="#处理流之五-数据流" class="headerlink" title="处理流之五 数据流"></a>处理流之五 数据流</h3><p>数据流，<strong>DataInputStream</strong> 和 <strong>DataOutputStream</strong>。为了方便地操作Java语言的基本数据类型和String的数据，可以使用数据流。</p>
<p>DataInputStream “套接”在 <strong>InputStream</strong>子类的流上。DataOutputStream“套接”在<strong>OutputStream</strong> 子类的流上。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123; <span class="comment">// 创建连接到指定文件的数据输出流对象</span></span><br><span class="line">    dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"destData.dat"</span>));</span><br><span class="line">    dos.writeUTF(<span class="string">"我爱北京天安门"</span>); <span class="comment">// 写UTF字符串</span></span><br><span class="line">    dos.writeBoolean(<span class="keyword">false</span>); <span class="comment">// 写入布尔值</span></span><br><span class="line">    dos.writeLong(<span class="number">1234567890L</span>); <span class="comment">// 写入长整数</span></span><br><span class="line">    System.out.println(<span class="string">"写文件成功!"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123; <span class="comment">// 关闭流对象</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dos != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 关闭过滤流时,会自动关闭它包装的底层节点流</span></span><br><span class="line">            dos.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"destData.dat"</span>));</span><br><span class="line">    String info = dis.readUTF();</span><br><span class="line">    <span class="keyword">boolean</span> flag = dis.readBoolean();</span><br><span class="line">    <span class="keyword">long</span> time = dis.readLong();</span><br><span class="line">    System.out.println(info);</span><br><span class="line">    System.out.println(flag);</span><br><span class="line">    System.out.println(time);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (dis != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理流之六-对象流"><a href="#处理流之六-对象流" class="headerlink" title="处理流之六 对象流"></a>处理流之六 对象流</h3><p>对象流，<strong>ObjectInputStream</strong>和<strong>OjbectOutputSteam</strong>。可用于存储和读取基本数据类型数据或对象的处理流。可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p>
<h4 id="对象的序列化"><a href="#对象的序列化" class="headerlink" title="对象的序列化"></a>对象的序列化</h4><ul>
<li><strong>序列化</strong>：用<strong>ObjectOutputStream</strong>类保存基本类型数据或对象的机制</li>
<li><strong>反序列化</strong>：用<strong>ObjectInputStream</strong>类读取基本类型数据或对象的机制</li>
</ul>
<ul>
<li>对象序列化机制允许把<strong>内存中的Java对象转换成平台无关的二进制流</strong>，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。</li>
<li>序列化的好处在于可将任何实现了Serializable接口的对象转化为字节数据，使其在保存和传输时可被还原。</li>
<li>凡是实现Serializable接口的类都有一个<strong>表示序列化版本标识符的静态变量</strong>：<code>private static final long serialVersionUID;</code><ul>
<li><code>serialVersionUID</code>用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象进行版本控制，有关各版本反序列化时是否兼容。</li>
<li>如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议，显式声明。</li>
</ul>
</li>
</ul>
<h5 id="自定义类序列化的要求"><a href="#自定义类序列化的要求" class="headerlink" title="自定义类序列化的要求"></a>自定义类序列化的要求</h5><ol>
<li>必须实现Serializable接口或Externalizable接口<ul>
<li>Externalizable接口继承自 Serializable接口，<strong>仅实现Serializable接口的类采用默认的序列化方式</strong> ，而实现Externalizable接口的类完全由自身来控制序列化的行为。</li>
</ul>
</li>
<li>提供全局常量：private static final long serialVersionUID</li>
<li>保证当前类的内部属性可序列化（默认情况下，基本数据类型可序列化）</li>
</ol>
<p>注：ObjectOutputStream和ObjectInputStream不能序列化<strong>static</strong>和<strong>transient</strong>修饰的成员变量</p>
<h4 id="序列化示例"><a href="#序列化示例" class="headerlink" title="序列化示例"></a>序列化示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(“data.txt<span class="string">"));</span></span><br><span class="line"><span class="string">Person p = new Person("</span>韩梅梅<span class="string">", 18, "</span>中华大街<span class="string">", new Pet());</span></span><br><span class="line"><span class="string">oos.writeObject(p);</span></span><br><span class="line"><span class="string">oos.flush();</span></span><br><span class="line"><span class="string">oos.close();</span></span><br></pre></td></tr></table></figure>

<h4 id="反序列化示例"><a href="#反序列化示例" class="headerlink" title="反序列化示例"></a>反序列化示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(“data.txt<span class="string">"));</span></span><br><span class="line"><span class="string">Person p1 = (Person)ois.readObject();</span></span><br><span class="line"><span class="string">System.out.println(p1.toString());</span></span><br><span class="line"><span class="string">ois.close();</span></span><br></pre></td></tr></table></figure>

<p>未完待续……</p>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>IO流</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-JVM之运行时数据区一</title>
    <url>/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/</url>
    <content><![CDATA[<p>PC计数器、虚拟机栈、本地方法栈的简单了解，本笔记来自宋红康JVM课件，掘金上别人的<a href="https://juejin.im/post/5e71d675f265da5711264f46" target="_blank" rel="noopener">笔记</a>，<a href="https://www.wjhandzhy.top/2020/03/26/jvm%e7%ac%94%e8%ae%b0%ef%bc%88%e4%ba%94%ef%bc%89/" target="_blank" rel="noopener">阿月的记事本</a></p>
<a id="more"></a>

<h1 id="运行时数据区一"><a href="#运行时数据区一" class="headerlink" title="运行时数据区一"></a>运行时数据区一</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>内存是硬盘和cpu的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。<br>JVM内存布局规定了JAVA在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。<strong>不同的jvm对于内存的划分方式和管理机制存在着部分差异</strong>（对于Hotspot主要指方法区）</p>
<p>运行时数据区图示</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9B%BE%E7%A4%BA.png" alt="运行时数据区图示"></p>
<p>JDK8的<strong>元数据区</strong>+<strong>JIT编译产物</strong> 就是JDK8以前的方法区</p>
<h2 id="分区介绍"><a href="#分区介绍" class="headerlink" title="分区介绍"></a>分区介绍</h2><p>Java虚拟机定了了若干种程序运行期间会使用到的运行时数据区。<br>其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。</p>
<p>如图，<strong>灰色的区域为单独线程私有的</strong>，<strong>红色的为多个线程共享的</strong>，即</p>
<ul>
<li>每个线程：独立包括程序计数器、栈、本地栈</li>
<li>线程间共享：堆、堆外内存（方法区、永久代或元空间、代码缓存）</li>
</ul>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%88%86%E5%8C%BA%E4%BB%8B%E7%BB%8D.png" alt="运行时数据区分区介绍"></p>
<p><strong>一般来说，jvm优化95%是优化堆区，5%优化的是方法区</strong></p>
<h2 id="线程的简单回顾"><a href="#线程的简单回顾" class="headerlink" title="线程的简单回顾"></a>线程的简单回顾</h2><ul>
<li>线程是一个程序里的运行单元，JVM允许一个程序有多个线程并行的执行</li>
<li>在HotSpot JVM，每个线程都与操作系统的本地线程直接映射。<ul>
<li>当一个java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。</li>
<li>java线程执行终止后。本地线程也会回收。</li>
</ul>
</li>
<li>操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用java线程中的run()方法.</li>
</ul>
<h3 id="JVM系统线程"><a href="#JVM系统线程" class="headerlink" title="JVM系统线程"></a>JVM系统线程</h3><ul>
<li>如果你使用<strong>jconsole</strong>或者任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用main方法的main线程以及所有这个main线程自己创建的线程；</li>
<li>这些主要的后台系统线程在HotSpot JVM里主要是以下几个：<ul>
<li><strong>虚拟机线程</strong>：这种线程的操作时需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行包括“stop-the-world”的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销</li>
<li><strong>周期任务线程</strong>：这种线程是时间周期事件的提现（比如中断），他们一般用于周期性操作的调度执行。</li>
<li><strong>GC线程</strong>：这种线程对于JVM里不同种类的垃圾收集行为提供了支持</li>
<li><strong>编译线程</strong>：这种线程在运行时会将字节码编译成本地代码</li>
<li><strong>信号调度线程</strong>：这种线程接收信号并发送给JVM,在它内部通过调用适当的方法进行处理。</li>
</ul>
</li>
</ul>
<h2 id="程序计数器-PC寄存器"><a href="#程序计数器-PC寄存器" class="headerlink" title="程序计数器(PC寄存器)"></a>程序计数器(PC寄存器)</h2><p>JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。<strong>PC寄存器用来储存指向下一条指令的地址</strong>，也就是指向即将要执行的指令代码，<strong>由执行引擎读取下一条指令</strong>。</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8.png" alt="程序计数器"></p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域</li>
<li>在jvm规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致</li>
<li>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。程序计数器会存储当前线程正在执行的java方法的JVM指令地址；或者，如果是在执行native方法，则是未指定值（undefined）。</li>
<li>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</li>
<li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令</li>
<li>它是唯一一个在java虚拟机规范中没有规定任何OOM情况的区域</li>
<li>不会发生垃圾回收</li>
</ul>
<h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/PC%E5%AF%84%E5%AD%98%E5%99%A8%E7%AE%80%E5%8D%95%E5%B7%A5%E4%BD%9C%E7%A4%BA%E4%BE%8B.png" alt="PC寄存器简单工作示例.png"></p>
<h3 id="图示说明"><a href="#图示说明" class="headerlink" title="图示说明"></a>图示说明</h3><p>上图的PC寄存器保存指令地址，执行引擎去PC寄存器所代表的的5的位置取出对应的操作指令。执行引擎会操作局部变量表和栈结构实现数据的存取，也会将操作指令翻译成机器指令，由CPU进行运算。</p>
<p>简单来说，PC寄存器用来储存指向下一条指令的地址，即将要执行的指令代码，由执行引擎读取下一条指令。</p>
<p>问：<strong>使用PC寄存器存储字节码指令地址有什么用呢？/为什么使用PC寄存器记录当前线程的执行地址呢？</strong><br>答：<strong>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令</strong></p>
<p>问：<strong>PC寄存器为什么会设定为线程私有</strong></p>
<p>答：<strong>为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器</strong>，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</p>
<h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>由于跨平台性的设计，java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。<br><strong>优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</strong></p>
<h3 id="内存中的堆与栈"><a href="#内存中的堆与栈" class="headerlink" title="内存中的堆与栈"></a>内存中的堆与栈</h3><ul>
<li><strong>栈是运行时的单位，而堆是存储的单位</strong><br>即：栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。堆解决的是数据存储的问题，即数据怎么放、放在哪儿。</li>
<li>一般来讲，对象主要都是放在堆空间的，是运行时数据区比较大的一块</li>
<li><strong>栈空间存放基本数据类型的局部变量，以及引用数据类型的对象的引用</strong></li>
</ul>
<h3 id="虚拟机栈是什么"><a href="#虚拟机栈是什么" class="headerlink" title="虚拟机栈是什么"></a>虚拟机栈是什么</h3><ul>
<li>java虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。<strong>每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame）</strong>，对应这个一次次的java方法调用。它是<strong>线程私有</strong>的</li>
<li>生命周期和线程是一致的</li>
<li>作用：主管java程序的运行，它保存方法的局部变量（8种基本数据类型、对象的引用地址）、部分结果，并参与方法的调用和返回。<ul>
<li>局部变量：相对于成员变量（或属性）</li>
<li>基本数据变量： 相对于引用类型变量（类，数组，接口）</li>
</ul>
</li>
</ul>
<h3 id="栈的特点"><a href="#栈的特点" class="headerlink" title="栈的特点"></a>栈的特点</h3><ul>
<li>栈是一种快速有效的分配存储方式，访问速度仅次于PC寄存器（程序计数器）</li>
<li>JVM直接对java栈的操作只有两个<ul>
<li>每个方法执行，伴随着<strong>进栈</strong>（入栈，压栈）</li>
<li>执行结束后的<strong>出栈</strong>工作</li>
</ul>
</li>
<li><strong>对于栈来说不存在垃圾回收问题</strong>，但可能会发生OOM</li>
</ul>
<h3 id="栈中可能出现的异常"><a href="#栈中可能出现的异常" class="headerlink" title="栈中可能出现的异常"></a>栈中可能出现的异常</h3><p>java虚拟机规范允许<strong>Java栈的大小是动态的或者是固定不变的</strong></p>
<ul>
<li>如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过java虚拟机栈允许的最大容量，java虚拟机将会抛出一个 <strong>StackOverFlowError</strong>异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示栈中的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackErrorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果Java虚拟机栈可以动态拓展，并且在尝试拓展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那java虚拟机将会抛出一个 <strong>OutOfMemoryError</strong>异常</li>
</ul>
<h3 id="设置栈的内存大小"><a href="#设置栈的内存大小" class="headerlink" title="设置栈的内存大小"></a>设置栈的内存大小</h3><p>我们可以使用参数<code>-Xss</code>选项来设置线程的最大栈空间，<strong>栈的大小直接决定了函数调用的最大可达深度</strong>。（IDEA设置方法：<strong>Run-EditConfigurations-VM options 填入指定栈的大小</strong>，例<code>-Xss256k</code>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 演示栈中的异常</span><br><span class="line"> *</span><br><span class="line"> * 默认情况下：count 11403</span><br><span class="line"> * 设置栈的大小： -Xss256k count 2475</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StackErrorTest &#123;</span><br><span class="line">    private static int count &#x3D; 1;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        count++;</span><br><span class="line">        main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="栈的存储结构和运行原理"><a href="#栈的存储结构和运行原理" class="headerlink" title="栈的存储结构和运行原理"></a>栈的存储结构和运行原理</h3><ul>
<li>每个线程都有自己的栈，栈中的数据都是以<strong>栈帧(Stack Frame)</strong>的格式存在</li>
<li>在这个线程上正在执行的<strong>每个方法都对应各自的一个栈帧</strong></li>
<li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</li>
<li>JVM直接对java栈的操作只有两个，就是对栈帧的<strong>压栈</strong>和<strong>出栈</strong>，遵循<strong>先进后出/后进先出</strong>的原则</li>
<li>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为<strong>当前栈帧(Current Frame)</strong>,与当前栈帧对应的方法就是<strong>当前方法（Current Frame）</strong></li>
<li>执行引擎运行的所有字节码指令只针对当前栈帧进行操作</li>
<li>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前栈帧。</li>
<li>不同线程中所包含的栈帧是不允许相互引用的，即不可能在另一个栈帧中引用另外一个线程的栈帧</li>
<li>如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧</li>
<li>Java方法有两种返回函数的方式，<strong>一种是正常的函数返回，使用return指令；另外一种是抛出异常。不管使用哪种方式，都会导致栈帧被弹出。</strong></li>
</ul>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E6%A0%88%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="栈的存储结构"></p>
<h3 id="栈帧的内部结构"><a href="#栈帧的内部结构" class="headerlink" title="栈帧的内部结构"></a>栈帧的内部结构</h3><p>每个栈帧中存储着：</p>
<ul>
<li><strong>局部变量表</strong>（Local Variables）</li>
<li><strong>操作数栈</strong>（Operand Stack）(或表达式栈)</li>
<li>动态链接（Dynamic Linking）(或执行运行时常量池的方法引用)</li>
<li>方法返回地址（Return Adress）（或方法正常退出或者异常退出的定义）</li>
<li>一些附加信息</li>
</ul>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E6%A0%88%E6%A1%A2%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84.png" alt="栈帧的内部结构"></p>
<h3 id="局部变量表（Local-Variables）"><a href="#局部变量表（Local-Variables）" class="headerlink" title="局部变量表（Local Variables）"></a>局部变量表（Local Variables）</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul>
<li>局部变量表也被称之为<strong>局部变量数组</strong>或本地变量表</li>
<li><strong>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量</strong>。这些数据类型包括各类基本数据类型、对象引用（reference），以及returnAddress类型</li>
<li>由于<strong>局部变量表</strong>是建立在线程的栈上，<strong>是线程私有的数据</strong>，因此不存在数据安全问题</li>
<li><strong>局部变量表所需的容量大小是在编译期确定下来的</strong>,并保存在方法的Code属性的maximum local variables数据项中。在方法运行期间是不会改变局部变量表的大小的</li>
<li><strong>方法嵌套调用的次数由栈的大小决定。一般来说，栈越大，方法嵌套调用次数越多。</strong>对一个函数而言，他的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。</li>
<li><strong>局部变量表中的变量只在当前方法调用中有效。</strong>在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。<strong>当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。</strong></li>
</ul>
<p>利用javap命令对字节码文件进行解析查看局部变量表，如图：</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E5%88%86%E6%9E%90%E5%AD%97%E8%8A%82%E7%A0%81%E5%9B%BE%E7%89%87%E4%B8%80.png" alt="栈帧的内部结构"></p>
<p>“<code>[L</code>”中L表示引用类型，<code>[</code>表示数组，是对参数的解释</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E5%88%86%E6%9E%90%E5%AD%97%E8%8A%82%E7%A0%81%E5%9B%BE%E7%89%87%E4%BA%8C.png" alt="栈帧的内部结构"></p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E5%88%86%E6%9E%90%E5%AD%97%E8%8A%82%E7%A0%81%E5%9B%BE%E7%89%87%E4%B8%89.png" alt="栈帧的内部结构"></p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E5%88%86%E6%9E%90%E5%AD%97%E8%8A%82%E7%A0%81%E5%9B%BE%E7%89%87%E5%9B%9B.png" alt="栈帧的内部结构"></p>
<p><strong>Start PC</strong>和<strong>Length</strong>合起来可以表示变量的作用域范围</p>
<h4 id="Slot-变量槽"><a href="#Slot-变量槽" class="headerlink" title="Slot(变量槽)"></a>Slot(变量槽)</h4><p>Slot（变量槽）是<strong>局部变量表最基本的储存单元</strong>。</p>
<ul>
<li>局部变量表的参数值的存放总是从局部变量数组的<strong>index0开始</strong>，到数组长度-1的索引结束。</li>
<li>局部变量表中，<strong>32位以内的类型只占用一个Slot</strong>（包括returnAddress[引用]类型），64位的类型（long和double）占用两个Slot。<ul>
<li>byte、short、char、float在储存前被转换成int，boolean也被转换成int，0表示false，非0表示true。</li>
<li>long和double占用两个Slot。</li>
</ul>
</li>
<li>JVM会为局部变量表中的<strong>每一个Slot都分配一个访问索引</strong>（即为上图中的Index），通过这个索引即可成功访问到局部变量表中指定的局部变量值。</li>
<li>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会<strong>按照顺序被复制</strong>到局部变量表中的每一个Slot上。</li>
<li>需要访问局部变量表中一个64bit的局部变量值时，<strong>只需要使用前一个索引</strong>即可。如下图，访问long m使用索引1而非索引2。</li>
</ul>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E5%8F%98%E9%87%8F%E6%A7%BD%E5%8F%8A%E7%B4%A2%E5%BC%95.png" alt="变量槽及索引"></p>
<ul>
<li>如果当前帧是由构造方法或者实例方法（非静态）创建的，那么<strong>该对象引用this将会存放在index为0的Slot处</strong>，其余的参数按照参数顺序表继续排列。例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1_1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于test2方法里的count是实例变量，所以结果的LocalVariableTable内容如下图所示</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/this%E5%9C%A8%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%9B%BE%E4%B8%80.png" alt="变量槽及索引"></p>
<p>而且，就算代码中未调用count，this依然是会加入到局部变量表中的，如下图：</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/this%E5%9C%A8%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%9B%BE%E4%BA%8C.png" alt="变量槽及索引"></p>
<p>因此对于构造方法和实例方法，this变量需要放到局部变量表当中。而静态方法的局部变量表中没有this，因此在静态方法中调用this会报错。</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%AD%E8%B0%83%E7%94%A8this%E6%8A%A5%E9%94%99.png" alt="变量槽及索引"></p>
<ul>
<li><strong>栈帧中的局部变量表中的槽位是可以重用的</strong>，如果一个局部变量出了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而达到节省资源的目的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1_1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">            b = a + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> c = a + <span class="number">1</span>;</span><br><span class="line">	&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上测试代码中，局部变量表的长度为3。</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E5%8F%98%E9%87%8F%E6%A7%BD%E9%87%8D%E7%94%A8%E5%9B%BE%E7%89%87%E4%B8%80.png" alt="变量槽及索引"></p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E5%8F%98%E9%87%8F%E6%A7%BD%E9%87%8D%E7%94%A8%E5%9B%BE%E7%89%87%E4%BA%8C.png" alt="变量槽及索引"></p>
<p>观察局部变量表我们可以看到，虽然总共声明了4个变量，但是<strong>b过了其作用域后，它的slot被c复用了</strong>。</p>
<h4 id="对局部变量表的补充说明"><a href="#对局部变量表的补充说明" class="headerlink" title="对局部变量表的补充说明"></a>对局部变量表的补充说明</h4><p><strong>在栈帧中，与性能调优关系最为密切的部分就是局部变量表</strong>。在方法执行中，虚拟机使用局部变量表完成方法的传递。</p>
<p>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。</p>
<h3 id="操作数栈（Operand-Stack）"><a href="#操作数栈（Operand-Stack）" class="headerlink" title="操作数栈（Operand Stack）"></a>操作数栈（Operand Stack）</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><ul>
<li>操作数栈，<strong>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。</strong></li>
<li>操作数栈就是jvm执行引擎的一个工作区，当一个方法开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的</li>
<li>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译器就定义好了，保存在方法的code属性中，为max_stack的值。<ul>
<li>32bit的类型占用一个栈单位深度</li>
<li>64bit的类型占用两个栈单位深度</li>
</ul>
</li>
<li>操作数栈<strong>并非采用访问索引的方式来进行数据访问</strong>的，而是只能通过标准的入栈(push)和出栈(pop)操作来完成一次数据访问</li>
<li><strong>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，</strong>并更新PC寄存器中下一条需要执行的字节码指令。</li>
<li>操作数栈中的元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译期间进行验证，同时在类加载过程中的类验证阶段的数据流分析阶段要再次验证。</li>
<li>我们所说的Java虚拟机的<strong>解释引擎是基于栈的执行引擎</strong>,其中的栈指的就是操作数栈。</li>
</ul>
<h4 id="操作数栈的字节码指令简单分析"><a href="#操作数栈的字节码指令简单分析" class="headerlink" title="操作数栈的字节码指令简单分析"></a>操作数栈的字节码指令简单分析</h4><p>1、指令地址<strong>0</strong>对应操作指令<code>bipush</code>，执行引擎调用该指令将15压入操作数栈</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E6%A0%88%E5%B8%A7%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%80.png" alt="栈帧执行过程一.png"></p>
<p>2、指令地址<strong>2</strong>对应操作指令<code>istore_1</code>，执行引擎调用该指令将操作数栈顶的15出栈，并放到局部变量表中索引为<strong>1</strong>的变量槽(slot)中</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E6%A0%88%E5%B8%A7%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%BA%8C.png" alt="栈帧执行过程一.png"></p>
<p>3、指令地址<strong>3</strong>对应操作指令<code>bipush</code>，执行引擎调用该指令将8压入操作数栈</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E6%A0%88%E5%B8%A7%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%89.png" alt="栈帧执行过程一.png"></p>
<p>4、指令地址<strong>5</strong>对应操作指令<code>istore_2</code>，执行引擎调用该指令将操作数栈顶的8出栈，并放到局部变量表中索引为<strong>2</strong>的变量槽(slot)中</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E6%A0%88%E5%B8%A7%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%9B%9B.png" alt="栈帧执行过程一.png"></p>
<p>5、指令地址<strong>6</strong>对应操作指令<code>iload_1</code>，执行引擎调用该指令将局部变量表中索引为1的15拿出来，压入操作数栈</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E6%A0%88%E5%B8%A7%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%BA%94.png" alt="栈帧执行过程一.png"></p>
<p>6、指令地址<strong>7</strong>对应操作指令<code>iload_2</code>，执行引擎调用该指令将局部变量表中索引为2的8拿出来，压入操作数栈</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E6%A0%88%E5%B8%A7%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%85%AD.png" alt="栈帧执行过程一.png"></p>
<p>7、指令地址<strong>8</strong>对应操作指令<code>iadd</code>，将8和15出栈，执行引擎将该指令翻译成机器指令，并调用CPU运算出结果23，并压入操作数栈</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E6%A0%88%E5%B8%A7%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%83.png" alt="栈帧执行过程一.png"></p>
<p>8、指令地址<strong>9</strong>对应操作指令<code>istore_3</code>，执行引擎调用该指令将操作数栈顶的23出栈，并放到局部变量表中索引为<strong>3</strong>的变量槽(slot)中</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E6%A0%88%E5%B8%A7%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%85%AB.png" alt="栈帧执行过程一.png"></p>
<h4 id="栈顶缓存技术ToS（Top-of-Stack-Cashing）"><a href="#栈顶缓存技术ToS（Top-of-Stack-Cashing）" class="headerlink" title="栈顶缓存技术ToS（Top-of-Stack Cashing）"></a>栈顶缓存技术ToS（Top-of-Stack Cashing）</h4><ul>
<li>基于栈式架构的虚拟机所使用的<strong>零地址指令</strong>更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派（instruction dispatch）次数和内存读/写次数</li>
<li>由于操作数是存储在内存中的，因此频繁地执行内存读/写操作必然会影响执行速度。为了解决这个问题，HotSpot JVM的设计者们提出了栈顶缓存技术，<strong>将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读/写次数，提升执行引擎的执行效率</strong></li>
</ul>
<h3 id="动态链接（Dynamic-Linking）"><a href="#动态链接（Dynamic-Linking）" class="headerlink" title="动态链接（Dynamic Linking）"></a>动态链接（Dynamic Linking）</h3><p>动态链接，可简单理解为<strong>指向运行时常量池的方法的引用</strong></p>
<ul>
<li><strong>每一个栈帧内部都包含一个指向运行时常量池或该栈帧所属方法的引用</strong>。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接。比如invokedynamic指令</li>
<li>在Java源文件被编译成字节码文件中时，所有的变量和方法引用都作为符号引用（symbolic Refenrence）保存在class文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用。</strong></li>
</ul>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=83638407&bvid=BV1BJ41177cp&cid=143084938&page=55" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>

<h4 id="图示-1"><a href="#图示-1" class="headerlink" title="图示"></a>图示</h4><p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%9B%BE%E7%A4%BA.png" alt></p>
<h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a><strong>方法的调用</strong></h4><ul>
<li><strong>静态链接</strong><br>当一个 字节码文件被装载进JVM内部时，如果<strong>被调用的目标方法在编译期可知</strong>，且<strong>运行期保持不变</strong>时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。</li>
<li><strong>动态链接</strong><br>如果<strong>被调用的方法在编译期无法被确定下来</strong>，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备<strong>动态性</strong>，因此也就被称之为动态链接。</li>
</ul>
<p>对应的方法的绑定机制为：早起绑定（Early Binding）和晚期绑定（Late Bingding）。绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次。</p>
<p><strong>在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关</strong></p>
<ul>
<li><strong>早期绑定</strong><br>早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。</li>
<li><strong>晚期绑定</strong><br>如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也就被称之为晚期绑定。</li>
</ul>
<p>Java中任何一个普通的方法其实都具备<strong>虚函数</strong>的特征，它们相当于C++语言中的虚函数（C++中则需要使用关键字<code>virtual</code>来显式定义）。如果在Java程序中不希望某个方法拥有虚函数的特征时，则可以使用关键字<code>final</code>来标记这个方法。</p>
<h4 id="虚方法和非虚方法"><a href="#虚方法和非虚方法" class="headerlink" title="虚方法和非虚方法"></a>虚方法和非虚方法</h4><h5 id="非虚方法"><a href="#非虚方法" class="headerlink" title="非虚方法"></a>非虚方法</h5><ul>
<li>如果方法在编译期间就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为非虚方法</li>
<li><strong>静态方法、私有方法、final方法、实例构造器、父类方法都是非虚方法</strong></li>
<li>其他方法称为虚方法</li>
</ul>
<h5 id="虚拟机中的下几条方法调用指令"><a href="#虚拟机中的下几条方法调用指令" class="headerlink" title="虚拟机中的下几条方法调用指令"></a>虚拟机中的下几条方法调用指令</h5><h6 id="普通调用指令"><a href="#普通调用指令" class="headerlink" title="普通调用指令"></a>普通调用指令</h6><ol>
<li><strong>invokestatic</strong>：调用静态方法，解析阶段确定唯一方法版本</li>
<li><strong>invokespecial</strong>：调用方法、私有及父类方法，解析阶段确定唯一方法版本</li>
<li><strong>invokevirtual</strong>：调用所有虚方法，final修饰的方法除外</li>
<li><strong>invokeinterface</strong>：调用接口方法</li>
</ol>
<h6 id="动态调用指令"><a href="#动态调用指令" class="headerlink" title="动态调用指令"></a>动态调用指令</h6><ol start="5">
<li><strong>invokedynamic</strong>：动态解析出需要调用的方法，然后执行 </li>
</ol>
<p>前四条指令固化在虚拟机内部，方法的调用执行不可人为干预，而invokedynamic指令则支持由用户确定方法版本。其中<strong>invokestatic指令和invokespecial指令调用的方法称为非虚方法，其余的（final修饰的除外）称为虚方法。</strong></p>
<h6 id="invokedynamic指令"><a href="#invokedynamic指令" class="headerlink" title="invokedynamic指令"></a>invokedynamic指令</h6><ul>
<li>JVM字节码指令集一直比较稳定，一直到java7才增加了一个<strong>invokedynamic</strong>指令，这是<strong>Java为了实现【动态类型语言】支持而做的一种改进</strong></li>
<li>但是java7中并没有提供直接生成invokedynamic指令的方法，需要借助ASM这种底层字节码工具来产生invokedynamic指令.<strong>直到Java8的Lambda表达式的出现，invokedynamic指令的生成，在java中才有了直接生成方式</strong></li>
<li>Java7中增加的动态语言类型支持的本质是对java虚拟机规范的修改，而不是对java语言规则的修改，这一块相对来讲比较复杂，增加了虚拟机中的方法调用，最直接的受益者就是运行在java平台的动态语言的编译器</li>
</ul>
<h5 id="动态类型语言和静态类型语言"><a href="#动态类型语言和静态类型语言" class="headerlink" title="动态类型语言和静态类型语言"></a>动态类型语言和静态类型语言</h5><ul>
<li>动态类型语言和静态类型语言两者的却别就在于<strong>对类型的检查是在编译期还是在运行期</strong>，满足前者就是静态类型语言，反之则是动态类型语言。</li>
<li>直白来说 <strong>静态语言是判断变量自身的类型信息；动态类型预言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息</strong>,这是动态语言的一个重要特征。</li>
<li>Java是静态类型语言（尽管lambda表达式为其增加了动态特性），js，python是动态类型语言。</li>
</ul>
<h5 id="虚方法表"><a href="#虚方法表" class="headerlink" title="虚方法表"></a>虚方法表</h5><p>在面向对象编程中，会很频繁期使用到动态分派，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话就可能影响到执行效率。因此，为了提高性能，jvm采用在类的方法区建立一个虚方法表（virtual method table）（非虚方法不会出现在表中）来实现。使用索引表来代替查找。</p>
<p>每个类中都有一个虚方法表，表中存放着各个方法的实际入口。</p>
<h5 id="虚方法表的创建时间"><a href="#虚方法表的创建时间" class="headerlink" title="虚方法表的创建时间"></a>虚方法表的创建时间</h5><p><strong>虚方法表会在类加载的链接阶段被创建并开始初始化</strong>，类的变量初始值准备完成之后，jvm会把该类的方法表也初始化完毕。</p>
<h3 id="方法返回地址-Return-Address"><a href="#方法返回地址-Return-Address" class="headerlink" title="方法返回地址(Return Address)"></a>方法返回地址(Return Address)</h3><ul>
<li>方法返回地址存放的是<strong>存放调用该方法的PC寄存器的值</strong>。</li>
<li>一个方法的结束，有两种方式：<ul>
<li><strong>正常执行完成</strong></li>
<li>出现未处理的异常，<strong>非正常退出</strong></li>
</ul>
</li>
<li>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，<strong>调用者的pc计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。</strong>而通过异常退出时，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。</li>
<li>本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值也如调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。</li>
</ul>
<p>当一个方法开始执行后，只有两种方式可以退出这个方法：</p>
<p>1、执行引擎遇到任意一个方法返回的字节码指令（return），会有返回值传递给上层的方法调用者，简称正常完成出口。</p>
<ul>
<li>一个方法在正常调用完成之后究竟需要使用哪一个返回指令还需要根据方法返回值的实际数据类型而定</li>
<li>在字节码指令中，返回指令包含<strong>ireturn</strong>（当返回值是boolena、byte、char、short和int类型时使用）、<strong>lreturn</strong>、<strong>freturn</strong>、<strong>dreturn</strong>以及<strong>areturn</strong>，另外还有一个<strong>return</strong>指令供声明为void的方法、实例初始化方法、类和接口的初始化方法使用</li>
</ul>
<p>2、在方法执行的过程中遇到了异常（Exception），并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜素到匹配的异常处理器，就会导致方法退出，简称<strong>异常完成出口</strong>。<br>异常处理表中存放了方法执行过程中抛出异常时的异常处理，方便在发生异常的时候找到处理异常的代码。</p>
<p>正常完成出口和异常完成出口的区别在于：<strong>通过异常完成出口的退出的不会给它的上层调用者产生任何的返回值</strong>。</p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E5%90%84%E7%A7%8Dreturn%E6%8C%87%E4%BB%A4%E5%9B%BE%E7%A4%BA.png" alt="各种return指令图示"></p>
<h3 id="一些附加信息"><a href="#一些附加信息" class="headerlink" title="一些附加信息"></a>一些附加信息</h3><p>栈帧中还允许携带与java虚拟机实现相关的一些附加信息。例如，对程序调试提供支持的信息。</p>
<h3 id="虚拟机栈的相关面试题"><a href="#虚拟机栈的相关面试题" class="headerlink" title="虚拟机栈的相关面试题"></a>虚拟机栈的相关面试题</h3><ol>
<li>举例栈溢出的情况？（StackOverflowError）</li>
</ol>
<ul>
<li>递归调用等，可通过-Xss设置栈的大小解决</li>
</ul>
<ol start="2">
<li>调整栈的大小，就能保证不出现溢出么？</li>
</ol>
<ul>
<li><strong>不能</strong>。如递归无限次数肯定会溢出，调整栈大小只能保证溢出的时间晚一些</li>
</ul>
<ol start="3">
<li>分配的栈内存越大越好么？</li>
</ol>
<ul>
<li><strong>不是</strong>。会挤占其他线程的空间</li>
</ul>
<ol start="4">
<li>垃圾回收是否会涉及到虚拟机栈？</li>
</ol>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E4%B8%80/%E5%9E%83%E5%9C%BE%E6%B8%85%E7%90%86%E7%AE%80%E5%9B%BE.png" alt="各种return指令图示"></p>
<ol start="5">
<li>方法中定义的局部变量是否线程安全？</li>
</ol>
<ul>
<li>需要具体问题具体分析</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 何为线程安全？</span></span><br><span class="line"><span class="comment"> *     如果只有一个线程可以操作此数据，则毙是线程安全的。</span></span><br><span class="line"><span class="comment"> *     如果有多个线程操作此数据，则此数据是共享数据。如果不考虑同步机制的话，会存在线程安全问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * StringBuffer是线程安全的，StringBuilder不是</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//s1的声明方式是线程安全的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder s1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        s1.append(<span class="string">"a"</span>);</span><br><span class="line">        s1.append(<span class="string">"b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//stringBuilder的操作过程：是不安全的，因为method2可以被多个线程调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(StringBuilder stringBuilder)</span></span>&#123;</span><br><span class="line">        stringBuilder.append(<span class="string">"a"</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">"b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//s1的操作：是线程不安全的 有s1的返回值，可能被其他线程共享</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title">method3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder s1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        s1.append(<span class="string">"a"</span>);</span><br><span class="line">        s1.append(<span class="string">"b"</span>);</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//s1的操作：是线程安全的 ，StringBuilder的toString方法是创建了一个新的String，s1在内部消亡了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">method4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder s1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        s1.append(<span class="string">"a"</span>);</span><br><span class="line">        s1.append(<span class="string">"b"</span>);</span><br><span class="line">        <span class="keyword">return</span> s1.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            s.append(<span class="string">"a"</span>);</span><br><span class="line">            s.append(<span class="string">"b"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        method2(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=83638407&bvid=BV1BJ41177cp&cid=143085386&page=62" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>

<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><ul>
<li><strong>Java虚拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用</strong></li>
<li>本地方法是使用C语言实现的</li>
<li>它的具体做法是Native Method Stack中登记native方法，在Execution Engine执行时加载本地方法库。当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。它和虚拟机拥有同样的权限<ul>
<li>本地方法可以通过本地方法接口来 <strong>访问虚拟机内部的运行时数据区</strong></li>
<li>它甚至可以直接使用本地处理器中的寄存器</li>
<li>直接从本地内存的堆中分配任意数量的内存</li>
</ul>
</li>
<li><strong>本地方法栈，也是线程私有的</strong>。<ul>
<li>如果线程请求分配的栈容量超过本地方法栈允许的最大容量，Java虚拟机将会抛出一个StackOverFlowError异常。</li>
<li>如果本地方法栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的本地方法栈，那么java虚拟机将会抛出一个OutOfMemoryError异常。</li>
</ul>
</li>
</ul>
<p>并不是所有的JVM都支持本地方法。因为Java虚拟机规范并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构等。如果JVM产品不打算支持native方法，也可以无需实现本地方法栈。</p>
<p>在hotSpot JVM中，直接将本地方法栈和虚拟机栈合二为一(不懂)。</p>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>JVM笔记</tag>
        <tag>运行时数据区</tag>
        <tag>PC计数器</tag>
        <tag>虚拟机栈</tag>
        <tag>本地方法栈</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Java8新特性</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>施工中</p>
<a id="more"></a>]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java8</tag>
        <tag>Stream</tag>
        <tag>Lambda</tag>
        <tag>Optional</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-JavaScript</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-JavaScript/</url>
    <content><![CDATA[<p>施工中</p>
<a id="more"></a>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-JVM简介</title>
    <url>/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>JVM简介，本笔记来自宋红康JVM课件，掘金上别人的<a href="https://juejin.im/post/5e71c5c96fb9a07c98550df2" target="_blank" rel="noopener">笔记</a></p>
<a id="more"></a>

<h1 id="JVM简介"><a href="#JVM简介" class="headerlink" title="JVM简介"></a>JVM简介</h1><h2 id="JVM所处的位置"><a href="#JVM所处的位置" class="headerlink" title="JVM所处的位置"></a>JVM所处的位置</h2><p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E7%AE%80%E4%BB%8B/JVM%E7%9A%84%E4%BD%8D%E7%BD%AE.png" alt="JVM位置"></p>
<h2 id="市面上的一些JVM"><a href="#市面上的一些JVM" class="headerlink" title="市面上的一些JVM"></a>市面上的一些JVM</h2><ul>
<li>SUN Classic</li>
<li>Exact VM</li>
<li>HotSpot VM ：HotSpot指热点代码探测技术</li>
<li>BEA JRockit：(BEA 已被Oracle收购) 专注于服务端应用，世界最快的jvm之一</li>
<li>IBM J9</li>
<li>Taobao JVM: 目前已经在淘宝、天猫上线，替换了Oracle官方JVM；</li>
<li>Graal VM: Oracle 2018年4月公开，口号 Run Programs Faster Anywhere.最可能替代HotSpot的产品</li>
</ul>
<h3 id="Android虚拟机-DVM"><a href="#Android虚拟机-DVM" class="headerlink" title="Android虚拟机 DVM"></a>Android虚拟机 DVM</h3><ul>
<li>谷歌开发，基于Android，在2.2中提供了JIT</li>
<li>只能称作虚拟机 不能称为java虚拟机，他没有遵循Java虚拟机规范</li>
<li>基于寄存器架构，效率高，但是跟硬件耦合度比较高</li>
<li>不能直接执行class文件，执行的是dex文件</li>
<li>5.0使用支持提前编译的ART VM替换Dalvik VM</li>
</ul>
<h3 id="JVM体系概览"><a href="#JVM体系概览" class="headerlink" title="JVM体系概览"></a>JVM体系概览</h3><p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E7%AE%80%E4%BB%8B/JVM%E4%BD%93%E7%B3%BB%E6%A6%82%E8%A7%88.png" alt="JVM体系概览"></p>
<h3 id="java代码执行流程"><a href="#java代码执行流程" class="headerlink" title="java代码执行流程"></a>java代码执行流程</h3><p>java程序–（编译）–&gt;字节码文件–（解释执行）–&gt;操作系统（Win，Linux，Mac JVM）</p>
<h3 id="两种指令集架构"><a href="#两种指令集架构" class="headerlink" title="两种指令集架构"></a>两种指令集架构</h3><p>由于跨平台的设计，<strong>java的指令都是根据栈来设计的</strong>，不同平台CPU架构不同，所以不能设计为基于寄存器的架构。<br><strong>栈的指令集架构</strong>：跨平台性、<strong>指令集小、指令多；</strong>执行性比寄存器差<br><strong>寄存器的指令集架构</strong>：指令少</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//查看指令集命令代码</span><br><span class="line">cd out/production/类根目录</span><br><span class="line">javap -v StackStruTest.class</span><br><span class="line"></span><br><span class="line">//打印程序执行的进程</span><br><span class="line">jps</span><br></pre></td></tr></table></figure>

<h3 id="jvm生命周期"><a href="#jvm生命周期" class="headerlink" title="jvm生命周期"></a>jvm生命周期</h3><h4 id="1-启动"><a href="#1-启动" class="headerlink" title="1.启动"></a>1.启动</h4><p>通过<strong>引导类加载器</strong>（bootstrap class loader）创建一个初始类（initial class）来完成的，这个类是由虚拟机的具体实现指定的。</p>
<h4 id="2-执行"><a href="#2-执行" class="headerlink" title="2.执行"></a>2.执行</h4><ul>
<li>一个运行中的java虚拟机有着一个清晰的任务：执行Java程序；</li>
<li>程序开始执行的时候它才运行，程序结束时它就停止；</li>
<li>执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程。</li>
</ul>
<h4 id="3-退出"><a href="#3-退出" class="headerlink" title="3.退出"></a>3.退出</h4><ul>
<li>程序正常执行结束</li>
<li>程序异常或错误而异常终止</li>
<li>操作系统错误导致终止</li>
<li>某线程调用Runtime类或System类的exit方法，或Runtime类的halt方法，并且java安全管理器也允许这次exit或halt操作</li>
<li>除此之外，JNI规范描述了用JNI Invocation API来加载或卸载Java虚拟机时，Java虚拟机的退出情况</li>
</ul>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>JVM笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-JVM之类加载子系统</title>
    <url>/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>JVM类加载子系统的介绍，本笔记来自宋红康JVM课件，掘金上别人的<a href="https://juejin.im/post/5e71c5c96fb9a07c98550df2" target="_blank" rel="noopener">笔记</a></p>
<a id="more"></a>

<h1 id="JVM之类加载子系统"><a href="#JVM之类加载子系统" class="headerlink" title="JVM之类加载子系统"></a>JVM之类加载子系统</h1><h2 id="JVM架构图"><a href="#JVM架构图" class="headerlink" title="JVM架构图"></a>JVM架构图</h2><p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/JVM%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="JVM架构图"></p>
<h2 id="类加载子系统"><a href="#类加载子系统" class="headerlink" title="类加载子系统"></a>类加载子系统</h2><h3 id="类加载子系统的角色位置"><a href="#类加载子系统的角色位置" class="headerlink" title="类加载子系统的角色位置"></a>类加载子系统的角色位置</h3><p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BD%8D%E7%BD%AE.png" alt="类加载子系统的位置"></p>
<h3 id="类加载子系统的作用"><a href="#类加载子系统的作用" class="headerlink" title="类加载子系统的作用"></a>类加载子系统的作用</h3><ul>
<li>类加载子系统负责<strong>从文件系统或者网络中加载Class文件</strong>，class文件在文件开头有特定的文件标识</li>
<li>ClassLoader<strong>只负责class文件的加载</strong>，至于它是否可以运行，则由Execution Engine决定</li>
<li><strong>加载的类信息存放于一块成为方法区的内存空间</strong>。除了类信息之外，方法区还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）</li>
</ul>
<h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5.png" alt="类加载过程"></p>
<h3 id="1-加载"><a href="#1-加载" class="headerlink" title="1. 加载"></a>1. 加载</h3><ul>
<li>通过一个类的全限定名获取定义此类的二进制字节流</li>
<li>将这个字节流所代表的的静态存储结构转化为方法区的运行时数据</li>
<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li>
</ul>
<h3 id="2-链接"><a href="#2-链接" class="headerlink" title="2. 链接"></a>2. 链接</h3><h4 id="2-1-验证"><a href="#2-1-验证" class="headerlink" title="2.1. 验证"></a>2.1. 验证</h4><ul>
<li>目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全</li>
<li>主要包括四种验证，文件格式验证，源数据验证，字节码验证，符号引用验证。</li>
</ul>
<h4 id="2-2-准备"><a href="#2-2-准备" class="headerlink" title="2.2.  准备"></a>2.2.  准备</h4><ul>
<li><strong>为类变量分配内存并且设置该类变量的默认初始值</strong>，即零值</li>
<li>这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化</li>
<li>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。</li>
</ul>
<h4 id="2-3-解析"><a href="#2-3-解析" class="headerlink" title="2.3. 解析"></a>2.3. 解析</h4><ul>
<li>将常量池内的<strong>符号引用转换为直接引用</strong>的过程</li>
<li>事实上，解析操作往往会伴随着jvm在执行完初始化之后再执行</li>
<li>符号引用就是一组符号来描述所引用的目标。符号应用的字面量形式明确定义在《java虚拟机规范》的class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄</li>
<li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info/CONSTANT_Fieldref_info、CONSTANT_Methodref_info等。</li>
</ul>
<h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3. 初始化"></a>3. 初始化</h3><ul>
<li>初始化阶段就是执行<strong>类构造器方法</strong><code>clinit()</code>的过程。</li>
<li><strong>此方法不需要定义</strong>，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。 我们注意到<strong>如果没有静态变量</strong>c，那么<strong>字节码文件中就不会有clinit方法</strong></li>
</ul>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E6%B2%A1%E6%9C%89static%E4%BE%BF%E6%B2%A1%E6%9C%89clint%E6%96%B9%E6%B3%95.png" alt="图1"></p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E6%9C%89static%E5%8F%98%E9%87%8F%E5%B0%B1%E6%9C%89%E4%BA%86clint%E6%96%B9%E6%B3%95.png" alt="图1"></p>
<ul>
<li><strong>构造器方法中指令按语句在源文件中出现的顺序执行</strong></li>
</ul>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E6%9E%84%E9%80%A0%E5%99%A8%E6%96%B9%E6%B3%95%E4%B8%AD%E6%8C%87%E4%BB%A4%E6%8C%89%E8%AF%AD%E5%8F%A5%E5%9C%A8%E6%BA%90%E6%96%87%E4%BB%B6%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C.png" alt="图1"></p>
<ul>
<li>clinit()不同于类的构造器。（关联：构造器是虚拟机视角下的init()）</li>
<li>若该类具有父类，jvm会保证子类的clinit()执行前，父类的clinit()已经执行完毕</li>
</ul>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/jvm%E4%BC%9A%E4%BF%9D%E8%AF%81%E5%AD%90%E7%B1%BB%E7%9A%84clinit()%E6%89%A7%E8%A1%8C%E5%89%8D%EF%BC%8C%E7%88%B6%E7%B1%BB%E7%9A%84clinit()%E5%B7%B2%E7%BB%8F%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95.png" alt="图1"></p>
<ul>
<li>虚拟机必须保证一个类的clinit()方法在<strong>多线程下被同步加锁</strong></li>
</ul>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BF%85%E9%A1%BB%E4%BF%9D%E8%AF%81%E4%B8%80%E4%B8%AA%E7%B1%BB%E7%9A%84clinit()%E6%96%B9%E6%B3%95%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%A2%AB%E5%90%8C%E6%AD%A5%E5%8A%A0%E9%94%81.png" alt="图1"></p>
<h3 id="类加载器的分类"><a href="#类加载器的分类" class="headerlink" title="类加载器的分类"></a>类加载器的分类</h3><ul>
<li>JVM支持两种类型的加载器，分别为<strong>引导类加载器（BootStrap ClassLoader）和自定义类加载器（User-Defined ClassLoader）</strong></li>
<li>从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是java虚拟机规范却没有这么定义，而是<strong>将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器</strong>。</li>
<li>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有三个，如下所示：</li>
</ul>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%92%E5%88%86%E5%9B%BE.png" alt="加载器划分图"></p>
<p>注：上图的Extension Class Loader和System Class Loader都属于自定义类加载器。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassLoader加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取其上层  扩展类加载器</span></span><br><span class="line">        ClassLoader extClassLoader = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(extClassLoader);<span class="comment">//sun.misc.Launcher$ExtClassLoader@610455d6</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取其上层 获取不到引导类加载器</span></span><br><span class="line">        ClassLoader bootStrapClassLoader = extClassLoader.getParent();</span><br><span class="line">        System.out.println(bootStrapClassLoader);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于用户自定义类来说：使用系统类加载器进行加载</span></span><br><span class="line">        ClassLoader classLoader = ClassLoaderTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String 类使用引导类加载器进行加载的  --&gt;java核心类库都是使用引导类加载器加载的</span></span><br><span class="line">        ClassLoader classLoader1 = String<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader1);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对于<strong>用户自定义类</strong>来说：<strong>使用系统类加载器AppClassLoader</strong>进行加载</li>
<li>java<strong>核心类库</strong>都是使用引导类加载器<strong>BootStrapClassLoader</strong>加载的</li>
</ul>
<h3 id="虚拟机自带的加载器"><a href="#虚拟机自带的加载器" class="headerlink" title="虚拟机自带的加载器"></a>虚拟机自带的加载器</h3><ul>
<li>①启动类加载器（引导类加载器，<strong>BootStrap ClassLoader</strong>）<ul>
<li>这个类加载使用<strong>C/C++语言实现的</strong>，嵌套在JVM内部</li>
<li>它用来加载java的核心库（<strong>JAVA_HOME/jre/lib/rt.jar/resources.jar或sun.boot.class.path路径下的内容</strong>），用于提供JVM自身需要的类</li>
<li>并不继承自java.lang.ClassLoader,<strong>没有父加载器</strong></li>
<li>加载拓展类和应用程序类加载器，并指定为他们的父加载器</li>
<li><strong>处于安全考虑，BootStrap启动类加载器只加载包名为java、javax、sun等开头的类</strong></li>
</ul>
</li>
<li>②拓展类加载器（<strong>Extension ClassLoader</strong>）<ul>
<li>java语言编写 ，由sun.misc.Launcher$ExtClassLoader实现。</li>
<li><strong>派生于ClassLoader类</strong></li>
<li><strong>父类加载器为启动类加载器</strong></li>
<li>从<strong>java.ext.dirs</strong>系统属性所指定的目录中加载类库，或从JDK的安装目录的<strong>jre/lib/ext子目录</strong>（扩展目录）下加载类库。<strong>如果用户创建的JAR放在此目录下，也会由拓展类加载器自动加载</strong></li>
</ul>
</li>
<li>③应用程序类加载器（系统类加载器）<ul>
<li>java语言编写， 由sun.misc.Launcher$AppClassLoader实现。</li>
<li><strong>派生于ClassLoader类</strong></li>
<li><strong>父类加载器为拓展类加载器</strong></li>
<li>它负责加载环境变量classpath或系统属性 java.class.path指定路径下的类库</li>
<li><strong>该类加载器是程序中默认的类加载器</strong>，一般来说，java应用的类都是由它来完成加载</li>
<li>通过ClassLoader#getSystemClassLoader()方法可以获取到该类加载器</li>
</ul>
</li>
</ul>
<p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 虚拟机自带加载器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"********启动类加载器*********"</span>);</span><br><span class="line">        URL[] urls = sun.misc.Launcher.getBootstrapClassPath().getURLs();</span><br><span class="line">        <span class="comment">//获取BootStrapClassLoader能够加载的api路径</span></span><br><span class="line">        <span class="keyword">for</span> (URL e:urls)&#123;</span><br><span class="line">            System.out.println(e.toExternalForm());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从上面的路径中随意选择一个类 看看他的类加载器是什么</span></span><br><span class="line">        <span class="comment">//Provider位于 /jdk1.8.0_171.jdk/Contents/Home/jre/lib/jsse.jar 下，引导类加载器加载它</span></span><br><span class="line">        ClassLoader classLoader = Provider<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"********拓展类加载器********"</span>);</span><br><span class="line">        String extDirs = System.getProperty(<span class="string">"java.ext.dirs"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String path : extDirs.split(<span class="string">";"</span>))&#123;</span><br><span class="line">            System.out.println(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从上面的路径中随意选择一个类 看看他的类加载器是什么:拓展类加载器</span></span><br><span class="line">        ClassLoader classLoader1 = CurveDB<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader1);<span class="comment">//sun.misc.Launcher$ExtClassLoader@4dc63996</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a>用户自定义类加载器</h3><p>在Java的日常应用程序开发中，类的加载几乎是上述三种类加载器互相配合执行的。<strong>在必要时</strong>，我们可以自定义类加载器，来定制类的加载方式。</p>
<p>自定义类加载器解决的问题：</p>
<ol>
<li>隔离加载类（解决模块、中间件之间jar包冲突）</li>
<li>修改类加载的方式</li>
<li>扩展加载源</li>
<li>防止源码泄露（加密解密避免反编译）</li>
</ol>
<p>自定义类加载器的步骤：</p>
<ol>
<li>通过继承抽象类Java.lang.ClassLoader类的方式，实现自己的类加载器。</li>
<li>JDK1.2之后不再建议用户去覆盖loadClass()方法，而是建议把自定义的类加载逻辑写在findClass()方法中。</li>
<li>编写自定义类加载器时，如果没有太过于复杂的需求，可以直接<strong>继承URLClassLoader类</strong>，避免自己去编写findClass()方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</li>
</ol>
<h3 id="ClassLoader类"><a href="#ClassLoader类" class="headerlink" title="ClassLoader类"></a>ClassLoader类</h3><p>ClassLoader类，它是一个<strong>抽象类</strong>，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）</p>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th align="left">方法名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">getParent（）</td>
<td>返回该类加载器的超类加载器</td>
</tr>
<tr>
<td align="left">loadClass（String name）</td>
<td>加载名称为name的类，返回结果为java.lang.Class类的实例</td>
</tr>
<tr>
<td align="left">findClass（String name）</td>
<td>查找名称为name的类，返回结果为java.lang.Class类的实例</td>
</tr>
<tr>
<td align="left">findLoadedClass（String name）</td>
<td>查找名称为name的已经被加载过的类，返回结果为java.lang.Class类的实例</td>
</tr>
<tr>
<td align="left">defineClass（String name，byte[] b,int off,int len）</td>
<td>把字节数组b中的内容转换为一个Java类 ，返回结果为java.lang.Class类的实例</td>
</tr>
<tr>
<td align="left">resolveClass（Class&lt;?&gt; c）</td>
<td>连接指定的一个java类</td>
</tr>
</tbody></table>
<h4 id="ClassLoader继承关系"><a href="#ClassLoader继承关系" class="headerlink" title="ClassLoader继承关系"></a>ClassLoader继承关系</h4><p><strong>拓展类加载器和系统类加载器间接继承于ClassLoader抽象类</strong></p>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/ClassLoader%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="ClassLoader的继承关系"></p>
<h4 id="获取ClassLoader的途径"><a href="#获取ClassLoader的途径" class="headerlink" title="获取ClassLoader的途径"></a>获取ClassLoader的途径</h4><table>
<thead>
<tr>
<th>获取方式</th>
<th>具体方法</th>
</tr>
</thead>
<tbody><tr>
<td>获取当前类的ClassLoader</td>
<td><strong>clazz.getClassLoader()</strong></td>
</tr>
<tr>
<td>获取当前线程上下文的ClassLoader</td>
<td><strong>Thread.currentThread().getContextClassLoader()</strong></td>
</tr>
<tr>
<td>获取系统的ClassLoader</td>
<td><strong>ClassLoader.getSystemClassLoader()</strong></td>
</tr>
<tr>
<td>获取调用者的ClassLoader</td>
<td><strong>DriverManger.getCallerClassLoader()</strong></td>
</tr>
</tbody></table>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 获取String类的类加载器，为引导类加载器，显示为null</span></span><br><span class="line">            ClassLoader classLoader1 = Class.forName(<span class="string">"java.lang.String"</span>).getClassLoader();</span><br><span class="line">            System.out.println(classLoader1);</span><br><span class="line">            <span class="comment">//2. 获取当前线程上下文的类加载器</span></span><br><span class="line">            ClassLoader classLoader2 = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            System.out.println(classLoader2);</span><br><span class="line">            <span class="comment">//3. 获取系统类加载器的父类加载器</span></span><br><span class="line">            ClassLoader classLoader3 = ClassLoader.getSystemClassLoader().getParent();</span><br><span class="line">            System.out.println(classLoader3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>Java虚拟机对Class文件采用的是<strong>按需加载</strong>的方式，也就是说当需要使用该类时才会将它的Class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式。</p>
<p>如果创建java.lang并自我声明了一个String类，因为双亲委派的缘故， 就算正常执行，结果也不会出现自定义String的输出。</p>
<h4 id="双亲委派机制的优势"><a href="#双亲委派机制的优势" class="headerlink" title="双亲委派机制的优势"></a>双亲委派机制的优势</h4><ol>
<li>防止重复加载一个类。通过委托去向上面问一问，加载过了，就不用再加载一遍。</li>
<li>保证核心类不能被篡改。保证了类执行安全。（特别是以上例子中java.lang内的类会报安全异常，避免恶意代码或错误程序被引导类加载器加载产生问题）</li>
</ol>
<h4 id="双亲委派机制的工作原理"><a href="#双亲委派机制的工作原理" class="headerlink" title="双亲委派机制的工作原理"></a>双亲委派机制的工作原理</h4><ol>
<li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行。</li>
<li>如果父类的加载器还存在父类加载器，则进一步向上委托，依次递归，请求最终将达到顶层的启动类加载器。</li>
<li>如果父类加载器可以完成类加载任务，就成功返回，如果父类加载器无法完成此加载任务，子加载器才会尝试去自己加载，这就是双亲委派模式。</li>
</ol>
<p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86.png" alt="双亲委派机制原理.png"></p>
<h4 id="反向委派"><a href="#反向委派" class="headerlink" title="反向委派"></a>反向委派</h4><p><img src="/2020/05/18/%E7%AC%94%E8%AE%B0-JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E5%8F%8D%E5%90%91%E5%A7%94%E6%B4%BE.png" alt="双亲委派机制原理.png"></p>
<p>SPI接口实现类通过双亲委派机制加载SPI核心的jar包，但SPI核心类存在接口需要实现类，涉及第三方的jar包，需要加载jdbc.jar。而<strong>jdbc.jar属于第三方，由系统类加载器加载</strong>，所以产生反向委派，一直委派到系统类加载器，通过线程的getContextClassLoader获取到，并加载SPI接口的具体实现类。</p>
<h4 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h4><p>自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载过程中会先加载jdk自带的文件（rt.jar包中的java\lang\String.class）,报错信息说没有main方法就是因为加载的是rt.jar包中的String类。这样可以保证对java核心源代码的保护，这就是<strong>沙箱安全机制</strong>。</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h5 id="在JVM中表示两个class对象是否为同一个类存在两个必要条件"><a href="#在JVM中表示两个class对象是否为同一个类存在两个必要条件" class="headerlink" title="在JVM中表示两个class对象是否为同一个类存在两个必要条件"></a>在JVM中表示两个class对象是否为同一个类存在两个必要条件</h5><ol>
<li>类的完整类名必须一致，包括包名。</li>
<li>加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。</li>
</ol>
<p>换句话说，在JVM中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，这两个类对象也是不相等的。</p>
<p>如果一个类是由用户类加载器加载的，那么JVM会<strong>将这个类加载器的一个引用作为类型信息的一部分保存在方法区中</strong>。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。</p>
<h4 id="类的主动使用和被动使用"><a href="#类的主动使用和被动使用" class="headerlink" title="类的主动使用和被动使用"></a>类的主动使用和被动使用</h4><p>主动使用：</p>
<ol>
<li>创建类的实例</li>
<li>访问某个类或接口的静态变量，或者对该静态变量赋值</li>
<li>调用类的静态方法</li>
<li>反射：如Class.forName(“”)</li>
<li>初始化一个类的子类</li>
<li>Java虚拟机启动时被标明为启动类的类</li>
<li>JDK7开始启用的动态语言支持：java.lang.invoke.MethodHandle实例的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应的类没有初始化，则初始化。</li>
</ol>
<p>除了以上七种情况，<strong>其他使用Java类的方式都被看作是对类的被动使用，都不会导致类的初始化</strong>。</p>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>JVM笔记</tag>
        <tag>类加载</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Maven</title>
    <url>/2020/04/25/%E7%AC%94%E8%AE%B0-Maven/</url>
    <content><![CDATA[<p>Maven的介绍及使用</p>
<a id="more"></a>

<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="0-Maven简述"><a href="#0-Maven简述" class="headerlink" title="0. Maven简述"></a>0. Maven简述</h2><p>Maven,是一个基于Java平台的自动化构建工具。</p>
<h2 id="1-Maven构建的几个主要环节："><a href="#1-Maven构建的几个主要环节：" class="headerlink" title="1. Maven构建的几个主要环节："></a>1. Maven构建的几个主要环节：</h2><p>①<strong>清理</strong>：删除以前的编译结果，为重新编译做好准备。<br>②<strong>编译</strong>：将 Java 源程序编译为字节码文件。<br>③<strong>测试</strong>：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。 ④<strong>报告</strong>：在每一次测试后以标准的格式记录和展示测试结果。<br>⑤<strong>打包</strong>：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web 工程对应 war 包。<br>⑥<strong>安装</strong>：在 Maven 环境下特指将打包的结果——jar 包或 war 包安装到本地仓库中。<br>⑦<strong>部署</strong>：将打包的结果部署到远程仓库或将 war 包部署到服务器上运行</p>
<h2 id="2-Maven仓库"><a href="#2-Maven仓库" class="headerlink" title="2. Maven仓库"></a>2. Maven仓库</h2><h3 id="2-0-本地仓库"><a href="#2-0-本地仓库" class="headerlink" title="2.0. 本地仓库"></a>2.0. 本地仓库</h3><ul>
<li>默认地址为<strong>~\.m2\repository</strong></li>
</ul>
<ul>
<li><p>可在Maven的settings.xml中的添加标签，来修改本地仓库的位置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>本地仓库路径<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-1-远程仓库-私服"><a href="#2-1-远程仓库-私服" class="headerlink" title="2.1. 远程仓库(私服)"></a>2.1. 远程仓库(私服)</h3><h3 id="2-2-中央仓库"><a href="#2-2-中央仓库" class="headerlink" title="2.2. 中央仓库"></a>2.2. 中央仓库</h3><h4 id="中央仓库的镜像"><a href="#中央仓库的镜像" class="headerlink" title="中央仓库的镜像"></a>中央仓库的镜像</h4><p>架设在各个大洲，为中央仓库分担流量。减轻中央仓库的压力，同时更快的响应用户请求。</p>
<h2 id="3-Maven下的项目标准目录"><a href="#3-Maven下的项目标准目录" class="headerlink" title="3. Maven下的项目标准目录"></a>3. Maven下的项目标准目录</h2><h3 id="3-0-Java项目目录"><a href="#3-0-Java项目目录" class="headerlink" title="3.0. Java项目目录"></a>3.0. Java项目目录</h3><ul>
<li>src/main/java：核心代码部分</li>
<li>src/main/resources：配置文件部分</li>
<li>src/test/java：测试代码部分</li>
<li>src/test/resources：测试配置文件部分</li>
</ul>
<h3 id="3-1-Java-Web项目目录"><a href="#3-1-Java-Web项目目录" class="headerlink" title="3.1.  Java-Web项目目录"></a>3.1.  Java-Web项目目录</h3><ul>
<li>src/main/java：核心代码部分</li>
<li>src/main/resources：配置文件部分</li>
<li>src/test/java：测试代码部分</li>
<li>src/test/resources：测试配置文件部分\</li>
<li>src/main/webapp：页面资源部分</li>
</ul>
<h2 id="4-POM"><a href="#4-POM" class="headerlink" title="4. POM"></a>4. POM</h2><p>Project Object Model：项目对象模型。将 Java 工程的相关信息封装为对象作为便于操作和管理的模型。 Maven 工程的核心配置。可以说学习 Maven 就是学习 pom.xml 文件中的配置。</p>
<h2 id="5-Maven坐标"><a href="#5-Maven坐标" class="headerlink" title="5. Maven坐标"></a>5. Maven坐标</h2><p>使用如下三个向量在 Maven 的仓库中唯一的确定一个 Maven 工程。</p>
<ul>
<li><strong>groupId</strong>：公司或组织的域名倒序+当前项目名称 </li>
<li><strong>artifactId</strong>：当前项目的模块名称 </li>
<li><strong>version</strong>：当前模块的版本</li>
</ul>
<p>例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="如何通过坐标到仓库中查找-jar-包"><a href="#如何通过坐标到仓库中查找-jar-包" class="headerlink" title="如何通过坐标到仓库中查找 jar 包?"></a>如何通过坐标到仓库中查找 jar 包?</h3><h4 id="1-将-gav-三个向量连起来"><a href="#1-将-gav-三个向量连起来" class="headerlink" title="1. 将 gav 三个向量连起来"></a>1. 将 gav 三个向量连起来</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">com.xxx.maven+Hello+0.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure>

<h4 id="2-将连起来的字符串作为目录结构到仓库中查找"><a href="#2-将连起来的字符串作为目录结构到仓库中查找" class="headerlink" title="2. 将连起来的字符串作为目录结构到仓库中查找"></a>2. 将连起来的字符串作为目录结构到仓库中查找</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">com/xxx/maven/Hello/0.0.1-SNAPSHOT/Hello-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<h2 id="6-依赖"><a href="#6-依赖" class="headerlink" title="6. 依赖"></a>6. 依赖</h2><p>当 A jar 包用到了 B jar 包中的某些类时，A 就对 B 产生了依赖。</p>
<h3 id="6-0-引入方式"><a href="#6-0-引入方式" class="headerlink" title="6.0. 引入方式"></a>6.0. 引入方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-1-依赖范围"><a href="#6-1-依赖范围" class="headerlink" title="6.1. 依赖范围"></a>6.1. 依赖范围</h3><p>依赖信息中的 scope 设置，就是依赖的范围。</p>
<p>常用的有：complie、test、provided</p>
<p>complie和test的简单区别图示：</p>
<p><img src="/2020/04/25/%E7%AC%94%E8%AE%B0-Maven/complie%E5%92%8Ctest%E7%9A%84%E5%8C%BA%E5%88%AB%E5%9B%BE.png" alt="complie、test"></p>
<p>complie和provided的简单区别图示：</p>
<p><img src="/2020/04/25/%E7%AC%94%E8%AE%B0-Maven/complie%E5%92%8Cprovided%E7%9A%84%E5%8C%BA%E5%88%AB%E5%9B%BE.png" alt="complie、test"></p>
<p>总结：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">complie</th>
<th align="center">test</th>
<th align="center">provided</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主程序</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">测试程序</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">参与部署</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
<h3 id="6-2-依赖的传递性"><a href="#6-2-依赖的传递性" class="headerlink" title="6.2. 依赖的传递性"></a>6.2. 依赖的传递性</h3><p>A 依赖 B，B 依赖 C，A和C的依赖关系如下表：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">complie</th>
<th align="center">provided</th>
<th align="center">runtime</th>
<th align="center">test</th>
</tr>
</thead>
<tbody><tr>
<td align="center">complie</td>
<td align="center">complie</td>
<td align="center">×</td>
<td align="center">runtime</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">provided</td>
<td align="center">provided</td>
<td align="center">provided</td>
<td align="center">provided</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">runtime</td>
<td align="center">runtime</td>
<td align="center">×</td>
<td align="center">runtime</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">test</td>
<td align="center">test</td>
<td align="center">×</td>
<td align="center">test</td>
<td align="center">×</td>
</tr>
</tbody></table>
<p><strong>最左一列为直接依赖</strong>，理解为 A 依赖 B 的范围。<strong>最顶层一行为为传递依赖</strong>，理解为 B<br>依赖 C 的范围，行与列的交叉即为 A传递依赖 C的范围。</p>
<p><strong>解释</strong>：</p>
<p>比如 A 对 B 有 compile 依赖，B 对 C 有 runtime 依赖，那么根据表格所示 A 对 C 有runtime 依赖。 </p>
<h3 id="6-3-依赖的排除"><a href="#6-3-依赖的排除" class="headerlink" title="6.3. 依赖的排除"></a>6.3. 依赖的排除</h3><p>在当前工程中引入了一个依赖是A，而 A 又依赖了 B，那么 Maven 会自动将 A 依赖的 B 引入当前工程，但是个别情况下 B 有可能是一个不稳定版，或对当前工程有不良影响。这时我们可以在引入 A 的时 候将 B 排除。</p>
<p>注：如果X.jar 依赖于Y.jar，但是在引入X.jar之前  已经存在了Y.jar，则maven不会再在 引入X.jar时 引入Y.jar</p>
<p>例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>      </span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HelloFriend<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-4-统一管理所依赖-jar-包的版本"><a href="#6-4-统一管理所依赖-jar-包的版本" class="headerlink" title="6.4. 统一管理所依赖 jar 包的版本"></a>6.4. 统一管理所依赖 jar 包的版本</h3><p>对同一个框架的一组 jar 包最好使用相同的版本。为了方便升级框架，可以将 jar 包的版本信息统一提取出来</p>
<h4 id="统一声明版本号"><a href="#统一声明版本号" class="headerlink" title="统一声明版本号"></a>统一声明版本号</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xxx.spring.version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="name">xxx.spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="引用前面声明的版本号"><a href="#引用前面声明的版本号" class="headerlink" title="引用前面声明的版本号"></a>引用前面声明的版本号</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;xxx.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> …… </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-5-依赖原则"><a href="#6-5-依赖原则" class="headerlink" title="6.5. 依赖原则"></a>6.5. 依赖原则</h3><h4 id="路径最短者优先"><a href="#路径最短者优先" class="headerlink" title="路径最短者优先"></a>路径最短者优先</h4><p><img src="/2020/04/25/%E7%AC%94%E8%AE%B0-Maven/%E8%B7%AF%E5%BE%84%E6%9C%80%E7%9F%AD%E8%80%85%E4%BC%98%E5%85%88.png" alt="最短者优先"></p>
<h4 id="路径长度相同时"><a href="#路径长度相同时" class="headerlink" title="路径长度相同时"></a>路径长度相同时</h4><ul>
<li>在同一个pom.xml文件中有2个相同的依赖（覆盖）：后面声明的依赖 会覆盖前面声明的依赖 （<strong>严禁使用本情况，严禁在同一个pom中声明2个版本不同的依赖</strong>）</li>
<li>如果是不同的 pom.xml中有2个相同的依赖（优先）：则先声明的依赖 ，会覆盖后声明的依赖</li>
</ul>
<h5 id="路径相同时先声明者优先"><a href="#路径相同时先声明者优先" class="headerlink" title="路径相同时先声明者优先"></a>路径相同时先声明者优先</h5><p>这里“<strong>声明</strong>”的先后顺序指的是 dependency 标签配置的先后顺序。 </p>
<p><img src="/2020/04/25/%E7%AC%94%E8%AE%B0-Maven/%E8%B7%AF%E5%BE%84%E6%9C%80%E7%9F%AD%E8%80%85%E4%BC%98%E5%85%88.png" alt="路径相同"></p>
<h3 id="6-6-多个maven项目（模块）之间如何依赖"><a href="#6-6-多个maven项目（模块）之间如何依赖" class="headerlink" title="6.6. 多个maven项目（模块）之间如何依赖"></a>6.6. 多个maven项目（模块）之间如何依赖</h3><p>p项目 依赖于 q项目</p>
<ul>
<li><p><strong>先</strong>p项目 install 到本地仓库</p>
</li>
<li><p><strong>再</strong>在q项目的pom.xml文件中添加Maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本项目  依赖于HelloWorld2项目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xxx.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HelloWorld2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="7-Maven生命周期"><a href="#7-Maven生命周期" class="headerlink" title="7. Maven生命周期"></a>7. Maven生命周期</h2><ul>
<li><p>Maven 生命周期定义了各个构建环节的执行顺序，有了这个清单，Maven 就可以自动化的执行构建命令了。</p>
</li>
<li><p>Maven 有三套相互独立的生命周期，分别是：  </p>
<ul>
<li>①Clean Lifecycle 在进行真正的构建之前进行一些清理工作。 </li>
<li>②Default Lifecycle 构建的核心部分，编译，测试，打包，安装，部署等等。 </li>
<li>③Site Lifecycle 生成项目报告，站点，发布站点</li>
</ul>
<p>每套生命周期都由一组<strong>阶段</strong>(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比 如，运行 mvn clean，这个 clean 是 Clean 生命周期的一个阶段。有 Clean 生命周期，也有 clean 阶段。</p>
</li>
</ul>
<h3 id="7-1-Clean-生命周期"><a href="#7-1-Clean-生命周期" class="headerlink" title="7.1. Clean 生命周期"></a>7.1. Clean 生命周期</h3><p><strong>Clean 生命周期</strong>一共包含了三个阶段：</p>
<ul>
<li>①<strong>pre-clean</strong> 执行一些需要在 clean 之前完成的工作  </li>
<li>②<strong>clean</strong> 移除所有上一次构建生成的文件  </li>
<li>③<strong>post-clean</strong> 执行一些需要在 clean 之后立刻完成的工作</li>
</ul>
<h3 id="7-2-Site-生命周期"><a href="#7-2-Site-生命周期" class="headerlink" title="7.2. Site 生命周期"></a>7.2. Site 生命周期</h3><ul>
<li><p>①pre-site 执行一些需要在生成站点文档之前完成的工作 </p>
</li>
<li><p>②site 生成项目的站点文档 </p>
</li>
<li><p>③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备 </p>
</li>
<li><p>④site-deploy 将生成的站点文档部署到特定的服务器上</p>
<p>经常用到的是 <strong>site</strong> 阶段和 <strong>site-deploy</strong> 阶段，用以生成和发布 Maven 站点。是 Maven 相当强大 的功能，Manager 比较喜欢，文档及统计数据自动生成，很好看。 </p>
</li>
</ul>
<h3 id="7-3-Default-生命周期"><a href="#7-3-Default-生命周期" class="headerlink" title="7.3. Default 生命周期"></a>7.3. Default 生命周期</h3><p>Default 生命周期是 Maven 生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。只解释一些比较重要和常用的阶段。</p>
<p>validate<br>generate-sources<br>process-sources<br>generate-resources<br>process-resources 复制并处理资源文件，至目标目录，准备打包。<br><strong>compile</strong> 编译项目的源代码。<br>process-classes<br>generate-test-sources<br>process-test-sources<br>generate-test-resources<br>process-test-resources 复制并处理资源文件，至目标测试目录。<br>test-compile 编译测试源代码。<br>process-test-classes<br><strong>test</strong> 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。<br>prepare-package package 接受编译好的代码，打包成可发布的格式，如 JAR。<br>pre-integration-test<br>integration-test<br>post-integration-test<br>verify<br><strong>install</strong> 将包安装至本地仓库，以让其它项目依赖。<br><strong>deploy</strong> 将最终的包复制到远程的仓库，以让其它开发人员与项目共享或部署到服务器上运行。 </p>
<h4 id="7-4-生命周期与自动化构建"><a href="#7-4-生命周期与自动化构建" class="headerlink" title="7.4. 生命周期与自动化构建"></a>7.4. 生命周期与自动化构建</h4><p>运行任何一个阶段的时候，它前面的所有阶段都会被运行。</p>
<h2 id="8-继承"><a href="#8-继承" class="headerlink" title="8. 继承"></a>8. 继承</h2><p>非 compile 范围的依赖信息是不能在“依赖链”中传递的。<br>要想项目的<strong>各个模块版本能够统一</strong>，使用继承机制就可以将依赖信息<strong>统一提取</strong>到父工程模块中进行统一管理。 </p>
<p><strong>通常继承和聚合同时使用</strong>。</p>
<h3 id="8-0-设置步骤"><a href="#8-0-设置步骤" class="headerlink" title="8.0. 设置步骤"></a>8.0. 设置步骤</h3><h4 id="8-0-0-创建父工程"><a href="#8-0-0-创建父工程" class="headerlink" title="8.0.0. 创建父工程"></a>8.0.0. 创建父工程</h4><p>创建父工程和创建一般的 Java 工程操作一致，唯一需要注意的是：打包方式处要设置为 <strong>pom</strong>。 </p>
<h3 id="8-0-1-在子工程的pom-xml文件中引用父工程"><a href="#8-0-1-在子工程的pom-xml文件中引用父工程" class="headerlink" title="8.0.1.  在子工程的pom.xml文件中引用父工程"></a>8.0.1.  在子工程的pom.xml文件中引用父工程</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定从当前子工程的pom.xml文件出发，查找父工程的pom.xml的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../Parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果子工程的 <strong>groupId</strong> 和 <strong>version</strong> 和父工程重复则可以删除。 </p>
<h3 id="8-0-2-在父工程中管理依赖"><a href="#8-0-2-在父工程中管理依赖" class="headerlink" title="8.0.2. 在父工程中管理依赖"></a>8.0.2. 在父工程中管理依赖</h3><p>父工程的pom文件中设置，将 Parent 项目中的 <strong>dependencies</strong> 标签，用 <strong>dependencyManagement</strong> 标签括起来。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-0-3-子项目中重新指定需要的依赖"><a href="#8-0-3-子项目中重新指定需要的依赖" class="headerlink" title="8.0.3. 子项目中重新指定需要的依赖"></a>8.0.3. 子项目中重新指定需要的依赖</h3><p>子工程的pom.xml文件中设置，需要删除<strong>范围</strong>和<strong>版本号</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-0-4-注意"><a href="#8-0-4-注意" class="headerlink" title="8.0.4. 注意"></a>8.0.4. 注意</h3><p>配置继承后，执行安装命令时要先安装父工程</p>
<h2 id="9-聚合"><a href="#9-聚合" class="headerlink" title="9. 聚合"></a>9. 聚合</h2><p>使用了聚合之后就可以<strong>批量</strong>进行 Maven工程的安装、清理工作。 </p>
<h3 id="9-0-配置聚合"><a href="#9-0-配置聚合" class="headerlink" title="9.0. 配置聚合"></a>9.0. 配置聚合</h3><p>在总的聚合工程中使用 modules/module 标签组合，指定模块工程的相对路径即可 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hello<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../HelloFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../MakeFriends<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用方式：在聚合工程的pom.xml文件上右键–&gt;run as–&gt;maven install</p>
<h2 id="10-其他注意项"><a href="#10-其他注意项" class="headerlink" title="10. 其他注意项"></a>10. 其他注意项</h2><h3 id="10-0-修改Maven的JDK版本"><a href="#10-0-修改Maven的JDK版本" class="headerlink" title="10.0. 修改Maven的JDK版本"></a>10.0. 修改Maven的JDK版本</h3><p>在本地Maven的配置文件里修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-18<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目构建工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Java基础语法</title>
    <url>/2020/03/15/%E7%AC%94%E8%AE%B0-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>标识符、变量、数据类型、算数运算符的基本介绍</p>
<a id="more"></a>

<h1 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h1><h2 id="0-标识符"><a href="#0-标识符" class="headerlink" title="0. 标识符"></a>0. 标识符</h2><p>对变量、方法和类等命名时使用的字符序列即标识符。关键字是JDK定义的标识符</p>
<h3 id="0-0-标识符的命名规则"><a href="#0-0-标识符的命名规则" class="headerlink" title="0.0. 标识符的命名规则"></a>0.0. 标识符的命名规则</h3><ul>
<li>Java的标识符只能使用26个英文字母大小写，0-9的数字，下划线_和美元符号$</li>
<li>标识符中不能包含空格</li>
<li>数字不能开头</li>
<li>不能使用关键字、保留字和特殊值(true,false,null)</li>
<li>Java严格区分大小写</li>
<li>Java标识符没有长度限制，但不宜太长</li>
</ul>
<h3 id="0-1-标识符的命名规范"><a href="#0-1-标识符的命名规范" class="headerlink" title="0.1. 标识符的命名规范"></a>0.1. 标识符的命名规范</h3><p>总原则：见名知意</p>
<h4 id="0-1-0-类名、接口名"><a href="#0-1-0-类名、接口名" class="headerlink" title="0.1.0. 类名、接口名"></a>0.1.0. 类名、接口名</h4><p>所有单词首字母大写。例：XxxYyyZzz</p>
<h4 id="0-1-1-变量名"><a href="#0-1-1-变量名" class="headerlink" title="0.1.1. 变量名"></a>0.1.1. 变量名</h4><p>第一个单词首字母小写，其余单词首字母大写。例：xxxYyyZzz</p>
<h4 id="0-1-2-包名"><a href="#0-1-2-包名" class="headerlink" title="0.1.2. 包名"></a>0.1.2. 包名</h4><p>所有字母都小写，单词之间使用  .  分割。例：xxx.yyy.zzz</p>
<h4 id="0-1-3-常量名"><a href="#0-1-3-常量名" class="headerlink" title="0.1.3. 常量名"></a>0.1.3. 常量名</h4><p>所有字母都大写，单词之间使用下划线_。例：XXX_YYY_ZZZ    </p>
<h4 id="0-1-4-关键字"><a href="#0-1-4-关键字" class="headerlink" title="0.1.4. 关键字"></a>0.1.4. 关键字</h4><p>所有关键字全部小写</p>
<h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><p>变量，内存的一块存储区域</p>
<h3 id="1-0-变量三要素"><a href="#1-0-变量三要素" class="headerlink" title="1.0. 变量三要素"></a>1.0. 变量三要素</h3><ul>
<li>变量名：有名字的存储区域，不需要内存地址访问</li>
<li>字面值：这块内存中存的数据</li>
<li>数据类型：决定了这块内存的大小</li>
</ul>
<h3 id="1-1-变量类型"><a href="#1-1-变量类型" class="headerlink" title="1.1. 变量类型"></a>1.1. 变量类型</h3><ul>
<li>静态变量(类变量)：从属于类，独立于方法之外，用static修饰，存储在方法区内存中</li>
<li>实例变量(成员变量)：从属于对象，独立于方法之外，无static修饰，存储在堆内存中</li>
<li>局部变量：从属于方法，存储在方法区内存中</li>
</ul>
<h3 id="1-2-使用要求"><a href="#1-2-使用要求" class="headerlink" title="1.2. 使用要求"></a>1.2. 使用要求</h3><ul>
<li>先声明后使用，使用之前需赋值</li>
<li>变量在一行上可声明多个</li>
<li>变量的作用域：从声明处开始，到它所属的  <strong>}</strong>  结束；同意作用域不能声明同一变量</li>
</ul>
<h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h2><h3 id="2-0-基本数据类型"><a href="#2-0-基本数据类型" class="headerlink" title="2.0. 基本数据类型"></a>2.0. 基本数据类型</h3><h4 id="2-0-0-整型"><a href="#2-0-0-整型" class="headerlink" title="2.0.0. 整型"></a>2.0.0. 整型</h4><p>byte：占1字节；存储范围：-128~127</p>
<p>short：占2字节；存储范围：-32768~32767</p>
<p>int：占4字节；存储范围：-2147483648~2147483647(约21亿)；整型的默认类型</p>
<p>long：占8 字节；需在数字后加L或小写的l</p>
<p>Java中整型常量的四种表现形式：</p>
<ul>
<li>十进制整数：99，-500，0等</li>
<li>八进制整数：以0开头，如：015</li>
<li>十六进制整数：以0x或0X开头，如：0x15</li>
<li>二进制整数：以0b或0B开头，如：0b0111011</li>
</ul>
<h4 id="2-0-1-浮点型"><a href="#2-0-1-浮点型" class="headerlink" title="2.0.1. 浮点型"></a>2.0.1. 浮点型</h4><p>float：占4 个字节；单精度，尾数精确到7位有效数字；需要在数字后面加F或f</p>
<p>double：占8个字节；双精度，数值精度为float的两倍；浮点型的默认类型</p>
<blockquote>
<p><em>不要使用浮点数进行比较，用BigDecimal类！！！*</em></p>
</blockquote>
<h4 id="2-0-2-字符型"><a href="#2-0-2-字符型" class="headerlink" title="2.0.2. 字符型"></a>2.0.2. 字符型</h4><p>char：占2个字节；存储的是字符的Unicode编码值</p>
<p>char的三种写法：</p>
<ul>
<li>写单字符。例：’A’</li>
<li>当作转义字符：<ul>
<li>\b(退格)；Unicode值：\u0008</li>
<li>\r(回车)；Unicode值：\u000d</li>
<li>\n(换行)；Unicode值：\u000a</li>
<li>\(反斜杠)；Unicode值：\u005c</li>
<li>&#39;(单引号)；Unicode值：\u0027</li>
<li>&quot;(双引号)；Unicode值：\u0022</li>
<li>\t(制表符)；Unicode值：\u0009</li>
</ul>
</li>
</ul>
<h4 id="2-0-3-布尔型"><a href="#2-0-3-布尔型" class="headerlink" title="2.0.3. 布尔型"></a>2.0.3. 布尔型</h4><p>bolean：只能赋值为true或false</p>
<h4 id="2-0-4-基本类型的转换"><a href="#2-0-4-基本类型的转换" class="headerlink" title="2.0.4. 基本类型的转换"></a>2.0.4. 基本类型的转换</h4><ol>
<li><p>自动类型转换</p>
<p>byte,short,char –&gt;int -&gt;long –&gt;float –&gt;double</p>
<ul>
<li>byte,short,char只要算术运算都会升级为int或以上</li>
<li>例：byte + byte升级为int；byte + double 升级为double；byte + short升级int</li>
<li><strong>int-&gt;float</strong>或<strong>long-&gt;float</strong>或<strong>long-&gt;double</strong>有精度损失</li>
<li>可以将整数型常量直接赋给<strong>btye,short,char</strong>类型的变量(特例)</li>
<li>boolean不参与</li>
<li>和字符串拼接的结果都是String字符串</li>
</ul>
</li>
<li><p>强制类型转换</p>
<p>double–&gt;float–&gt;long–&gt;int–&gt;byte,short,char</p>
<ul>
<li>例：char c = (char)97;相当于把’a’字符赋值给 变量c</li>
<li>需要强制类型转换符。<ul>
<li>例：long n1 = 9; int n2 = (int) n1;</li>
<li>long类型的<code>n1</code>想赋值给<code>n2</code>，就需通过<code>(int)</code>来强制转换有可能溢出或损失精度，转换需谨慎    </li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="2-1-引用数据类型"><a href="#2-1-引用数据类型" class="headerlink" title="2.1. 引用数据类型"></a>2.1. 引用数据类型</h3><p>类、接口、数组、枚举……</p>
<h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. 运算符</h2><h3 id="3-0-算数运算符"><a href="#3-0-算数运算符" class="headerlink" title="3.0. 算数运算符"></a>3.0. 算数运算符</h3><p>+、-、*、/、%(取模)、++(自增)、–(自减)</p>
<p>注：当整数与整数相除，结果只保留整数部分</p>
<ul>
<li>当整数与整数相除，被除数/除数 ，除数不能为0，否则报异常</li>
<li>当浮点数相除，如果除数为0，结果是无穷大，非数字</li>
</ul>
<p>关于++和–，以++为例来说明。对于变量来说，最后一定会自增1或自减1；但对于表达式来说，运算过程要看自增/自减符号在前或在后。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = i ++;</span><br><span class="line">System.out.println(i);<span class="comment">// i的结果为1</span></span><br><span class="line">System.out.println(i);<span class="comment">// j的结果为0</span></span><br><span class="line"><span class="comment">// 运算的大概过程：因为 ++ 在后，所以i的值会先赋给j,此时i = j = 0。然后i再自增。所以最后结果i为1，j为0。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = ++ i;</span><br><span class="line">System.out.println(i);<span class="comment">// i的结果为1</span></span><br><span class="line">System.out.println(i);<span class="comment">// j的结果为1</span></span><br><span class="line"><span class="comment">// 运算的大概过程：因为 ++ 在后，所以i会先自增。此时i = 0;j = 0(系统默认值)。然后i的值再赋给j,所以最后结果i为1，j为0。</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-赋值运算符"><a href="#3-1-赋值运算符" class="headerlink" title="3.1. 赋值运算符"></a>3.1. 赋值运算符</h3><h4 id="3-1-0-基本赋值运算符"><a href="#3-1-0-基本赋值运算符" class="headerlink" title="3.1.0. 基本赋值运算符"></a>3.1.0. 基本赋值运算符</h4><p>= : 把右边的结果赋值给左边的变量</p>
<h4 id="3-1-1-扩展赋值运算符"><a href="#3-1-1-扩展赋值运算符" class="headerlink" title="3.1.1. 扩展赋值运算符"></a>3.1.1. 扩展赋值运算符</h4><p>+=、-=</p>
<p>隐含<strong>强制类型转换</strong>。例：short s = 1; s += 1;  等价于 s = (short) (s + 1);</p>
<h3 id="3-2-比较运算符"><a href="#3-2-比较运算符" class="headerlink" title="3.2. 比较运算符"></a>3.2. 比较运算符</h3><p>&gt;、&lt;、&gt;=、&lt;=、==、!=</p>
<p>使用该运算符的结果一定为<strong>布尔值</strong>。常用于条件表达式</p>
<h3 id="3-3-三目运算符"><a href="#3-3-三目运算符" class="headerlink" title="3.3. 三目运算符"></a>3.3. 三目运算符</h3><p>格式：条件表达式 ? 表达式1 : 表达式2</p>
<p>如果条件表达式为true，取表达式1的结果，否则取表达式2的结果</p>
<h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4. 逻辑运算符"></a>3.4. 逻辑运算符</h3><h4 id="3-4-0-amp"><a href="#3-4-0-amp" class="headerlink" title="3.4.0. &amp;"></a>3.4.0. &amp;</h4><p>逻辑与。全真为真，一假为假</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">true</span>  &amp; <span class="keyword">true</span> = <span class="keyword">true</span>; <span class="keyword">true</span> &amp; <span class="keyword">false</span> = <span class="keyword">false</span>; <span class="keyword">false</span> &amp; <span class="keyword">true</span> = <span class="keyword">false</span>; <span class="keyword">false</span> &amp; <span class="keyword">false</span> = <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-1"><a href="#3-4-1" class="headerlink" title="3.4.1. |"></a>3.4.1. |</h4><p>逻辑或。全假为假，一真为真</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">true</span>  | <span class="keyword">true</span> = <span class="keyword">true</span>; <span class="keyword">true</span> | <span class="keyword">false</span> = <span class="keyword">true</span>; <span class="keyword">false</span> | <span class="keyword">true</span> = <span class="keyword">true</span>; <span class="keyword">false</span> | <span class="keyword">false</span> = <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-2"><a href="#3-4-2" class="headerlink" title="3.4.2. ^"></a>3.4.2. ^</h4><p>逻辑异或。不同为真，相同为假</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">true</span>  ^ <span class="keyword">true</span> = <span class="keyword">false</span>; <span class="keyword">true</span> ^ <span class="keyword">false</span> = <span class="keyword">true</span>; <span class="keyword">false</span> ^ <span class="keyword">true</span> = <span class="keyword">true</span>; <span class="keyword">false</span> ^ <span class="keyword">false</span> = <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-3-！"><a href="#3-4-3-！" class="headerlink" title="3.4.3. ！"></a>3.4.3. ！</h4><p>逻辑非。真即假来假似真</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">false</span> = <span class="keyword">true</span>; !<span class="keyword">false</span> = <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-4-amp-amp"><a href="#3-4-4-amp-amp" class="headerlink" title="3.4.4. &amp;&amp;"></a>3.4.4. &amp;&amp;</h4><p>短路与。与<strong>&amp;</strong>一样，唯一不同的是，如果左边的表达式为false，右边的表达式就不计算了，出现短路现象</p>
<h4 id="3-4-5"><a href="#3-4-5" class="headerlink" title="3.4.5. ||"></a>3.4.5. ||</h4><p>短路或。与<strong>|</strong>一样，唯一不同的是，如果左边的表达式为true，右边的表达式就不计算了，出现短路现象</p>
<h3 id="3-5-位运算符"><a href="#3-5-位运算符" class="headerlink" title="3.5. 位运算符"></a>3.5. 位运算符</h3><h3 id="3-5-0-lt-lt"><a href="#3-5-0-lt-lt" class="headerlink" title="3.5.0. &lt;&lt;"></a>3.5.0. &lt;&lt;</h3><p>左移。相当于乘以 2 的几次方。例：1 &lt;&lt; 3  相当于1 乘以 2的3次方</p>
<p>右边补0(针对于二进制)</p>
<h4 id="3-5-1-gt-gt"><a href="#3-5-1-gt-gt" class="headerlink" title="3.5.1. &gt;&gt;"></a>3.5.1. &gt;&gt;</h4><p>右移。相当于除以2的几次方。例：16 &gt;&gt; 3 相当于16除以 2的3次方</p>
<p>左边补什么，要看最高位，最高位是1，就补1，是0就补0((针对于二进制))</p>
<h4 id="3-5-2-gt-gt-gt"><a href="#3-5-2-gt-gt-gt" class="headerlink" title="3.5.2. &gt;&gt;&gt;"></a>3.5.2. &gt;&gt;&gt;</h4><p>无符号右移。不管最高位是什么，左边都补0。结果一定是正数</p>
<h4 id="3-5-3-amp"><a href="#3-5-3-amp" class="headerlink" title="3.5.3. &amp;"></a>3.5.3. &amp;</h4><p>按位与。例子待定</p>
<h4 id="3-5-4"><a href="#3-5-4" class="headerlink" title="3.5.4. |"></a>3.5.4. |</h4><p>按位或。例子待定</p>
<h4 id="3-5-5"><a href="#3-5-5" class="headerlink" title="3.5.5. ^"></a>3.5.5. ^</h4><p>按位异或。例子待定</p>
<h4 id="3-5-6"><a href="#3-5-6" class="headerlink" title="3.5.6. ~"></a>3.5.6. ~</h4><p>按位取反。例子待定</p>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Java常用API</title>
    <url>/2020/04/05/%E7%AC%94%E8%AE%B0-JavaAPI/</url>
    <content><![CDATA[<p>简述几种常用JavaAPI的用法</p>
<a id="more"></a>

<h1 id="Java常用API"><a href="#Java常用API" class="headerlink" title="Java常用API"></a>Java常用API</h1><h2 id="0-java-lang-Object"><a href="#0-java-lang-Object" class="headerlink" title="0. java.lang.Object"></a>0. java.lang.Object</h2><h3 id="0-0-简单叙述"><a href="#0-0-简单叙述" class="headerlink" title="0.0. 简单叙述"></a>0.0. 简单叙述</h3><p>它是所有类型的根父类。一个类如果没有显式声明它的父类，那这个类的直接父类就是Object</p>
<h3 id="0-1-特点"><a href="#0-1-特点" class="headerlink" title="0.1. 特点"></a>0.1. 特点</h3><ul>
<li>Object类的所有方法，在所有对象中都有，包括数组对象</li>
<li>Object类的变量或形参可以接受任意类型的对象</li>
<li>Object[] 类型的数组可以接受任意类型的对象作为它的元素</li>
<li>所有对象创建时，都会调用<strong>Object的无参构造</strong></li>
</ul>
<h3 id="0-2-常用方法"><a href="#0-2-常用方法" class="headerlink" title="0.2. 常用方法"></a>0.2. 常用方法</h3><h4 id="0-2-0-protected-Object-clone"><a href="#0-2-0-protected-Object-clone" class="headerlink" title="0.2.0. protected Object clone()"></a>0.2.0. protected Object clone()</h4><p>要想使用该方法，Objectd的子类需要实现<strong>Cloneable接口</strong>，否则会报CloneNotSupportedException</p>
<h4 id="0-2-1-public-boolean-equals-Object-obj"><a href="#0-2-1-public-boolean-equals-Object-obj" class="headerlink" title="0.2.1. public boolean equals (Object obj)"></a>0.2.1. public boolean equals (Object obj)</h4><p>用来指示某个对象obj是否与此对象的this相等。<br>Object类中的equals方法，等价于“==”，比较的是对象的地址<br>如果Object的子类要比较的是属性的内容，需要<strong>重写equals方法</strong></p>
<h5 id="重写equals的示例"><a href="#重写equals的示例" class="headerlink" title="重写equals的示例"></a>重写equals的示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 有参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 类型判断。如果传入的obj不是Person类型，则返回false</span></span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Person)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果传入的obj为空，则返回false</span></span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果传入的obj和当前对象的内存地址相同，则返回true</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向下转型，Object 转为 Person</span></span><br><span class="line">        Person per = (Person) obj;</span><br><span class="line">        <span class="comment">// 当前对象和传入的obj进行各项值的比较</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(per.name) &amp;&amp; <span class="keyword">this</span>.age == per.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person perA = <span class="keyword">new</span> Person(<span class="string">"李三"</span>, <span class="number">20</span>);</span><br><span class="line">        Person perB = <span class="keyword">new</span> Person(<span class="string">"李三"</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(perA.equals(perB));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0-2-2-public-int-hashCode"><a href="#0-2-2-public-int-hashCode" class="headerlink" title="0.2.2. public int hashCode()"></a>0.2.2. public int hashCode()</h4><p>Object类中的这个方法返回的是和“地址”相关的值<br><strong>如果重写了equals方法，那么必须重写hashCode方法，而且参与equals比较的属性，一定要参与hahCode的计算</strong></p>
<h5 id="与equals的关系"><a href="#与equals的关系" class="headerlink" title="与equals的关系"></a>与equals的关系</h5><ul>
<li>两个对象的equals()返回true，两个对象的hashCode值<strong>一定相等</strong></li>
<li>两个对象的hashCode值不相等，两个对象equals方法结果<strong>一定不相等</strong></li>
<li>两个对象的hashCode值相等，两个对象equals方法结果<strong>不一定相等</strong></li>
</ul>
<h4 id="0-2-3-public-final-Class-lt-gt-getClass"><a href="#0-2-3-public-final-Class-lt-gt-getClass" class="headerlink" title="0.2.3. public final Class&lt;?&gt; getClass()"></a>0.2.3. public final Class&lt;?&gt; getClass()</h4><p>返回某个对象的运行时类，而不是编译时类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得类名 + 包名 （完整路径  全限定类名）</span></span><br><span class="line">        System.out.println(stu.getClass().getName());</span><br><span class="line">        <span class="comment">// 只是获得类名</span></span><br><span class="line">        System.out.println(stu.getClass().getSimpleName());</span><br><span class="line">        <span class="comment">// 获得首行的代码，即获得包名</span></span><br><span class="line">        System.out.println(stu.getClass().getPackage());</span><br><span class="line">        <span class="comment">// 类对象的运行时类的Class对象</span></span><br><span class="line">        System.out.println(stu.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0-2-4-public-String-toString"><a href="#0-2-4-public-String-toString" class="headerlink" title="0.2.4. public String toString()"></a>0.2.4. public String toString()</h4><p>在Object中默认返回的是这个对象的<strong>运行时类型@这个对象的hash值的十六进制表现形式</strong><br><strong>子类完全可以重写toString方法</strong></p>
<h4 id="0-2-5-protected-void-finalize"><a href="#0-2-5-protected-void-finalize" class="headerlink" title="0.2.5. protected void finalize()"></a>0.2.5. protected void finalize()</h4><p>当这个对象被垃圾回收机制回收之前调用，而且<strong>只会调用一次</strong>。</p>
<h2 id="1-包装类"><a href="#1-包装类" class="headerlink" title="1. 包装类"></a>1. 包装类</h2><blockquote>
<p>包装类是针对八种基本数据类型定义的相应类<br><strong>包装类对象可直接参与数值计算</strong></p>
</blockquote>
<p>分为两种类型：</p>
<ul>
<li>对象型包装类：Boolean、Character。它们是Object的直接子类</li>
<li>数值型包装类：Byte、Short、Integer、Long、Float、Double。它们是Number的直接子类</li>
</ul>
<h3 id="1-0-装箱与拆箱"><a href="#1-0-装箱与拆箱" class="headerlink" title="1.0. 装箱与拆箱"></a>1.0. 装箱与拆箱</h3><h4 id="1-0-0-手动装箱与拆箱"><a href="#1-0-0-手动装箱与拆箱" class="headerlink" title="1.0.0. 手动装箱与拆箱"></a>1.0.0. 手动装箱与拆箱</h4><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 手动装箱。基本数据类型---&gt;包装类，调用包装类的构造器</span></span><br><span class="line">        Integer obj = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">        System.out.println(obj.toString());<span class="comment">// 10</span></span><br><span class="line">        <span class="comment">// 手动拆箱。包装类---&gt;基本数据类型，调用的是包装类的xxxValue()</span></span><br><span class="line">        <span class="keyword">int</span> num = obj.intValue();</span><br><span class="line">        System.out.println(num);<span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-0-1-自动装箱与拆箱"><a href="#1-0-1-自动装箱与拆箱" class="headerlink" title="1.0.1. 自动装箱与拆箱"></a>1.0.1. 自动装箱与拆箱</h4><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自动装箱。int 类型在赋值到 Integer 类时，会自动封装，调用 Integer 的 valueOf(int i) 方法。不需关心构造方法</span></span><br><span class="line">        Integer obj = <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 自动拆箱。等价于调用intValue()</span></span><br><span class="line">        <span class="keyword">int</span> num = obj;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 包装类对象可以直接参与数值计算</span></span><br><span class="line">        obj ++;</span><br><span class="line">        System.out.println(num * obj);<span class="comment">// 110</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-1-包装类的缓存问题"><a href="#1-1-包装类的缓存问题" class="headerlink" title="1.1. 包装类的缓存问题"></a>1.1. 包装类的缓存问题</h3><p>Byte、Short、Integer、Long内有缓存结构，缓存范围：-128~127<br>Float、Double没有缓存<br>Character有缓存，缓存范围：0~127</p>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer numA1 = <span class="number">100</span>;<span class="comment">// 在-128～127之间</span></span><br><span class="line">        Integer numA2 = <span class="number">100</span>;<span class="comment">// 在-128～127之间</span></span><br><span class="line">        System.out.println(numA1 == numA2);<span class="comment">// true</span></span><br><span class="line">        Integer numB1 = <span class="number">130</span>;<span class="comment">// 不在-128～127之间,相当于new了一个Integer对象</span></span><br><span class="line">        Integer numB2 = <span class="number">130</span>;<span class="comment">// 不在-128～127之间，相当于又new了一个Integer对象</span></span><br><span class="line">        System.out.println(numB1 == numB2);<span class="comment">// false</span></span><br><span class="line">        System.out.println(numB1.equals(numB2));<span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述numB1 == numB2 为false的原因： Integer内部定义了I<strong>ntegerCache结构</strong>，IntegerCache中定义了Integer[],保存了<strong>-128～127范围</strong>的整数。如果自动装箱时，给Integer赋值的范围在-128~127之间，可直接使用数组中的元素，不用再new了。</p>
<h2 id="2-String与基本数据类型的相互转换"><a href="#2-String与基本数据类型的相互转换" class="headerlink" title="2. String与基本数据类型的相互转换"></a>2. String与基本数据类型的相互转换</h2><h3 id="2-0-String转为基本数据类型"><a href="#2-0-String转为基本数据类型" class="headerlink" title="2.0. String转为基本数据类型"></a>2.0. String转为基本数据类型</h3><p>可以用以下几种方法进行转换</p>
<ul>
<li>调用<strong>public static int parseInt(String s)</strong>：如果入参包含非数字字符，会报错</li>
<li>调用<strong>public static parseInt(String s, int radix)</strong>：可以包含字母，但要在基数范围内。例如基数radix是20，可以包含的范围是0~9，a,b,c,d,e,f,g,h,i,j</li>
<li>调用<strong>public static Integer valueOf(String s)</strong></li>
<li>调用<strong>public static Integer valueOf(String s, int radix)</strong></li>
</ul>
<h3 id="2-1-基本数据类型转为String"><a href="#2-1-基本数据类型转为String" class="headerlink" title="2.1. 基本数据类型转为String"></a>2.1. 基本数据类型转为String</h3><ul>
<li><p>用加号“+”连接空字符串“”进行转换。需单独声明字符串常量，但会有垃圾产生</p>
</li>
<li><p>调用<strong>String</strong>的<strong>valueOf(xxx)</strong>方法。转换中不会产生垃圾</p>
</li>
<li><p>其他方法：</p>
<p>以Integer为例，可以调用其中的静态方法转换为各种进制</p>
<ul>
<li><strong>public static String toBinaryString(int i)</strong>：转为二进制的形式</li>
<li><strong>public static String toOctalString(int i)</strong>：转为八进制的形式</li>
<li><strong>public static String toHexString(int i)</strong>：转为十六进制的形式</li>
</ul>
</li>
</ul>
<h3 id="2-2-Character的几个方法"><a href="#2-2-Character的几个方法" class="headerlink" title="2.2. Character的几个方法"></a>2.2. Character的几个方法</h3><ul>
<li><strong>public static char toLowerCase(char c)</strong>：转小写</li>
<li><strong>public static char toUpperCase(char c)</strong>：转大写</li>
<li><strong>public static boolean isDigit(char c)</strong>：判断是否为数字字符</li>
<li><strong>public static boolean isLetter(char c)</strong>：判断是否为字母字符</li>
<li><strong>public static boolean isWhitespace(char c)</strong>：判断是否为空格字符</li>
</ul>
<h2 id="3-基本类型、包装类、String三者之间的转换图示"><a href="#3-基本类型、包装类、String三者之间的转换图示" class="headerlink" title="3. 基本类型、包装类、String三者之间的转换图示"></a>3. 基本类型、包装类、String三者之间的转换图示</h2><p><img src="/2020/04/05/%E7%AC%94%E8%AE%B0-JavaAPI/%E4%B8%89%E8%80%85%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" alt="转换图"></p>
<h2 id="4-java-lang-String"><a href="#4-java-lang-String" class="headerlink" title="4. java.lang.String"></a>4. java.lang.String</h2><h3 id="4-0-字符串类型的特点"><a href="#4-0-字符串类型的特点" class="headerlink" title="4.0. 字符串类型的特点"></a>4.0. 字符串类型的特点</h3><ul>
<li>String不能被继承，因为String是<strong>final修饰</strong>的类</li>
<li>String对象是常量对象，一旦创建就不能修改，<strong>一旦修改就是新对象</strong></li>
<li>String常量对象在<strong>常量池</strong>中，常量池在方法区(JDK1.6)，堆(JDK1.7)，元空间(JDK1.8)中</li>
<li>用<code>直接赋值实例化</code>的方式，<strong>只会开启一块内存空间</strong>；用<code>构造方法实例化</code>的方式，<strong>会开启两块内存空间</strong></li>
<li>字符串字面量是String的<strong>匿名对象</strong></li>
<li>String底层使用字符数组(JDK1.9前，用private final修饰)，字节数组(JDK1.9后)</li>
</ul>
<h3 id="4-1-String常用方法"><a href="#4-1-String常用方法" class="headerlink" title="4.1. String常用方法"></a>4.1. String常用方法</h3><h4 id="4-1-0-String的构造方法"><a href="#4-1-0-String的构造方法" class="headerlink" title="4.1.0. String的构造方法"></a>4.1.0. String的构造方法</h4><h5 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorTest02</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认没有任何指向，为null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String str2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String str1 = <span class="keyword">new</span>  String();</span><br><span class="line">        System.out.println(str1);<span class="comment">// 打印了一个空字符串""</span></span><br><span class="line">        System.out.println(str2);<span class="comment">// null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="参数为byte-的构造方法"><a href="#参数为byte-的构造方法" class="headerlink" title="参数为byte[]的构造方法"></a>参数为byte[]的构造方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorTest02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String str2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> [] bytes = <span class="keyword">new</span> <span class="keyword">byte</span> [] &#123;<span class="number">15</span>,<span class="number">64</span>,<span class="number">51</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">15</span>&#125;;</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(bytes);</span><br><span class="line">        System.out.println(str2);<span class="comment">// @3</span></span><br><span class="line"></span><br><span class="line">        String str3 = <span class="keyword">new</span> String(bytes, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(str3);<span class="comment">// @3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="参数为char-的构造方法"><a href="#参数为char-的构造方法" class="headerlink" title="参数为char[]的构造方法"></a>参数为char[]的构造方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorTest02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String str2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> [] chars = <span class="keyword">new</span> <span class="keyword">char</span> [] &#123;<span class="string">'3'</span>,<span class="string">'5'</span>,<span class="string">'g'</span>,<span class="string">'6'</span>,<span class="string">'u'</span>&#125;;</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(chars);</span><br><span class="line">        System.out.println(str3);<span class="comment">// 35g6u</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="参数为字符串的构造方法"><a href="#参数为字符串的构造方法" class="headerlink" title="参数为字符串的构造方法"></a>参数为字符串的构造方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str4 = <span class="keyword">new</span> String(<span class="string">"uuuuy"</span>);</span><br><span class="line">        System.out.println(str4);<span class="comment">// uuuuy</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-1-1-基本方法"><a href="#4-1-1-基本方法" class="headerlink" title="4.1.1. 基本方法"></a>4.1.1. 基本方法</h4><h5 id="字符串的长度"><a href="#字符串的长度" class="headerlink" title="字符串的长度"></a>字符串的长度</h5><p><strong>public int length()</strong></p>
<p>返回此字符串的长度，即字符的个数</p>
<h5 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h5><p><strong>public boolean equals (Object anObject)</strong></p>
<p>将此字符串与指定对象进行比较<br>String的equals方法进行了重写<br>该方法<strong>严格区分大小写</strong></p>
<p><strong>public boolean equalsIgnoreCase (String anotherString)</strong></p>
<p>将此字符串与其他字符串进行比较<br><strong>忽略大小写</strong></p>
<p><strong>public int compareTo (String anotherString)</strong></p>
<p>自然排序<br>按字典顺序比较两个字符串。根据字符串中每个字符的Unicode值进行比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"mldn"</span>;</span><br><span class="line">        System.out.println(<span class="string">"MLDN"</span>.equals(str));<span class="comment">// false 区分大小写的内容比较</span></span><br><span class="line">        System.out.println(<span class="string">"MLDN"</span>.equalsIgnoreCase(str));<span class="comment">// true 忽略大小写的内容比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo_3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"mldn"</span>;</span><br><span class="line">        String str2 = <span class="string">"mldN"</span>;</span><br><span class="line">        System.out.println(str1.compareTo(str2));<span class="comment">// 32，正数表示大于</span></span><br><span class="line">        System.out.println(str2.compareTo(str1));<span class="comment">// -32，负数表示小于</span></span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>.compareTo(<span class="string">"Hello"</span>));<span class="comment">// 0，表示相等</span></span><br><span class="line">        System.out.println(str1.compareToIgnoreCase(str2));<span class="comment">// 0 忽略大小写的比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="去字符串的前后空格"><a href="#去字符串的前后空格" class="headerlink" title="去字符串的前后空格"></a>去字符串的前后空格</h5><p><strong>public String trim()</strong></p>
<p>去掉此字符串的前后空格，不包括中间的空格，并将修改后的字符串返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"  MLDN Java  "</span>;</span><br><span class="line">        <span class="comment">// 长度计算（包括空格）</span></span><br><span class="line">        System.out.println(str.length());<span class="comment">// 13</span></span><br><span class="line">        <span class="comment">// 去掉前后空格（保留中间空格）</span></span><br><span class="line">        String trimStr = str.trim();</span><br><span class="line">        <span class="comment">// 原始字符串</span></span><br><span class="line">        System.out.println(str);<span class="comment">//   MLDN Java  </span></span><br><span class="line">        <span class="comment">// trim()处理后的字符串</span></span><br><span class="line">        System.out.println(trimStr);<span class="comment">// MLDN Java</span></span><br><span class="line">        <span class="comment">// trim()处理后的字符串长度</span></span><br><span class="line">        System.out.println(trimStr.length());<span class="comment">// 9</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="字符串转大小写"><a href="#字符串转大小写" class="headerlink" title="字符串转大小写"></a>字符串转大小写</h5><p><strong>public String toUpperCase ()</strong></p>
<p><strong>public String toLowerCase ()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"www.MLDNJava.cn"</span>;</span><br><span class="line">        <span class="comment">// 转大写</span></span><br><span class="line">        System.out.println(str.toUpperCase());<span class="comment">// WWW.MLDNJAVA.CN</span></span><br><span class="line">        <span class="comment">// 转小写</span></span><br><span class="line">        System.out.println(str.toLowerCase());<span class="comment">// www.mldnjava.cn</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="是否是空字符串"><a href="#是否是空字符串" class="headerlink" title="是否是空字符串"></a>是否是空字符串</h5><p>方式一</p>
<p>“”.equals(字符串)</p>
<p>方式二</p>
<p><strong>public boolean isEmpty ()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        System.out.println(str.isEmpty());<span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">"mldn"</span>.isEmpty());<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="和字节相关"><a href="#和字节相关" class="headerlink" title="和字节相关"></a>和字节相关</h5><h6 id="编码：把字符串转成字节数组"><a href="#编码：把字符串转成字节数组" class="headerlink" title="编码：把字符串转成字节数组"></a>编码：把字符串转成字节数组</h6><p><strong>public byte[] getBytes ()</strong>：使用平台默认的编码方式进行编码</p>
<p><strong>public byte[] getBytes (Charset charset)</strong>：按指定的编码方式进行编码</p>
<p>……</p>
<h6 id="解码：把字节数组转成字符串"><a href="#解码：把字节数组转成字符串" class="headerlink" title="解码：把字节数组转成字符串"></a>解码：把字节数组转成字符串</h6><p><strong>public String (byte[] bytes)</strong></p>
<p><strong>public String (byte[] bytes, int offset, int length)</strong></p>
<p><strong>public String (byte[] bytes, Charset charset)</strong></p>
<p>……</p>
<h5 id="和字符相关"><a href="#和字符相关" class="headerlink" title="和字符相关"></a>和字符相关</h5><p><strong>public char charAt (int index)</strong>：返回指定索引处的字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"www.mldn.cn"</span>;<span class="comment">// 字符串对象</span></span><br><span class="line">        <span class="keyword">char</span> c = str.charAt(<span class="number">6</span>);<span class="comment">// 获取索引为6的字符内容</span></span><br><span class="line">        System.out.println(c);<span class="comment">// 打印字符信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="把字符串转为字符数组"><a href="#把字符串转为字符数组" class="headerlink" title="把字符串转为字符数组"></a>把字符串转为字符数组</h6><p><strong>public char[] toCharArray ()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义字符串</span></span><br><span class="line">        String str = <span class="string">"mldnjava"</span>;</span><br><span class="line">        <span class="comment">// 将字符串转为字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] result = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; result.length;i ++) &#123;<span class="comment">// 循环字符数组</span></span><br><span class="line">            <span class="comment">// 编码减少32（大小写字母之间差32个编码）</span></span><br><span class="line">            result[i] -= <span class="number">32</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 处理后的字符数组变为字符串</span></span><br><span class="line">        String newStr = <span class="keyword">new</span> String(result);</span><br><span class="line">        <span class="comment">// 输出新的字符数组（MLDNJAVA）</span></span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">        <span class="comment">// 部分字符数组变为字符串</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(result,<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="把字符数组转字符串"><a href="#把字符数组转字符串" class="headerlink" title="把字符数组转字符串"></a>把字符数组转字符串</h6><p><strong>public String (char[])</strong></p>
<p><strong>public String (char[], int offset, int count)</strong>：<strong>offset</strong>表示第一个被截取的字符在数组value[]中的下标，<strong>count</strong>表示从此字符开始向后截取的字符的数量</p>
<p>……</p>
<h5 id="是否以xx开头和结尾"><a href="#是否以xx开头和结尾" class="headerlink" title="是否以xx开头和结尾"></a>是否以xx开头和结尾</h5><p><strong>public boolean startsWith (String prefix)</strong>：测试此字符串是否以指定前缀开头</p>
<p><strong>public boolean startsWith (String prefix, int toffset)</strong>：测试在指定索引处开始的此字符串的子字符串是否以指定的前缀开头。 </p>
<p><strong>public boolean endsWith (String suffix)</strong>：测试此字符串是否以指定后缀结尾</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"**@@www.mldn.cn##"</span>;</span><br><span class="line">        <span class="comment">// 从索引0开始判断是否以“**”开头</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"**"</span>));<span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 从索引2开始判断是否以“@@”开头</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"@@"</span>,<span class="number">2</span>));<span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 从结尾向前判断是否以“##”结尾</span></span><br><span class="line">        System.out.println(str.endsWith(<span class="string">"##"</span>));<span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="字符串的截取"><a href="#字符串的截取" class="headerlink" title="字符串的截取"></a>字符串的截取</h5><p><strong>public String subString (int beginIndex)</strong>：从<strong>指定索引</strong>截到最后</p>
<p><strong>public String subString (int beginIndex, int endIndex)</strong>：从开始索引截到结束索引，截取区间是<strong>闭区间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"www.mldn.cn"</span>;</span><br><span class="line">        <span class="comment">// 指定位置截取到结尾，mldn</span></span><br><span class="line">        System.out.println(str.substring(<span class="number">4</span>));</span><br><span class="line">        <span class="comment">// 截取指定索引范围内的字符串，mldn</span></span><br><span class="line">        System.out.println(str.substring(<span class="number">4</span>,<span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="字符串的拆分"><a href="#字符串的拆分" class="headerlink" title="字符串的拆分"></a>字符串的拆分</h5><p><strong>public String[] split (String regex)</strong></p>
<p><strong>public String[] split (String regex, int limit)</strong></p>
<h6 id="字符串全拆分"><a href="#字符串全拆分" class="headerlink" title="字符串全拆分"></a>字符串全拆分</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"mldn java yootk jikxianit"</span>;</span><br><span class="line">        <span class="comment">// 利用空格拆分</span></span><br><span class="line">        String result[] = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">// 循环输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; result.length;i ++) &#123;</span><br><span class="line">            <span class="comment">// 拆分结果：mldn、java、yootk、jixianit、</span></span><br><span class="line">            System.out.print(result[i] + <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="用空字符串拆分每一个字符"><a href="#用空字符串拆分每一个字符" class="headerlink" title="用空字符串拆分每一个字符"></a>用空字符串拆分每一个字符</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"mldn java "</span>;</span><br><span class="line">        <span class="comment">// 利用空字符串拆分</span></span><br><span class="line">        String result[] = str.split(<span class="string">""</span>);</span><br><span class="line">        <span class="comment">// 循环输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; result.length;i ++) &#123;</span><br><span class="line">            <span class="comment">// 拆分结果：m、l、d、n、 、j、a、v、a、 、</span></span><br><span class="line">            System.out.print(result[i] + <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="拆分指定长度的数组"><a href="#拆分指定长度的数组" class="headerlink" title="拆分指定长度的数组"></a>拆分指定长度的数组</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"mldn java  yootk jixianit"</span>;</span><br><span class="line">        String result[] = str.split(<span class="string">" "</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 循环输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; result.length;i ++) &#123;</span><br><span class="line">            <span class="comment">// 拆分结果：mldn、java yootk jixianit、</span></span><br><span class="line">            System.out.print(result[i] + <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="复杂拆分"><a href="#复杂拆分" class="headerlink" title="复杂拆分"></a>复杂拆分</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"张三:20|李四:21|王五:22 "</span>;</span><br><span class="line">        <span class="comment">// 第一次拆分</span></span><br><span class="line">        String result[] = str.split(<span class="string">"\\|"</span>);</span><br><span class="line">        <span class="comment">// 循环输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; result.length;i ++) &#123;</span><br><span class="line">            <span class="comment">// 第二次拆分</span></span><br><span class="line">            String temp[] = result[i].split(<span class="string">":"</span>);</span><br><span class="line">            <span class="comment">// 拆分结果： 姓名：张三，年龄20 </span></span><br><span class="line">            <span class="comment">//         姓名：李四，年龄21 </span></span><br><span class="line">            <span class="comment">//         姓名：王五，年龄22 </span></span><br><span class="line">            System.out.println(<span class="string">"姓名："</span> + temp[<span class="number">0</span>] + <span class="string">"，年龄"</span> + temp[<span class="number">1</span>] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="字符串的查找"><a href="#字符串的查找" class="headerlink" title="字符串的查找"></a>字符串的查找</h5><h6 id="是否包含"><a href="#是否包含" class="headerlink" title="是否包含"></a>是否包含</h6><p><strong>public boolean contains (CharSequence s)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"www.mldn.cn"</span>;</span><br><span class="line">        <span class="comment">// 判断字符串是否存在</span></span><br><span class="line">        System.out.println(str.contains(<span class="string">"mldn"</span>));<span class="comment">// 存在，返回true</span></span><br><span class="line">        System.out.println(str.contains(<span class="string">"hello"</span>));<span class="comment">// 不存在，返回false</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="查找索引位置"><a href="#查找索引位置" class="headerlink" title="查找索引位置"></a>查找索引位置</h6><p><strong>public int indexOf (String str)</strong>：返回指定子字符串第一次出现的索引，如不存在返回-1</p>
<p><strong>public int indexOf (int ch)</strong>：返回指定字符第一次出现的索引，如不存在返回-1</p>
<p><strong>public int lastIndexOf (int ch)</strong>：返回指定字符最后一次出现的索引，如不存在返回-1</p>
<p><strong>public int lastIndexOf (String str)</strong>：：返回指定子字符串最后一次出现的索引，如不存在返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"www.mldn.cn"</span>;</span><br><span class="line">        System.out.println(str.indexOf(<span class="string">"mldn"</span>));<span class="comment">// 4</span></span><br><span class="line">        <span class="comment">// -1，表示没有查询到</span></span><br><span class="line">        System.out.println(str.indexOf(<span class="string">"hello"</span>));</span><br><span class="line">        System.out.println(str.lastIndexOf(<span class="string">"."</span>));<span class="comment">// 8</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h5><p><strong>public String replace (CharSequence target, CharSequence replacement)</strong></p>
<p><strong>public String replaceAll (String regex, String replacement)</strong></p>
<p><strong>public String replaceFirst (String regex, String replacement)</strong></p>
<p>替换并不会改变原字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"www.mldn.cn"</span>;</span><br><span class="line">        System.out.println(str.replaceAll(<span class="string">"w"</span>,<span class="string">"_"</span>));<span class="comment">// 全部替换</span></span><br><span class="line">        System.out.println(str.replaceFirst(<span class="string">"w"</span>,<span class="string">"_"</span>));<span class="comment">// 替换首个</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h5><h6 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h6><p>用“+”拼接</p>
<h6 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h6><p><strong>public String concat (String str)</strong></p>
<p>将指定字符拼接到字符串后面，<strong>返回新的String对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"www.mldn.cn"</span>;</span><br><span class="line">        <span class="comment">// 字符串连接</span></span><br><span class="line">        String str2 = <span class="string">"www."</span>.concat(<span class="string">"mldn"</span>).concat(<span class="string">".cn"</span>);</span><br><span class="line">        System.out.println(str2);<span class="comment">// www.mldn.cn</span></span><br><span class="line">        System.out.println(str1 == str2);<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-java-lang-StringBuffer和java-lang-StringBuilder"><a href="#5-java-lang-StringBuffer和java-lang-StringBuilder" class="headerlink" title="5. java.lang.StringBuffer和java.lang.StringBuilder"></a>5. java.lang.StringBuffer和java.lang.StringBuilder</h2><h3 id="5-0-String、StringBuffer和StringBuilder的区别"><a href="#5-0-String、StringBuffer和StringBuilder的区别" class="headerlink" title="5.0. String、StringBuffer和StringBuilder的区别"></a>5.0. String、StringBuffer和StringBuilder的区别</h3><ul>
<li>StringBuffer是JDK1.0就有，线程安全；StringBuilder是JDK1.5引入的，线程不安全</li>
<li>StringBuilder速度稍快</li>
<li>String对象是常量对象，<strong>长度不变</strong>，StringBuffer和StringBuilder有字符串缓冲区，<strong>长度可变</strong></li>
<li>String每次拼接会产生新对象，StringBuffer和StringBuilder的append方法拼接不会产生新对象</li>
</ul>
<h3 id="5-1-常用方法"><a href="#5-1-常用方法" class="headerlink" title="5.1. 常用方法"></a>5.1. 常用方法</h3><h4 id="5-1-0-增"><a href="#5-1-0-增" class="headerlink" title="5.1.0. 增"></a>5.1.0. 增</h4><p>以StringBuffer为例，<strong>public StringBuffer append (Xxx xxx)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBufferTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer strbf = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">        strbf.append(<span class="string">"a"</span>).append(<span class="string">"b"</span>).append(<span class="string">"c"</span>);</span><br><span class="line">        System.out.println(strbf);<span class="comment">// abc</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-1-1-删"><a href="#5-1-1-删" class="headerlink" title="5.1.1. 删"></a>5.1.1. 删</h4><p><strong>public StringBuffer delete (int start, int end)</strong>：<strong>删除区间是前开后闭的</strong></p>
<h5 id="5-1-2-改"><a href="#5-1-2-改" class="headerlink" title="5.1.2. 改"></a>5.1.2. 改</h5><p><strong>public void setCharAt(int index, char ch)</strong>：Index是指定的索引，ch是需要替换的字符</p>
<p><strong>public StringBuffer replace (int start, int end, String str)</strong>：start是开始索引，end是结束索引，是前开后闭的区间。str是要替换的字符串</p>
<h4 id="5-1-3-查"><a href="#5-1-3-查" class="headerlink" title="5.1.3. 查"></a>5.1.3. 查</h4><p><strong>public char charAt (int index)</strong>：返回指定索引处的字符，Index为指定索引</p>
<h4 id="5-1-4-插"><a href="#5-1-4-插" class="headerlink" title="5.1.4. 插"></a>5.1.4. 插</h4><p><strong>public StringBuffer insert (int offset, Xxx xxx)</strong>：将xxx插入指定索引处</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBufferTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer strbf = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">        strbf.append(<span class="string">"a"</span>).append(<span class="string">"b"</span>).append(<span class="string">"c"</span>);</span><br><span class="line">        <span class="comment">// 将指定字符插入到指定索引处</span></span><br><span class="line">        strbf.insert(<span class="number">1</span>, <span class="string">"de"</span>);</span><br><span class="line">        System.out.println(strbf);<span class="comment">// adec</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-1-5-反转"><a href="#5-1-5-反转" class="headerlink" title="5.1.5. 反转"></a>5.1.5. 反转</h4><p><strong>public StringBuffer reverse ()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBufferTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer strbf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        strbf.append(<span class="string">"abcde"</span>);</span><br><span class="line">        <span class="comment">// 字符串的反转</span></span><br><span class="line">        System.out.println(strbf.reverse());<span class="comment">// edcba</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-1-6-长度"><a href="#5-1-6-长度" class="headerlink" title="5.1.6. 长度"></a>5.1.6. 长度</h4><p><strong>public int length()</strong>：返回字符串的长度</p>
<h2 id="6-java-lang-Math"><a href="#6-java-lang-Math" class="headerlink" title="6. java.lang.Math"></a>6. java.lang.Math</h2><h3 id="6-0-常用方法"><a href="#6-0-常用方法" class="headerlink" title="6.0. 常用方法"></a>6.0. 常用方法</h3><h4 id="6-0-0-public-static-round-double-d"><a href="#6-0-0-public-static-round-double-d" class="headerlink" title="6.0.0. public static round (double d)"></a>6.0.0. public static round (double d)</h4><p>返回参数中最接近的long，其中long四舍五入为正无穷大。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math_Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Math.round(-<span class="number">10.6</span>));<span class="comment">// -11</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">10.6</span>));<span class="comment">// 11</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-0-1-public-static-Xxx-abs-Xxx-d"><a href="#6-0-1-public-static-Xxx-abs-Xxx-d" class="headerlink" title="6.0.1. public static Xxx abs (Xxx d)"></a>6.0.1. public static Xxx abs (Xxx d)</h4><p>返回double的绝对值。如果参数不为负，则返回参数。如果参数为负数，则返回该参数的相反数</p>
<h4 id="6-0-2-public-static-double-ceil-double-d"><a href="#6-0-2-public-static-double-ceil-double-d" class="headerlink" title="6.0.2. public static double ceil (double d)"></a>6.0.2. public static double ceil (double d)</h4><p>返回大于或等于参数的最小(最接近负无穷大)double值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math_Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Math.ceil(-<span class="number">10.6</span>));<span class="comment">// -10.0</span></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">10.6</span>));<span class="comment">// 11.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-0-3-public-static-double-floor-double-d"><a href="#6-0-3-public-static-double-floor-double-d" class="headerlink" title="6.0.3. public static double floor (double d )"></a>6.0.3. public static double floor (double d )</h4><p>返回小于或等于参数的最小(最接近负无穷大)double值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math_Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Math.floor(-<span class="number">10.6</span>));<span class="comment">// -11.0</span></span><br><span class="line">        System.out.println(Math.floor(<span class="number">10.6</span>));<span class="comment">// 10.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-0-4-public-static-double-random"><a href="#6-0-4-public-static-double-random" class="headerlink" title="6.0.4. public static double random ()"></a>6.0.4. public static double random ()</h4><p>返回一个(0, 1)之间的伪随机数</p>
<h2 id="7-日期和时间"><a href="#7-日期和时间" class="headerlink" title="7. 日期和时间"></a>7. 日期和时间</h2><h3 id="7-0-JDK1-8之前的日期和时间"><a href="#7-0-JDK1-8之前的日期和时间" class="headerlink" title="7.0. JDK1.8之前的日期和时间"></a>7.0. JDK1.8之前的日期和时间</h3><h4 id="7-0-0-java-util-Date"><a href="#7-0-0-java-util-Date" class="headerlink" title="7.0.0. java.util.Date"></a>7.0.0. java.util.Date</h4><h5 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h5><p><strong>public Date ()</strong>：获取当前系统时间</p>
<p><strong>public Date(long date)</strong>：根据毫秒值获取日期时间对象</p>
<h4 id="7-0-1-java-lang-System"><a href="#7-0-1-java-lang-System" class="headerlink" title="7.0.1. java.lang.System"></a>7.0.1. java.lang.System</h4><p><strong>public static long currentTimeMillis ()</strong>：返回当前时间(以毫秒为单位)</p>
<h4 id="7-0-2-java-util-Calendar"><a href="#7-0-2-java-util-Calendar" class="headerlink" title="7.0.2. java.util.Calendar"></a>7.0.2. java.util.Calendar</h4><ul>
<li><strong>public static Calendar getInstance ()</strong>：获取默认时区和区域的日历</li>
<li><strong>public static Calendar getInstance (TimeZone zone, Locale aLocale)</strong>：获取指定时区和区域的日历</li>
<li><strong>get(常量字段)</strong>……</li>
</ul>
<h4 id="7-0-3-java-text-DateFormat和java-text-SimpleDateFormat"><a href="#7-0-3-java-text-DateFormat和java-text-SimpleDateFormat" class="headerlink" title="7.0.3. java.text.DateFormat和java.text.SimpleDateFormat"></a>7.0.3. java.text.DateFormat和java.text.SimpleDateFormat</h4><h5 id="构造器-1"><a href="#构造器-1" class="headerlink" title="构造器"></a>构造器</h5><p>以DateFormat为例</p>
<p><strong>public SimpleDateFormat (String pattern)</strong></p>
<h5 id="日期转为字符串"><a href="#日期转为字符串" class="headerlink" title="日期转为字符串"></a>日期转为字符串</h5><p><strong>public final String format (Date date)</strong></p>
<p><strong>字符串转为日期</strong></p>
<p><strong>public Date parse (String source)</strong></p>
<h3 id="7-1-JDK1-8之后的日期和时间"><a href="#7-1-JDK1-8之后的日期和时间" class="headerlink" title="7.1. JDK1.8之后的日期和时间"></a>7.1. JDK1.8之后的日期和时间</h3><h4 id="7-1-0-本地时期和时间"><a href="#7-1-0-本地时期和时间" class="headerlink" title="7.1.0. 本地时期和时间"></a>7.1.0. 本地时期和时间</h4><p>java.time.LocalDate和LocalTime和LocalDateTime</p>
<h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><p>以LocalDate为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDateDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.调用静态now()方法获取当前日期</span></span><br><span class="line">        LocalDate now = LocalDate.now();</span><br><span class="line">        System.out.println(now);<span class="comment">// 2019-11-28</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.指定年月日获得日期</span></span><br><span class="line">        LocalDate of = LocalDate.of(<span class="number">2019</span>, <span class="number">9</span>, <span class="number">9</span>);</span><br><span class="line">        System.out.println(of);<span class="comment">// 2019-09-09</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.指定某年的某一天获取日期</span></span><br><span class="line">        LocalDate ofYearDay = LocalDate.ofYearDay(<span class="number">2019</span>, <span class="number">87</span>);</span><br><span class="line">        System.out.println(ofYearDay);<span class="comment">// 2019-03-28</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.通过时间戳获取日期</span></span><br><span class="line">        LocalDate ofEpochDay = LocalDate.ofEpochDay(System.currentTimeMillis()/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line">        System.out.println(ofEpochDay);<span class="comment">// 2019-11-28</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5.通过格式化的字符串获日期,默认格式yyyy-MM-dd</span></span><br><span class="line">        LocalDate parse = LocalDate.parse(<span class="string">"2019-09-09"</span>);</span><br><span class="line">        System.out.println(parse);<span class="comment">// 2019-09-09</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6.自定义格式化字符串 获取 日期</span></span><br><span class="line">        LocalDate parse2 = LocalDate.parse(<span class="string">"2019@@09**09"</span>, DateTimeFormatter.ofPattern(<span class="string">"yyyy@@MM**dd"</span>));</span><br><span class="line">        System.out.println(parse2);<span class="comment">// 2019-09-09</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDateDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate now = LocalDate.now();</span><br><span class="line">        System.out.println(now);<span class="comment">// 2019-11-28</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1.plusYears(),原有日期上加年数，返回新对象</span></span><br><span class="line">        LocalDate plusYears = now.plusYears(<span class="number">10</span>);</span><br><span class="line">        System.out.println(plusYears);<span class="comment">// 2029-11-28</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.plusMonths(),原有日期上加月数，返回新对象</span></span><br><span class="line">        LocalDate plusMonths = now.plusMonths(<span class="number">10</span>);</span><br><span class="line">        System.out.println(plusMonths);<span class="comment">// 2020-09-28</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.plusWeeks(),原有日期上加周数，返回新对象</span></span><br><span class="line">        LocalDate plusWeeks = now.plusWeeks(<span class="number">3</span>);</span><br><span class="line">        System.out.println(plusWeeks);<span class="comment">// 2019-12-19</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"**********************"</span>);</span><br><span class="line">        <span class="comment">// 4.minusYears(),原有日期上减年数，返回新对象</span></span><br><span class="line">        LocalDate minusYears = now.minusYears(<span class="number">10</span>);</span><br><span class="line">        System.out.println(minusYears);<span class="comment">// 2009-11-28</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5.minusMonths(),原有日期上减月数，返回新对象</span></span><br><span class="line">        LocalDate minusMonths = now.minusMonths(<span class="number">10</span>);</span><br><span class="line">        System.out.println(minusMonths);<span class="comment">// 2019-01-28</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6.minusWeeks(),原有日期上减周数，返回新对象</span></span><br><span class="line">        LocalDate minusWeeks = now.minusWeeks(<span class="number">3</span>);</span><br><span class="line">        System.out.println(minusWeeks);<span class="comment">// 2019-11-07</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// // 7.minusDays(),原有日期上减天数，返回新对象</span></span><br><span class="line">        LocalDate minusDays = now.minusDays(<span class="number">3</span>);</span><br><span class="line">        System.out.println(minusDays);<span class="comment">// 2019-11-25</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取具体年月日</span></span><br><span class="line">        <span class="keyword">int</span> year = now.getYear();</span><br><span class="line">        <span class="keyword">int</span> monthValue = now.getMonthValue();</span><br><span class="line">        <span class="keyword">int</span> dayOfMonth = now.getDayOfMonth();</span><br><span class="line">        DayOfWeek dayOfWeek = now.getDayOfWeek();</span><br><span class="line">        <span class="keyword">int</span> value = dayOfWeek.getValue();</span><br><span class="line">        </span><br><span class="line">        System.out.println(year + <span class="string">"年"</span> + monthValue + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日，"</span> </span><br><span class="line">        + <span class="string">"是本周第"</span> + value + <span class="string">"天。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-1-1-日期时间格式化"><a href="#7-1-1-日期时间格式化" class="headerlink" title="7.1.1. 日期时间格式化"></a>7.1.1. 日期时间格式化</h4><p>DateTimeFormatter无构造方法,通过静态常量获得各种格式的日期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoField;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalAccessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeFormatterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        DateTimeFormatter isoLocalDate = DateTimeFormatter.ISO_LOCAL_DATE;</span><br><span class="line">        String format = isoLocalDate.format(LocalDate.now());</span><br><span class="line">        System.out.println(format);<span class="comment">// 2019-11-28</span></span><br><span class="line">        </span><br><span class="line">        DateTimeFormatter isoLocalTime = DateTimeFormatter.ISO_LOCAL_TIME;</span><br><span class="line">        System.out.println(isoLocalTime.now());<span class="comment">// 22:07:38.189</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 自定义日期的格式化</span></span><br><span class="line">        DateTimeFormatter ofPattern = DateTimeFormatter.ofPattern(<span class="string">"yyyy**MM&amp;&amp;dd"</span>);</span><br><span class="line">        <span class="comment">// 日期格式--&gt;字符串格式</span></span><br><span class="line">        String format2 = ofPattern.format(LocalDate.now());</span><br><span class="line">        System.out.println(format2);<span class="comment">// 2019==11==28</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符串格式--&gt;日期格式</span></span><br><span class="line">        String str = <span class="string">"2019**09&amp;&amp;16"</span>;</span><br><span class="line">        TemporalAccessor parse = ofPattern.parse(str);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> year = parse.get(ChronoField.YEAR);</span><br><span class="line">        <span class="keyword">int</span> month = parse.get(ChronoField.MONTH_OF_YEAR);</span><br><span class="line">        <span class="keyword">int</span> day = parse.get(ChronoField.DAY_OF_MONTH);</span><br><span class="line">        <span class="comment">// 2019年9月16日</span></span><br><span class="line">        System.out.println(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-Instant"><a href="#7-2-Instant" class="headerlink" title="7.2. Instant"></a>7.2. Instant</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstantDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        <span class="comment">// 获取当前时间戳，为毫秒值</span></span><br><span class="line">        <span class="keyword">long</span> currentTimeMillis = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> time = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        </span><br><span class="line">        System.out.println(currentTimeMillis);<span class="comment">// 1574949236168</span></span><br><span class="line">        System.out.println(time);<span class="comment">// 1574949236168</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取当前时间戳，为秒值</span></span><br><span class="line">        Instant now = Instant.now();</span><br><span class="line">        <span class="keyword">long</span> epochSecond = now.getEpochSecond();</span><br><span class="line">        System.out.println(epochSecond);<span class="comment">// 1574949348    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-日期的间隔"><a href="#7-3-日期的间隔" class="headerlink" title="7.3. 日期的间隔"></a>7.3. 日期的间隔</h3><p>计算两个日期之间的距离的，所用方法 between()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.Period;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeriodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Period 计算两个日期之间的距离的，所用方法 between()</span></span><br><span class="line">        LocalDate now = LocalDate.now();</span><br><span class="line">        LocalDate of = LocalDate.of(<span class="number">2017</span>, <span class="number">9</span>, <span class="number">8</span>);</span><br><span class="line">        </span><br><span class="line">        Period p = Period.between(of, now);</span><br><span class="line">        <span class="keyword">int</span> years = p.getYears();</span><br><span class="line">        <span class="keyword">int</span> months = p.getMonths();</span><br><span class="line">        <span class="keyword">int</span> days = p.getDays();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"相差"</span> + years + <span class="string">"年"</span> + months + <span class="string">"月"</span> + days + <span class="string">"日"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-4-时间的间隔"><a href="#7-4-时间的间隔" class="headerlink" title="7.4. 时间的间隔"></a>7.4. 时间的间隔</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DurationDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Duration 计算两个Instant时间戳的距离的，所用方法between()</span></span><br><span class="line">        <span class="comment">// 计算时间间隔</span></span><br><span class="line">        Instant now1 = Instant.now();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">1000000</span>;i ++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Instant now2 = Instant.now();</span><br><span class="line">        </span><br><span class="line">        Duration between = Duration.between(now1, now2);</span><br><span class="line">        <span class="comment">// 获取时间间隔，单位为秒</span></span><br><span class="line">        <span class="keyword">long</span> seconds = between.getSeconds();</span><br><span class="line">        System.out.println(seconds);<span class="comment">// 5</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>JavaAPI</tag>
        <tag>Object</tag>
        <tag>String</tag>
        <tag>包装类</tag>
        <tag>Java日期和时间</tag>
        <tag>StringBuffer</tag>
        <tag>StringBuilder</tag>
        <tag>Math</tag>
        <tag>BigDecimal</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-MySQL</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-MySQL/</url>
    <content><![CDATA[<p>施工中</p>
<a id="more"></a>

<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="数据库概念及特点"><a href="#数据库概念及特点" class="headerlink" title="数据库概念及特点"></a>数据库概念及特点</h2><p>数据库，DataBase，简称DB，用于存储和管理数据的仓库</p>
<ul>
<li>持久化存储数据</li>
<li>方便存储和管理数据</li>
<li>使用统一方式操作数据库(SQL)</li>
</ul>
<h2 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h2><p><strong>SQL，Structured Query Language，结构化查询语言。</strong>它定义了操作关系型数据库的规则。每一种DBMS操作方式都有不一样的地方，称为方言。SQL语句可以单行或多行书写，以分号结尾。MySQL的SQL语句不区分大小写，但<strong>关键字建议使用大写</strong>。</p>
<h3 id="SQL的注释"><a href="#SQL的注释" class="headerlink" title="SQL的注释"></a>SQL的注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><ul>
<li><strong># 注释文字</strong>(MySQL特有的)</li>
<li><strong>--注释文字</strong></li>
</ul>
<h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p><strong>/*注释文字*/</strong></p>
<h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><h3 id="DQL-Data-Query-Language"><a href="#DQL-Data-Query-Language" class="headerlink" title="DQL(Data Query Language)"></a>DQL(Data Query Language)</h3><p>数据查询语句</p>
<h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查表的指定字段</span></span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>，字段<span class="number">2.</span>.. <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 指定列的别名查询，显示的时候显示新名，不修改表的结构。[]括起来的表示可写可不写</span></span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>，字段<span class="number">2</span> [<span class="keyword">as</span>] 别名<span class="number">2</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有字段,不建议使用*，因为效率低</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>

<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure>

<h5 id="where条件中的比较运算符"><a href="#where条件中的比较运算符" class="headerlink" title="where条件中的比较运算符"></a>where条件中的比较运算符</h5><ul>
<li><strong>&gt;</strong>、<strong>&lt;</strong>、<strong>&lt;=</strong>、<strong>&gt;=</strong>、<strong>=</strong>、<strong>&lt;&gt;</strong>、<strong>!=</strong>。&lt;&gt;在sql中是不等于，MySQL中可用 !=，没有==</li>
<li><strong>between…and…</strong>  用在<strong>数字方面，闭区间</strong>；用在<strong>字符方面，左闭右开</strong></li>
<li><strong>in(集合)</strong>；<strong>not in(集合)</strong>。等同于or。多个值用逗号隔开</li>
<li><strong>is null</strong>和<strong>not is nul</strong>l的前面跟字段名</li>
<li><strong>like ‘xxx%’</strong><ul>
<li>模糊查询符号，<strong>%</strong>表示占任意字符</li>
<li>模糊查询符号，<strong>_</strong>表示占一个字符</li>
</ul>
</li>
</ul>
<h5 id="where条件中的逻辑运算符"><a href="#where条件中的逻辑运算符" class="headerlink" title="where条件中的逻辑运算符"></a>where条件中的逻辑运算符</h5><ul>
<li><strong>and</strong> 或 <strong>&amp;&amp;</strong>。与的意思，在SQL中建议用and，&amp;&amp;并不通用</li>
<li><strong>or</strong> 或 <strong>||</strong>。或的意思</li>
<li><strong>not</strong> 或 <strong>!</strong>。非的意思</li>
</ul>
<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 默认升序，多个字段同时排序，越靠前主导作用越大</span></span><br><span class="line"><span class="keyword">select</span>  要查询的东西</span><br><span class="line"><span class="keyword">from</span>  表</span><br><span class="line"><span class="keyword">where</span>  条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  排序的字段 | 表达式 | 函数 | 别名</span><br><span class="line">[ <span class="keyword">asc</span>(升序) | <span class="keyword">desc</span>(降序)];</span><br></pre></td></tr></table></figure>

<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><ul>
<li><strong>group by</strong>，按照某些字段进行分组。通常和分组函数联合使用，且分组函数在group by后执行。严谨的语句环境中，SQL语句中有group by时，select后面只能有分组字段和分组函数</li>
<li>having，对分组之后的某些数据进行再次过滤</li>
<li>执行顺序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>       <span class="number">5</span></span><br><span class="line"><span class="keyword">from</span>         <span class="number">1</span></span><br><span class="line"><span class="keyword">where</span>        <span class="number">2</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>     <span class="number">3</span></span><br><span class="line"><span class="keyword">having</span>       <span class="number">4</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>     <span class="number">6</span></span><br><span class="line"><span class="keyword">limit</span>        <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><h5 id="相关语法"><a href="#相关语法" class="headerlink" title="相关语法"></a>相关语法</h5><p>SQL92，较老的语法。</p>
<p>SQL99</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段，...</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line">【<span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span>|<span class="keyword">right</span> <span class="keyword">outer</span>|<span class="keyword">cross</span>】<span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span>  连接条件</span><br><span class="line">【<span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span>|<span class="keyword">right</span> <span class="keyword">outer</span>|<span class="keyword">cross</span>】<span class="keyword">join</span> 表<span class="number">3</span> <span class="keyword">on</span>  连接条件</span><br><span class="line">【<span class="keyword">where</span> 筛选条件】</span><br><span class="line">【<span class="keyword">group</span> <span class="keyword">by</span> 分组字段】</span><br><span class="line">【<span class="keyword">having</span> 分组后的筛选条件】</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段或表达式】</span><br></pre></td></tr></table></figure>

<h5 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h5><h6 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename,d.dname </span><br><span class="line"><span class="keyword">from</span> emp e,dept d;</span><br></pre></td></tr></table></figure>

<h6 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename,d.dname </span><br><span class="line"><span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno = d.deptno;(99语法)</span><br></pre></td></tr></table></figure>

<h6 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h6><p>即一张表拆成多张，自己跟自己连</p>
<h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><p>特点：主表的数据必须全部查询</p>
<h6 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.ename,b.ename </span><br><span class="line"><span class="keyword">from</span> emp a </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp b</span><br><span class="line"><span class="keyword">on</span> a.mgr = b.empno;</span><br></pre></td></tr></table></figure>

<h6 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h6><p>还没写呢</p>
<h5 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h5><p>还没写呢</p>
<h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>一条查询语句中又嵌套了另一条完整的select语句，其中<strong>被嵌套的select语句，称为子查询或内查询</strong>。在外面的查询语句，称为主查询或外查询</p>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>子查询都放在小括号里</li>
<li>子查询可放在from、select、where、having后，但一般放在条件右侧</li>
<li>子查询优于主查询执行</li>
<li>单行子查询。结果集只有一行，搭配单行操作符使用(&gt;、&lt;、=、&lt;&gt;、&gt;=、&lt;=)</li>
<li>多行子查询，结果集有多行，搭配多行操作符使用(any、all、in、not in)</li>
</ul>
<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul>
<li>起始条目索引从0开始</li>
<li>limit子句放在查询语句的后面 </li>
</ul>
<p>标准分页SQL：(pageNo-1) * pageSize，pageSize; 第pageNo页，每页显示pageSize条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段|表达式,...</span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line">【<span class="keyword">where</span> 条件】</span><br><span class="line">【<span class="keyword">group</span> <span class="keyword">by</span> 分组字段】</span><br><span class="line">【<span class="keyword">having</span> 条件】</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段】</span><br><span class="line"><span class="keyword">limit</span> startIndex, <span class="keyword">length</span>;</span><br><span class="line"><span class="comment">-- startIndex, 起始条目索引，为0时可忽略</span></span><br></pre></td></tr></table></figure>

<h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><ul>
<li>多条查询语句查询的列数必须一致</li>
<li>多条查询语句查询的列的类型必须相同</li>
<li>union代表去重，union all代表不去重</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段|常量|表达式|函数 </span><br><span class="line">【<span class="keyword">from</span> 表】 </span><br><span class="line">【<span class="keyword">where</span> 条件】 <span class="keyword">union</span> 【<span class="keyword">all</span>】</span><br><span class="line"><span class="keyword">select</span> 字段|常量|表达式|函数 </span><br><span class="line">【<span class="keyword">from</span> 表】 </span><br><span class="line">【<span class="keyword">where</span> 条件】 <span class="keyword">union</span> 【<span class="keyword">all</span>】</span><br><span class="line">  .....</span><br><span class="line"><span class="keyword">select</span> 字段|常量|表达式|函数 </span><br><span class="line">【<span class="keyword">from</span> 表】 </span><br><span class="line">【<span class="keyword">where</span> 条件】</span><br></pre></td></tr></table></figure>

<h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h4><h5 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h5><h6 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h6><ul>
<li><strong>concat()</strong>，拼接</li>
<li><strong>substr()</strong>，截取子串</li>
<li><strong>upper()</strong>，转成大写</li>
<li><strong>lower()</strong>，转成小写</li>
<li><strong>trim()</strong>，去前后指定空格和字符</li>
<li><strong>ltrim()</strong>，去左边空格</li>
<li><strong>rtrim()</strong>，去右边空格</li>
<li><strong>replace()</strong>，替换</li>
<li><strong>lpad()</strong>，左填充</li>
<li><strong>rpad()</strong>，右填充</li>
<li><strong>instr()</strong>，返回子串第一次出现的索引</li>
<li><strong>length()</strong>，获取字节个数</li>
</ul>
<h6 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h6><ul>
<li><strong>round()</strong> ，四舍五入</li>
<li><strong>rand()</strong>，随机数</li>
<li><strong>floor()</strong>，向下取整</li>
<li><strong>ceil()</strong>，向上取整</li>
<li><strong>mod()</strong>，取余</li>
<li><strong>truncate()</strong>，截断</li>
</ul>
<h6 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h6><ul>
<li><strong>now()</strong>，当前系统日期+时间</li>
<li><strong>curdate()</strong>，当前系统日期</li>
<li><strong>curtime()</strong>，当前系统时间</li>
<li><strong>str_to_date()</strong>，将字符转为日期</li>
<li><strong>date_format()</strong>，将日期转为字符</li>
</ul>
<h6 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h6><ul>
<li><strong>if()</strong>，处理双分支</li>
<li><strong>case语句</strong>  处理多分支，处理等值判断或处理条件判断</li>
</ul>
<h6 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h6><ul>
<li><strong>version()</strong>, 版本</li>
<li><strong>database()</strong>，当前库</li>
<li><strong>user()</strong>，当前连接用户</li>
<li><strong>ifnull</strong>(可能为null的数据，被当作什么处理)</li>
</ul>
<h5 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h5><ul>
<li><strong>sum()</strong>，求和</li>
<li><strong>max()</strong>，最大值</li>
<li><strong>min()</strong>，最小值</li>
<li><strong>avg()</strong>，平均值</li>
<li><strong>count()</strong>，计数</li>
</ul>
<h6 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h6><ul>
<li><strong>sum()</strong>和<strong>avg()</strong>一般用于处理数值型；<strong>max()</strong>、<strong>min()</strong>、<strong>count()</strong>可处理任何数据类型</li>
<li>可搭配 distinct使用。distinct只能出现在所有字段最前面</li>
<li><strong>count()</strong>的参数可支持<strong>字段</strong>、*、<strong>常量值</strong>(一般放1)。建议用count(*)</li>
<li><strong>分组函数不可直接用在where子句中</strong></li>
<li>以上5个函数忽略Null值，除了count(*)</li>
</ul>
<h3 id="DML-Data-Manipulation-Language"><a href="#DML-Data-Manipulation-Language" class="headerlink" title="DML(Data Manipulation Language)"></a>DML(Data Manipulation Language)</h3><p>数据操作语句</p>
<h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>，列名<span class="number">2.</span>..) <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2.</span>..);</span><br></pre></td></tr></table></figure>

<ul>
<li>列与值的类型、数量需一一对应</li>
<li>字符和日期型数据要在单引号里，MySQL允许用双引号</li>
<li>省略写法(插入所有的值)，省略了所有的列名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(所有的值);</span><br></pre></td></tr></table></figure>

<h6 id="蠕虫复制"><a href="#蠕虫复制" class="headerlink" title="蠕虫复制"></a>蠕虫复制</h6><p>复制全部的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名<span class="number">1</span> [<span class="keyword">as</span>] <span class="keyword">select</span> * <span class="keyword">from</span> 表名<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h6 id="只复制部分的列"><a href="#只复制部分的列" class="headerlink" title="只复制部分的列"></a>只复制部分的列</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名<span class="number">1</span>(列<span class="number">1</span>，列<span class="number">2.</span>..) [<span class="keyword">as</span>] <span class="keyword">select</span> 列<span class="number">1</span>，列<span class="number">2.</span>.. <span class="keyword">from</span> 表<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><h6 id="单表修改"><a href="#单表修改" class="headerlink" title="单表修改"></a>单表修改</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段=新值，字段=新值 [<span class="keyword">where</span> 筛选条件];</span><br></pre></td></tr></table></figure>

<h6 id="多表修改"><a href="#多表修改" class="headerlink" title="多表修改"></a>多表修改</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表<span class="number">1</span> 别名<span class="number">1</span>，表<span class="number">2</span> 别名<span class="number">2</span></span><br><span class="line"><span class="keyword">set</span> 字段=新值，字段=新值</span><br><span class="line"><span class="keyword">where</span> 连接条件</span><br><span class="line"><span class="keyword">and</span> 筛选条件;</span><br></pre></td></tr></table></figure>

<h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><h6 id="单表删除"><a href="#单表删除" class="headerlink" title="单表删除"></a>单表删除</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 筛选条件];</span><br></pre></td></tr></table></figure>

<h6 id="多表删除"><a href="#多表删除" class="headerlink" title="多表删除"></a>多表删除</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> 别名<span class="number">1</span>，别名<span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名<span class="number">1</span>，表<span class="number">2</span> 别名<span class="number">2</span></span><br><span class="line"><span class="keyword">where</span> 连接条件</span><br><span class="line"><span class="keyword">and</span> 筛选条件;</span><br></pre></td></tr></table></figure>

<h6 id="truncate删除"><a href="#truncate删除" class="headerlink" title="truncate删除"></a>truncate删除</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>

<h6 id="delete-和-truncate-的区别"><a href="#delete-和-truncate-的区别" class="headerlink" title="delete 和 truncate 的区别"></a>delete 和 truncate 的区别</h6><ul>
<li><strong>truncate不能加where条件</strong>，而delete可以加</li>
<li>truncate效率高一丢丢</li>
<li>truncate 删除带自增的列的表后，再插入数据，数据从1开始；delete 删除带自增的列的表后，再插入数据，数据从上次的断点处开始</li>
<li><strong>truncate 删除不能回滚</strong>，delete删除能回滚；<strong>truncate相当于删除表的结构</strong>，再创建一张表</li>
</ul>
<h3 id="DCL-Data-Control-Language"><a href="#DCL-Data-Control-Language" class="headerlink" title="DCL(Data Control Language)"></a>DCL(Data Control Language)</h3><p>数据控制语句</p>
<h4 id="MySQL开启权限"><a href="#MySQL开启权限" class="headerlink" title="MySQL开启权限"></a>MySQL开启权限</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1. <span class="keyword">use</span> mysql;</span><br><span class="line">2. <span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.*  <span class="keyword">to</span>  <span class="string">'用户名'</span>  @<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'密码'</span>;</span><br><span class="line">3. <span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>

<h4 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source  表的路径</span><br></pre></td></tr></table></figure>

<h4 id="终止一条语句"><a href="#终止一条语句" class="headerlink" title="终止一条语句"></a>终止一条语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\c;</span><br></pre></td></tr></table></figure>

<h4 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql 数据库名字&gt;导出路径 -u用户名 -p密码</span><br></pre></td></tr></table></figure>

<h5 id="导出数据库中指定的表"><a href="#导出数据库中指定的表" class="headerlink" title="导出数据库中指定的表"></a>导出数据库中指定的表</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql 数据库名字 表名&gt;导出路径 -u用户名 -p密码</span><br></pre></td></tr></table></figure>

<h3 id="DDL-Data-Definition-Language"><a href="#DDL-Data-Definition-Language" class="headerlink" title="DDL(Data Definition Language)"></a>DDL(Data Definition Language)</h3><p>数据定义语句</p>
<h4 id="操作库结构"><a href="#操作库结构" class="headerlink" title="操作库结构"></a>操作库结构</h4><ul>
<li><p>创建数据库</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库是否以存在，不存在创建</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据库，并指定字符集</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名 <span class="built_in">character</span> <span class="keyword">set</span> 字符集;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看所有数据库</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看某个数据库定义信息</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> db2;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看数据库状态</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">status;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改数据库默认字符集</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名 <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> 字符集;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据库</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看正在使用的数据库</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用/切换数据库</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="操作表结构"><a href="#操作表结构" class="headerlink" title="操作表结构"></a>操作表结构</h4><ul>
<li><p>建表格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> 表名 (</span><br><span class="line">字段名<span class="number">1</span>  字段类型<span class="number">1</span>，</span><br><span class="line">字段名<span class="number">2</span>  字段类型<span class="number">2</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>查看某个数据库中的所有表</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>查看建表SQL语句</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure></li>
<li><p>查看表结构</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure></li>
<li><p>快速创建相同表结构的新表</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名 <span class="keyword">like</span> 旧表名;</span><br></pre></td></tr></table></figure></li>
<li><p>直接删除表</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure></li>
<li><p>判断表是否存在 ，存在删除表</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> 表名;</span><br></pre></td></tr></table></figure></li>
<li><p>添加表列ADD</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 类型;</span><br></pre></td></tr></table></figure></li>
<li><p>修改列类型modify</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 列名 新类型;</span><br></pre></td></tr></table></figure></li>
<li><p>修改列名 change</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 旧列名 新列名 类型;</span><br></pre></td></tr></table></figure></li>
<li><p>修改表名</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 原表名 <span class="keyword">rename</span> <span class="keyword">to</span> 新表名;</span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> 表名 <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure></li>
<li><p>修改字符集</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="built_in">character</span>  <span class="keyword">set</span> 字符集;</span><br></pre></td></tr></table></figure></li>
<li><p>删除列</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="TCL-Transaction-Control-Language"><a href="#TCL-Transaction-Control-Language" class="headerlink" title="TCL(Transaction Control Language)"></a>TCL(Transaction Control Language)</h3><p>事务控制语句。见MySQL事务部分</p>
<h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ul>
<li><strong>tinyInt</strong>：微整型，很小的整数(占 8 位二进制)  </li>
<li><strong>smallInt</strong>：小整型，小的整数(占 16 位二进制) </li>
<li><strong>mediumInt</strong>：中整型：中等长度的整数(占 24 位二进制) </li>
<li><strong>Int(Integer)</strong>：整型：整数类型(占 32 位二进制) </li>
</ul>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul>
<li><p>float：单精度浮点数，占 4 个字节<br>float有很多潜在因素，能不用就不用，默认存6位？？？，float(m,d)，m最大24整数位为m-d，小数位为d</p>
<p>详情可见<a href="https://www.cnblogs.com/zhoujinyi/archive/2013/04/26/3043160.html" target="_blank" rel="noopener">MySQL 数据类型（float）的注意事项</a></p>
</li>
</ul>
<ul>
<li>double：双精度浮点数，占 8 个字节。double(5,2)表示最多存5位，其中必须为2位小数，即最大值为999.99</li>
</ul>
<h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><ul>
<li>time(时间类型)</li>
<li>date(日期类型)</li>
<li>datetime(同时可以表示日期和时间类型)</li>
</ul>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul>
<li>char(M)，固定长度的字符串，无论使用几个字符都占满全部，M 为 0~255 之间的整数</li>
<li>varchar(M)：可变长度的字符串，使用几个字符就占用几个，M 为 0~65535 之间的整数</li>
</ul>
<h3 id="大二进制"><a href="#大二进制" class="headerlink" title="大二进制"></a>大二进制</h3><ul>
<li>tinyblob(Big Large Object)，允许长度0~255字节</li>
<li>blob：允许长度0~65535字节</li>
<li>mediumblob：允许长度0~167772150字节</li>
<li>longblob：允许长度0~4294967295字节<h3 id="大文本"><a href="#大文本" class="headerlink" title="大文本"></a>大文本</h3></li>
<li>tinytext：允许长度0~255字节</li>
<li>text：允许长度0~65535字节</li>
<li>mediumtext：允许长度0~167772150字节</li>
<li>longtext：允许长度0~4294967295字节</li>
</ul>
<h2 id="MySQL约束"><a href="#MySQL约束" class="headerlink" title="MySQL约束"></a>MySQL约束</h2><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p>not null(只有列级约束)</p>
<h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p>unique</p>
<h4 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h4><ul>
<li>可多字段联合添加unique约束(表级约束)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">unique(字段1，字段2)</span><br></pre></td></tr></table></figure>

<ul>
<li>可单字段添加unique约束(列级约束)，unique修饰的字段不能重复，但可以为null</li>
</ul>
<h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p>primary key</p>
<h4 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h4><ul>
<li>主键约束的字段不能为null？？？，不能重复</li>
<li>主键约束有列级约束和表级约束</li>
<li>一张表只能有一个主键</li>
<li><strong>primary key</strong> 通常和 <strong>auto_increment</strong>(自增)搭配</li>
</ul>
<h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><p>foreign key</p>
<h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">foreign key(列名1) references 列名2(值2)</span><br></pre></td></tr></table></figure>
<h4 id="特点-6"><a href="#特点-6" class="headerlink" title="特点"></a>特点</h4><ul>
<li>添数据时/建表时，先父表，后子表</li>
<li>删数据时/删表时，先子表，后父表</li>
<li>外键约束的字段可以不是主键，但需要有unique约束</li>
</ul>
<h3 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h3><p>check</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>一个包含多个步骤的业务操作，被事务管理，这些操作要么同时成功，要么同时失败</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>开启事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span>  <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">begin</span>;</span><br></pre></td></tr></table></figure>
<p>回滚</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<p>提交</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<h3 id="事务提交方式"><a href="#事务提交方式" class="headerlink" title="事务提交方式"></a>事务提交方式</h3><h4 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h4><p><strong>MySQL中事务是自动提交的</strong>；一条DML（增删改）语句会自动提交一次事务</p>
<h4 id="手动提交"><a href="#手动提交" class="headerlink" title="手动提交"></a>手动提交</h4><p>先开启事务，再提交事务；<strong>Oracle是默认手动提交事务的</strong></p>
<h4 id="查询事务提交方式"><a href="#查询事务提交方式" class="headerlink" title="查询事务提交方式"></a>查询事务提交方式</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1 代表自动提交；0  代表手动提交</span></span><br><span class="line"><span class="keyword">select</span> @@autocommit;</span><br></pre></td></tr></table></figure>
<h4 id="修改事务提交方式"><a href="#修改事务提交方式" class="headerlink" title="修改事务提交方式"></a>修改事务提交方式</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @@autocommit = <span class="number">0</span>或<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h4 id="四大特征"><a href="#四大特征" class="headerlink" title="四大特征"></a>四大特征</h4><ul>
<li>原子性：是不可分割的最小操作单元，要么同时成功，要么同时失败</li>
<li>持久性：当事务提交或回滚后，数据库会持久化的保存数据</li>
<li>隔离性：多个事务之间，相互独立</li>
<li>一致性：事务操作前后，数据总量不变</li>
</ul>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><h5 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h5><p>多个事务之间隔离，相互独立。如果多个事务操作同一批数据，则会引发问题，可通过设置隔离级别解决。</p>
<h5 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h5><ul>
<li>脏读：一个事务读取到另一个事务中没有提交的数据</li>
<li>不是重复读（虚读）：在同一个事务中，两次读取到的数据不一样</li>
<li>幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，第一个事务查询不到自己的修改</li>
</ul>
<h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 隔离级别从小到大安全性越来越高，效率越来越低</span></span><br><span class="line"><span class="comment">-- 会产生脏读、幻读、不可重复读</span></span><br><span class="line">read uncommited（读未提交）</span><br><span class="line"><span class="comment">-- 会产生不可重复读、幻读</span></span><br><span class="line">read commited（读已提交）（Oracle）</span><br><span class="line"><span class="comment">-- 	会产生幻读</span></span><br><span class="line">repeatable read（可重复读）（MySQL默认）</span><br><span class="line"><span class="comment">-- 可解决所有问题</span></span><br><span class="line">serializable（串行化）</span><br></pre></td></tr></table></figure>
<h5 id="数据库查询隔离语句"><a href="#数据库查询隔离语句" class="headerlink" title="数据库查询隔离语句"></a>数据库查询隔离语句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br></pre></td></tr></table></figure>
<h5 id="数据库设置隔离级别语句"><a href="#数据库设置隔离级别语句" class="headerlink" title="数据库设置隔离级别语句"></a>数据库设置隔离级别语句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span>  级别字符串;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL的登录与退出"><a href="#MySQL的登录与退出" class="headerlink" title="MySQL的登录与退出"></a>MySQL的登录与退出</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p密码</span><br><span class="line">mysq [-h主机名 -p端口号] -u用户名 -p密码</span><br></pre></td></tr></table></figure>

<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">exit;</span><br><span class="line">quit;</span><br></pre></td></tr></table></figure>

<h2 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h2><ul>
<li>任何一张表都应有主键，且每一个字段原子性不可再分</li>
<li>所有非主键字段完全依赖主键，不能产生部分依赖</li>
<li>所有非主键字段完全依赖主键，不能产生传递依赖</li>
</ul>
<h3 id="口诀"><a href="#口诀" class="headerlink" title="口诀"></a>口诀</h3><ul>
<li>多对多，三张表，关系表两个外键</li>
<li>一对多，两张表，多的表加外键</li>
</ul>
<h3 id="相关概念解释"><a href="#相关概念解释" class="headerlink" title="相关概念解释"></a>相关概念解释</h3><p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-MySQL/%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A.png" alt="相关概念解释"></p>
<h4 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h4><p>A- - &gt;B，通过A属性的值，可以确定唯一B属性的值，则称B依赖于A。<br>例如：学号- - &gt;姓名</p>
<h4 id="完全函数依赖"><a href="#完全函数依赖" class="headerlink" title="完全函数依赖"></a>完全函数依赖</h4><p>A- - &gt;B，A是一个属性组，B属性值的确定必须依赖A属性组中所有的属性值<br>例如：（学号，课程名称）- - &gt;分数</p>
<h4 id="部分函数依赖"><a href="#部分函数依赖" class="headerlink" title="部分函数依赖"></a>部分函数依赖</h4><p>A- - &gt;B，A是一个属性组，B属性值的确定只需要依赖A属性组中某些属性值即可</p>
<h4 id="传递函数依赖"><a href="#传递函数依赖" class="headerlink" title="传递函数依赖"></a>传递函数依赖</h4><p>A- - &gt;B，B- -&gt;C，通过A属性（属性组）的值，可以确定唯一B属性的值，再通过B属性的值，可以确定唯一C属性的值，则称C传递依赖于A</p>
<h4 id="码"><a href="#码" class="headerlink" title="码"></a>码</h4><p>在一张表中，一个属性或属性组，被其他所有属性完全依赖，则称这个属性（属性组）为该表的码<br>例如：该表中码为（学号，课程名称）</p>
]]></content>
      <categories>
        <category>数据库学习</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>关系型数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-JDBC</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-JDBC/</url>
    <content><![CDATA[<p>施工中。JDBC的简单使用……</p>
<a id="more"></a>

<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h2><p><strong>JDBC</strong>(<strong>Java Database Connectivity</strong>)是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标准Java类库，使用这个类库可以以一种标准的方法、方便地访问数据库资源。<br>JDBC为访问不同的数据库提供了一种统一的途径，为开发者屏蔽了一些细节问题。<br><strong>JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序的数据库系统</strong>，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</p>
<h2 id="JDBC体系结构"><a href="#JDBC体系结构" class="headerlink" title="JDBC体系结构"></a>JDBC体系结构</h2><p>JDBC接口（API）包括两个层次：</p>
<ul>
<li><strong>面向应用的API</strong>：<strong>JavaAPI</strong>，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li>
<li><strong>面向数据库的API</strong>：<strong>JavaDriver API</strong>，供开发商开发数据库驱动程序用。</li>
</ul>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-JDBC/JDBC%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.jpg" alt="JDBC体系结构图"></p>
<h2 id="JDBC驱动程序分类"><a href="#JDBC驱动程序分类" class="headerlink" title="JDBC驱动程序分类"></a>JDBC驱动程序分类</h2><p>JDBC驱动程序：各个数据库厂商根据JDBC的规范制作的JDBC 实现类的类库  </p>
<p>共有四种类型：</p>
<ul>
<li>第一类：JDBC-ODBC桥。 </li>
<li>第二类：部分本地API部分Java的驱动程序。</li>
<li>第三类：JDBC网络纯Java驱动程序。</li>
<li>第四类：本地协议的纯Java驱动程序。 </li>
</ul>
<p>第三、四两类都是纯Java的驱动程序，因此，对于Java开发者来说，它们在性能、可移植性、功能等方面都有优势。 </p>
<h3 id="JDBC-ODBC桥"><a href="#JDBC-ODBC桥" class="headerlink" title="JDBC-ODBC桥"></a>JDBC-ODBC桥</h3><ul>
<li>JDBC-ODBC桥本身也是一个驱动，利用这个驱动，可以使用JDBC-API通过ODBC 去访问数据库。这种机制实际上是把标准的JDBC 调用转换成相应的ODBC 调用，并通过ODBC 访问数据库。</li>
<li>需要通过多层调用，所以<strong>利用JDBC-ODBC桥访问数据库的效率较低</strong>。</li>
<li>在JDK 中，提供了JDBC-ODBC桥的实现类(sun.jdbc.odbc.JdbcOdbcDriver)</li>
</ul>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-JDBC/JDBC-ODBC%E6%A1%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="JDBC体系结构图"></p>
<h3 id="部分本地API部分Java的驱动程序"><a href="#部分本地API部分Java的驱动程序" class="headerlink" title="部分本地API部分Java的驱动程序"></a>部分本地API部分Java的驱动程序</h3><ul>
<li>这种类型的JDBC 驱动程序使用Java 编写，它<strong>调用数据库厂商提供的本地API</strong></li>
<li>通过这种类型的JDBC 驱动程序访问数据库<strong>减少了ODBC 的调用环节</strong>，提高了数据库访问的效率</li>
<li>在这种方式下需要在客户的机器上安装本地JDBC 驱动程序和特定厂商的本地API </li>
</ul>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-JDBC/%E9%83%A8%E5%88%86%E6%9C%AC%E5%9C%B0API%E9%83%A8%E5%88%86Java%E7%9A%84%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F.png" alt="JDBC体系结构图"></p>
<h3 id="JDBC网络纯Java驱动程序"><a href="#JDBC网络纯Java驱动程序" class="headerlink" title="JDBC网络纯Java驱动程序"></a>JDBC网络纯Java驱动程序</h3><ul>
<li>这种驱动<strong>利用中间件的应用服务器来访问数据库</strong>。应用服务器作为一个到多个数据库的网关，客户端通过它可以连接到不同的数据库服务器。</li>
<li>应用服务器通常有自己的网络协议，Java 用户程序通过JDBC 驱动程序将JDBC 调用发送给应用服务器，应用服务器使用本地程序驱动访问数据库，从而完成请求。</li>
</ul>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-JDBC/JDBC%E7%BD%91%E7%BB%9C%E7%BA%AFJava%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F.png" alt="JDBC体系结构图"></p>
<h3 id="本地协议的纯Java-驱动程序"><a href="#本地协议的纯Java-驱动程序" class="headerlink" title="本地协议的纯Java 驱动程序"></a>本地协议的纯Java 驱动程序</h3><ul>
<li>多数数据库厂商已经支持允许客户程序通过网络直接与数据库通信的网络协议。</li>
<li>这种类型的驱动程序完全使用Java 编写，通过与数据库建立的Socket连接，采用具体与厂商的网络协议把JDBC 调用转换为直接连接的网络调用</li>
</ul>
<p>![JDBC体系结构图](笔记-JDBC/本地协议的纯 Java 驱动程序.png)</p>
<h2 id="Driver接口"><a href="#Driver接口" class="headerlink" title="Driver接口"></a>Driver接口</h2><ul>
<li><strong>Java.sql.Driver 接口是所有JDBC 驱动程序需要实现的接口</strong>。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现</li>
<li>在程序中不需要直接去访问实现了Driver接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现</li>
</ul>
<h2 id="JDBC编程六步"><a href="#JDBC编程六步" class="headerlink" title="JDBC编程六步"></a>JDBC编程六步</h2><ol>
<li><strong>加载与注册JDBC驱动</strong>(连接哪个品牌的数据库)</li>
<li><strong>建立连接</strong>(表示JVM进程和数据库进程间的通道打开了)</li>
<li><strong>获取数据库操作对象</strong>(专门执行SQL语句的对象)</li>
<li><strong>执行SQL语句</strong>(statement专门执行SQL语句)</li>
<li><strong>处理查询结果集</strong></li>
<li><strong>释放资源</strong></li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_Query</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">// 也可以用这种方式注册驱动</span></span><br><span class="line">            <span class="comment">// DriverManager.registerDriver(new Driver());</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2.获取连接</span></span><br><span class="line">            String url = <span class="string">"jdbc:mysql://localhost:3306/stu?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8"</span>;</span><br><span class="line">            conn = DriverManager.getConnection(url,<span class="string">"root"</span>,<span class="string">"rootrr"</span>);</span><br><span class="line">            <span class="comment">// 3.获取数据库操作对象，使用此种方式会被SQl注入</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4.执行SQL语句</span></span><br><span class="line">            String sql = <span class="string">"select * from class"</span>;</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 5.处理查询结果集</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 一、以getString()形式取出，参数可以是下标或**实际列名**</span></span><br><span class="line">            <span class="comment">/*while(rs.next()) &#123;</span></span><br><span class="line"><span class="comment">                // getString(),不管什么类型都以String形式取出</span></span><br><span class="line"><span class="comment">                String cid = rs.getString("cid"); </span></span><br><span class="line"><span class="comment">                String cname = rs.getString("cname"); </span></span><br><span class="line"><span class="comment">                String cnum = rs.getString("cnum"); </span></span><br><span class="line"><span class="comment">                System.out.println(cid + "," + cname + "," + cnum);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="comment">// 二、以其他getXxxx方法取出</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> cid = rs.getInt(<span class="string">"cid"</span>);</span><br><span class="line">                String cname = rs.getString(<span class="string">"cname"</span>);</span><br><span class="line">                <span class="keyword">int</span> cnum = rs.getInt(<span class="string">"cnum"</span>);</span><br><span class="line">                System.out.println(cid + <span class="string">","</span> + cname + <span class="string">","</span> + cnum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6.释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;      </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="加载与注册JDBC驱动"><a href="#加载与注册JDBC驱动" class="headerlink" title="加载与注册JDBC驱动"></a>加载与注册JDBC驱动</h3><ul>
<li>DriverManager 类是驱动程序管理器类，负责管理驱动程序</li>
<li>加载 JDBC 驱动可以调用Class类的静态方法forName()，向其传递要加载的JDBC 驱动的类名</li>
<li>通常不用显式调用DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为<strong>Driver接口的驱动程序类都包含了静态代码块</strong>，在这个静态代码块中，<strong>会调用DriverManager.registerDriver() 方法来注册自身的一个实例</strong></li>
</ul>
<h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><ul>
<li>可以调用DriverManager 类的 getConnection() 方法建立到数据库的连接</li>
<li>JDBCURL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个URL 选择正确的驱动程序，从而建立到数据库的连接。</li>
<li>JDBCURL的标准由三部分组成，各部分间用冒号分隔。<ul>
<li>例：<code>jdbc:mysql://localhost:3306/stu</code></li>
<li>协议：JDBCURL中的协议总是<strong>jdbc</strong> </li>
<li>子协议：子协议用于标识一个数据库驱动程序， 例：mysql</li>
<li>子名称：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了定位数据库提供足够的信息，例：localhost:3306/stu</li>
</ul>
</li>
</ul>
<h3 id="获取数据库操作对象"><a href="#获取数据库操作对象" class="headerlink" title="获取数据库操作对象"></a>获取数据库操作对象</h3><ul>
<li>在 java.sql包中有 3 个接口分别定义了对数据库的调用的不同方式<ul>
<li>Statement</li>
<li>PrepatedStatement</li>
<li>CallableStatement</li>
</ul>
</li>
</ul>
<h4 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h4><ul>
<li>通过调用 Connection对象的 createStatement 方法创建该对象。该对象用于执行静态的SQL 语句，并且返回执行结果</li>
<li>Statement接口中定义了下列方法用于执行SQL 语句：<ul>
<li><strong>ResultSet excuteQuery(String sql)</strong></li>
<li><strong>int excuteUpdate(String sql)</strong></li>
</ul>
</li>
</ul>
<h5 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h5><ul>
<li>通过调用 Statement对象的excuteQuery()方法创建该对象</li>
<li>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，<strong>ResultSet接口由数据库厂商实现</strong></li>
<li>ResultSet 对象维护了一个指向当前数据行的游标，初始的时候，游标在第一行之前，可以通过ResultSet对象的next()方法移动到下一行</li>
<li>ResultSet 接口的常用方法：<ul>
<li>booleannext()</li>
<li>getString()</li>
<li>……</li>
</ul>
</li>
</ul>
<h4 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h4><ul>
<li>可以通过<strong>调用Connection对象的 preparedStatement() 方法获取</strong> PreparedStatement 对象</li>
<li>PreparedStatement 接口是 Statement的子接口，它表示一条预编译过的SQL 语句</li>
<li>PreparedStatement 对象所代表的SQL 语句中的参数用问号<code>?</code>来表示，调用PreparedStatement 对象的 <strong>setXXX() 方法来设置这些参数</strong>. setXXX() 方法有两个参数，第一个参数是要设置的SQL 语句中的参数的索引(<strong>从 1 开始</strong>)，第二个是设置的SQL 语句中的参数的值</li>
</ul>
<h2 id="Apache—DBUtils"><a href="#Apache—DBUtils" class="headerlink" title="Apache—DBUtils"></a>Apache—DBUtils</h2><p>commons-dbutils是 Apache组织提供的一个<strong>开源JDBC工具类库</strong>，它是对<strong>JDBC的简单封装</strong>。</p>
<h3 id="QueryRunner类"><a href="#QueryRunner类" class="headerlink" title="QueryRunner类"></a>QueryRunner类</h3><p>该类简单化了SQL查询，它与<strong>ResultSetHandler</strong>组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</p>
<p>QueryRunner类提供了两个构造方法：</p>
<ul>
<li>默认的无参构造方法</li>
<li>需要一个 javax.sql.DataSource来作参数的构造方法。</li>
</ul>
<h3 id="ResultSetHandler接口"><a href="#ResultSetHandler接口" class="headerlink" title="ResultSetHandler接口"></a>ResultSetHandler接口</h3><p>该接口用于处理java.sql.ResultSet，将数据按要求转换为另一种形式。ResultSetHandler接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p>
<h4 id="ResultSetHandler-接口的实现类"><a href="#ResultSetHandler-接口的实现类" class="headerlink" title="ResultSetHandler 接口的实现类"></a>ResultSetHandler 接口的实现类</h4><ul>
<li><strong>ArrayHandler</strong>：把结果集中的第一行数据转成对象数组</li>
<li><strong>ArrayListHandler</strong>：把结果集中的每一行数据都转成一个数组，再存放到List中。</li>
<li><strong>BeanHandler</strong>：将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li>
<li><strong>BeanListHandler</strong>：将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li>
<li><strong>ColumnListHandler</strong>：将结果集中某一列的数据存放到List中</li>
<li><strong>KeyedHandler(name)</strong>：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li>
<li><strong>MapHandler</strong>：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li>
<li><strong>MapListHandler</strong>：将结果集中的每一行数据都封装到一个Map里，然后再存放到List。</li>
</ul>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>Druid</tag>
        <tag>JDBC</tag>
        <tag>DBUtils</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-MyBatis</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-MyBatis/</url>
    <content><![CDATA[<p>施工中</p>
<a id="more"></a>

<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0. 简介"></a>0. 简介</h2><p>MyBatis是一个支持定制化SQL，存储过程及高级映射的持久层框架。可使用简单的XML或注解用于配置或原始映射，将接口和POJO(Plain Ordinary Java Object,普通Java对象)映射成数据库中的记录。它封装了很多JDBC的细节，使开发者只需关注SQL本身。它使用ORM(Object  Relational  Mapping)思想实现了结果集的封装</p>
<h2 id="1-MyBatis主配置文件"><a href="#1-MyBatis主配置文件" class="headerlink" title="1. MyBatis主配置文件"></a>1. MyBatis主配置文件</h2><p>SqlMapConfig.xml里有一堆标签。这些标签都在<code>&lt;configuration&gt;</code>标签里，<strong>有严格的顺序</strong></p>
<p>标签顺序：properties，settings，typeAliases，typeHandlers，objectFactory，objectWrapperFactory，reflectFactory，plugins，enviroments，databaseIdProvider，mappers</p>
<h3 id="1-0-properties"><a href="#1-0-properties" class="headerlink" title="1.0. properties"></a>1.0. properties</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbcConfig.properties"</span> <span class="attr">url</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>该标签内有两个属性：</p>
<ul>
<li>resource属性：按照类路径的写法来写,且该配置文件需在<strong>类路径</strong>下。例：<code>resource=&quot;com/mybatis/cn/db/db.properties&quot;</code></li>
<li>URL属性配置：按照URL的写法写地址。例：<code>url=&quot;file:///E:\xxx\mybatis\src\com\mybatis\cn\db\db.properties&quot;</code></li>
<li>可在标签内部配置连接数据库的信息，也可通过${}去引用外部配置文件信息</li>
</ul>
<h3 id="2-0-settings"><a href="#2-0-settings" class="headerlink" title="2.0. settings"></a>2.0. settings</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>lazyLoadingEnable</strong>：延迟加载(<strong>懒加载</strong>)的全局开关，默认值为：false</li>
<li>aggressiveLazyLoading：侵入延迟加载，默认值为：true。禁用属性则按需加载</li>
<li>mapUnderscoreToCamelCase：是否开启自动驼峰命名规则（camel case）映射，默认值：false。数据库字段A_COLUMN 对应 实体类属性aColumn</li>
</ul>
<h3 id="3-0-typeAliases"><a href="#3-0-typeAliases" class="headerlink" title="3.0. typeAliases"></a>3.0. typeAliases</h3><p>别名处理器，为实体类配置别名。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type为要配置的全限定类名，光配这一个属性的话默认别名为类名的小写  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"xxx.xx.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 用于指定要配置别名的包，指定后该包下的实体类都会注册别名，且别名就是类名，不区分大小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"xxx.xx.entity"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-0-envrionments"><a href="#4-0-envrionments" class="headerlink" title="4.0. envrionments"></a>4.0. envrionments</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- default：指定使用某种环境，达到快速切换的目的，填的是envrioment标签的id属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--MySQL配置环境--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">	<span class="comment">&lt;!-- 配置事务管理器 </span></span><br><span class="line"><span class="comment">		 type属性：事务管理器类型 </span></span><br><span class="line"><span class="comment">			JDBC（JdbcTransactionFactory）；</span></span><br><span class="line"><span class="comment">			MANAGED（ManagedTransactionFactory）；自定义事务管理器，需实现TransactionFactory接口，type为全限定类名</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据源连接池</span></span><br><span class="line"><span class="comment">			 type属性：</span></span><br><span class="line"><span class="comment">				POOLED：采用传统的javax.sql.DataSource规范中的连接池，MyBatis中有针对其规范的实现</span></span><br><span class="line"><span class="comment">				UNPOOLED：采用传统的获取连接的方式，虽然也实现了javax.sql.DataSource接口，但没有使用						  池的思想</span></span><br><span class="line"><span class="comment">				JNDI：采用服务器提供的JNDI技术实现，来获取DataSource对象。注：如果不是Web或Maven的war					   工程，则不能使用</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--配置连接数据库的4个基本信息--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;&#125;"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;&#125;"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;&#125;"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-0-databaseIdProvider"><a href="#5-0-databaseIdProvider" class="headerlink" title="5.0. databaseIdProvider"></a>5.0. databaseIdProvider</h3><p>用来支持多数据库厂商的标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"DB2"</span> <span class="attr">value</span>=<span class="string">"db2"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-0-mappers"><a href="#6-0-mappers" class="headerlink" title="6.0. mappers"></a>6.0. mappers</h3><p>注意：class属性和package属性，对mapper接口和mapper映射文件的位置有要求，<strong>二者需在同一目录结构下</strong>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.AuthorMapper"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.mybatis.builder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-接口映射文件"><a href="#2-接口映射文件" class="headerlink" title="2. 接口映射文件"></a>2. 接口映射文件</h2><h3 id="2-0-mapper标签"><a href="#2-0-mapper标签" class="headerlink" title="2.0. mapper标签"></a>2.0. mapper标签</h3><p>顶级标签，有个属性namespace，对应<strong>接口</strong>的全类名</p>
<h4 id="2-1-resultMap标签"><a href="#2-1-resultMap标签" class="headerlink" title="2.1. resultMap标签"></a>2.1. resultMap标签</h4><p>配置<strong>列名</strong>和实体类的<strong>属性名</strong>的对应关系。</p>
<p>该标签一旦配置就尽量让JavaBean的<strong>所有</strong>属性和数据库的列名一一对应，否则封装数据时，很有可能出现null的情况。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"实体类的全限定类名"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- -主键字段的对应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非主键字段的对应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-select标签"><a href="#2-2-select标签" class="headerlink" title="2.2. select标签"></a>2.2. select标签</h4><ul>
<li><strong>id</strong>：唯一标识符，对应相关接口的<strong>方法名</strong></li>
</ul>
<ul>
<li><p><strong>parameterType</strong>：传入参数的全类名或别名，可以不写，MyBatis会根据类型推断器(TypeHandler)<strong>自动推断</strong>。</p>
</li>
<li><p><strong>resultType</strong>：返回结果的全限定类名或别名。如果返回的是集合，那应该设置为集合的泛型，而不是集合本身的类型。 <strong>resultType 和 resultMap 之间只能同时使用一个</strong>。</p>
</li>
<li><p><strong>resultMap</strong>：对外部resultMap的引用，resultType 和 resultMap 之间只能同时使用一个。</p>
</li>
<li><p><strong>flushCache</strong>：默认值为false。true时，一级缓存、二级缓存都会被清除</p>
<p>……</p>
</li>
</ul>
<h5 id="查询所有示例"><a href="#查询所有示例" class="headerlink" title="查询所有示例"></a>查询所有示例</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAll"</span> <span class="attr">reslutType</span>=<span class="string">"实体类的全限定类名"</span>&gt;</span></span><br><span class="line">    select * from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="查询单个示例"><a href="#查询单个示例" class="headerlink" title="查询单个示例"></a>查询单个示例</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryOne"</span> <span class="attr">parameterType</span>=<span class="string">"INT或Integer或java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"实体类的全限定类名"</span>&gt;</span></span><br><span class="line">    select * from user where uId=#&#123;uId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="模糊查询示例"><a href="#模糊查询示例" class="headerlink" title="模糊查询示例"></a>模糊查询示例</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"实体类的全限定类名"</span>&gt;</span></span><br><span class="line">    select * from user where username like #&#123;username&#125;; （%在测试类或主要代码类的方法中添加！！）</span><br><span class="line">    或者使用 select * from user where username like '%$&#123;value&#125;%';</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="联合查询-重要"><a href="#联合查询-重要" class="headerlink" title="联合查询(重要)"></a>联合查询(重要)</h5><h6 id="联合查询之级联属性封装结果集"><a href="#联合查询之级联属性封装结果集" class="headerlink" title="联合查询之级联属性封装结果集"></a>联合查询之级联属性封装结果集</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.xxx.mybatis.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyDifEmp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"dept.id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_name"</span> <span class="attr">property</span>=<span class="string">"dept.departmentName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpAndDept"</span> <span class="attr">resultMap</span>=<span class="string">"MyDifEmp"</span>&gt;</span></span><br><span class="line">    SELECT e.id id,e.last_name last_name,e.gender gender,e.d_id d_id,</span><br><span class="line">    d.id did,d.dept_name dept_name FROM tbl_employee e,tbl_dept d</span><br><span class="line">    WHERE e.d_id=d.id AND e.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="联合查询之嵌套结果集"><a href="#联合查询之嵌套结果集" class="headerlink" title="联合查询之嵌套结果集"></a>联合查询之嵌套结果集</h6><p>使用<strong>association标签</strong>定义关联的单个对象的封装规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyDifEmp2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">&lt;!--  association可以指定联合的javaBean对象</span></span><br><span class="line"><span class="comment">              property="dept"：指定JavaBean中哪个属性是联合的对象，填的是javaBean中的属性名</span></span><br><span class="line"><span class="comment">              javaType:指定这个属性对象的类型[不能省略]</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> <span class="attr">javaType</span>=<span class="string">"com.atguigu.mybatis.bean.Department"</span>&gt;</span></span><br><span class="line">	           <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">	           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_name"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpAndDept"</span> <span class="attr">resultMap</span>=<span class="string">"MyDifEmp"</span>&gt;</span></span><br><span class="line">        SELECT e.id id,e.last_name last_name,e.gender gender,e.d_id d_id,</span><br><span class="line">        d.id did,d.dept_name dept_name FROM tbl_employee e,tbl_dept d</span><br><span class="line">         WHERE e.d_id=d.id AND e.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用<strong>collection标签</strong>定义关联的集合类型的属性封装规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.atguigu.mybatis.bean.Department"</span> <span class="attr">id</span>=<span class="string">"MyDept"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_name"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			collection定义关联集合类型的属性的封装规则 </span></span><br><span class="line"><span class="comment">			ofType:指定集合里面元素的类型</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span> <span class="attr">ofType</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 定义这个集合中元素的封装规则 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"eid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptByIdPlus"</span> <span class="attr">resultMap</span>=<span class="string">"MyDept"</span>&gt;</span></span><br><span class="line">		SELECT d.id did,d.dept_name dept_name,</span><br><span class="line">				e.id eid,e.last_name last_name,e.email email,e.gender gender</span><br><span class="line">		FROM tbl_dept d</span><br><span class="line">		LEFT JOIN tbl_employee e</span><br><span class="line">		ON d.id=e.d_id</span><br><span class="line">		WHERE d.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="分步查询-重要"><a href="#分步查询-重要" class="headerlink" title="分步查询(重要)"></a>分步查询(重要)</h5><h6 id="使用association标签进行分步查询"><a href="#使用association标签进行分步查询" class="headerlink" title="使用association标签进行分步查询"></a>使用association标签进行分步查询</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyEmpByStep"</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	 	<span class="comment">&lt;!-- association定义关联对象的封装规则</span></span><br><span class="line"><span class="comment">	 		select:表明当前属性是调用select指定的方法查出的结果</span></span><br><span class="line"><span class="comment">	 		column:指定将哪一列的值传给select指定的方法</span></span><br><span class="line"><span class="comment">	 		</span></span><br><span class="line"><span class="comment">	 		流程说明：使用select指定的方法（传入column指定的这列参数的值）查出对象，</span></span><br><span class="line"><span class="comment">			并封装给property指定的属性</span></span><br><span class="line"><span class="comment">	 	 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> </span></span><br><span class="line"><span class="tag">	 		<span class="attr">select</span>=<span class="string">"com.atguigu.mybatis.dao.DepartmentMapper.getDeptById"</span></span></span><br><span class="line"><span class="tag">	 		<span class="attr">column</span>=<span class="string">"d_id"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  public Employee getEmpByIdStep(Integer id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdStep"</span> <span class="attr">resultMap</span>=<span class="string">"MyEmpByStep"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">        and 1=1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="使用collection标签进行分步查询"><a href="#使用collection标签进行分步查询" class="headerlink" title="使用collection标签进行分步查询"></a>使用collection标签进行分步查询</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- collection：分段查询 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 扩展：多列的值传递过去：</span></span><br><span class="line"><span class="comment">			将多列的值封装map传递；</span></span><br><span class="line"><span class="comment">			column="&#123;key1=column1,key2=column2&#125;"</span></span><br><span class="line"><span class="comment">		fetchType="lazy"：表示使用延迟加载；</span></span><br><span class="line"><span class="comment">				- lazy：延迟</span></span><br><span class="line"><span class="comment">				- eager：立即</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.atguigu.mybatis.bean.Department"</span> <span class="attr">id</span>=<span class="string">"MyDeptStep"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"dept_name"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- collection标签分步查询说明：</span></span><br><span class="line"><span class="comment"> 		 从&lt;select&gt;标签查询出的结果中获取指定的列(由column指定)，</span></span><br><span class="line"><span class="comment">		 再将该列的属性传给select属性指向的另一个select查询语句，</span></span><br><span class="line"><span class="comment">		 之后查询出来的结果封装给property指定的属性	</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">"com.atguigu.mybatis.dao.EmployeeMapperPlus.getEmpsByDeptId"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">"&#123;deptId=id&#125;"</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">fetchType</span>=<span class="string">"lazy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public Department getDeptByIdStep(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptByIdStep"</span> <span class="attr">resultMap</span>=<span class="string">"MyDeptStep"</span>&gt;</span></span><br><span class="line">    select id,dept_name from tbl_dept where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-insert标签"><a href="#2-3-insert标签" class="headerlink" title="2.3. insert标签"></a>2.3. insert标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"参数类型的全限定类名"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置插入操作后，获取插入数据的主键id</span></span><br><span class="line"><span class="comment">          keyProperty：查出主键值封装给JavaBean的哪个属性</span></span><br><span class="line"><span class="comment">          order="BEFORE"：当前sql在插入sql之前运行，“AFTER”：当前sql在插入sql之后运行</span></span><br><span class="line"><span class="comment">          resultType：查出的数据的返回值类型</span></span><br><span class="line"><span class="comment">      &gt;</span></span><br><span class="line"><span class="comment">      &lt;selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER"&gt;</span></span><br><span class="line"><span class="comment">          select last_insert_id();</span></span><br><span class="line"><span class="comment">      &lt;/selectKey&gt;</span></span><br><span class="line"><span class="comment">      insert into user(id,username,address,sex,birhtday) values(#&#123;&#125;,#&#123;&#125;,#&#123;&#125;,#&#123;&#125;,#&#123;&#125;);</span></span><br><span class="line"><span class="comment">&lt;/insert&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此处使用useGeneratedKeys属性开启了MySQL的自增主键获取策略；</span></span><br><span class="line"><span class="comment">		keyProperty表示将获取到自增主键封装给JavaBean的哪个属性；</span></span><br><span class="line"><span class="comment">		这里的JavaBean指的是parameterType指定的对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"参数类型的全限定类名"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    insert into user(username,address,sex,birhtday) values(#&#123;&#125;,#&#123;&#125;,#&#123;&#125;,#&#123;&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>采用第一种方式，selectKey标签将获取的id属性封装到int里</li>
<li>采用第二种方式，selectKey标签将获取的id属性封装到ParameterType对应的实体类类型里</li>
</ul>
<h4 id="2-4-update标签"><a href="#2-4-update标签" class="headerlink" title="2.4. update标签"></a>2.4. update标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"参数类型的全限定类名"</span>&gt;</span></span><br><span class="line">    update 表名 set username=#&#123;username&#125;,address=#&#123;address&#125;,</span><br><span class="line">    sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125; where id=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-鉴别器标签"><a href="#2-5-鉴别器标签" class="headerlink" title="2.5. 鉴别器标签"></a>2.5. 鉴别器标签</h4><p><strong>待视频回忆</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- =======================鉴别器============================ --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;discriminator javaType=""&gt;&lt;/discriminator&gt;</span></span><br><span class="line"><span class="comment">		鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为</span></span><br><span class="line"><span class="comment">		封装Employee：</span></span><br><span class="line"><span class="comment">			如果查出的是女生：就把部门信息查询出来，否则不查询；</span></span><br><span class="line"><span class="comment">			如果是男生，把last_name这一列的值赋值给email;</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyEmpDis"</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	 	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	 		column：指定判定的列名</span></span><br><span class="line"><span class="comment">	 		javaType：列值对应的java类型  --&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"string"</span> <span class="attr">column</span>=<span class="string">"gender"</span>&gt;</span></span><br><span class="line">	 		<span class="comment">&lt;!--女生  resultType:指定封装的结果类型；不能缺少。--&gt;</span></span><br><span class="line"></span><br><span class="line">	 		<span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">resultType</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">	 			<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> </span></span><br><span class="line"><span class="tag">			 		<span class="attr">select</span>=<span class="string">"com.atguigu.mybatis.dao.DepartmentMapper.getDeptById"</span></span></span><br><span class="line"><span class="tag">			 		<span class="attr">column</span>=<span class="string">"d_id"</span>&gt;</span></span><br><span class="line">		 		<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	 		<span class="comment">&lt;!--男生 ;如果是男生，把last_name这一列的值赋值给email; --&gt;</span></span><br><span class="line"></span><br><span class="line">	 		<span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultType</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">		 		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">			 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">			 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">			 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-入门示例配置"><a href="#3-入门示例配置" class="headerlink" title="3. 入门示例配置"></a>3. 入门示例配置</h2><p>见MyBatis入门配置示例</p>
<p>使用mapper代理方式的规范要求：</p>
<ul>
<li>映射文件的<strong>namespace要和接口的完整路径相同</strong></li>
<li>映射文件中的<strong>各种功能标签的id要和接口中定义的方法名相同</strong></li>
<li>映射文件中的功能性标签的参数类型 <strong>parameterType 要和接口中的方法的参数类型一致</strong></li>
<li>映射文件中的功能性标签的返回值类型 <strong>resultType 要和接口中定义的方法的返回值类型一致</strong><ul>
<li>如果接口中返回值类型是个集合，则映射文件中的返回值类型只需要写泛型就行了</li>
</ul>
</li>
</ul>
<h2 id="4-MyBatis的参数处理"><a href="#4-MyBatis的参数处理" class="headerlink" title="4. MyBatis的参数处理"></a>4. MyBatis的参数处理</h2><h3 id="4-0-单个参数"><a href="#4-0-单个参数" class="headerlink" title="4.0. 单个参数"></a>4.0. 单个参数</h3><p>MyBatis不会做特殊处理。即<code>#{参数值}</code>的形式，<code>{}</code>里的参数值写啥都行（自定义类型和自定义包装类型不行）</p>
<h3 id="4-1-多个参数"><a href="#4-1-多个参数" class="headerlink" title="4.1. 多个参数"></a>4.1. 多个参数</h3><p>MyBatis会做特殊处理。多个参数会被封装成一个Map</p>
<ul>
<li>Map的key为param1到paramN的形式，或者参数的索引也行</li>
<li>value就是传入的参数值。</li>
<li>可用<code>#{}</code>的方式从Map中获取指定的key对应的value值</li>
</ul>
<ul>
<li>也可以在接口的方法的参数上用<strong>@Param</strong>给方法参数明确命名来指定Map对应的key。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id,String lastName)</span>;</span><br><span class="line"><span class="comment">// 取值：id==&gt;#&#123;id/param1&#125;    lastName==&gt;#&#123;param2&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(Integer id,@Param(<span class="string">"e"</span>)</span>Employee emp)</span>;</span><br><span class="line"><span class="comment">// 取值：id==&gt;#&#123;param1&#125;    lastName==&gt;#&#123;param2.lastName/e.lastName&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-POJO"><a href="#4-2-POJO" class="headerlink" title="4.2. POJO"></a>4.2. POJO</h3><p>多个参数正好是业务逻辑的数据模型，可直接传POJO。然后就可以用<code>#{属性名}</code>的方式取出传入的POJO对应的属性值。</p>
<h3 id="4-3-Map"><a href="#4-3-Map" class="headerlink" title="4.3. Map"></a>4.3. Map</h3><p>多个参数不是业务逻辑中的数据模型，没有对应的POJO，不经常使用，为了方便，也可传Map。<br>直接用<code>#{key}</code>的形式取出Map中对应的值。</p>
<h3 id="4-4-TO"><a href="#4-4-TO" class="headerlink" title="4.4. TO"></a>4.4. TO</h3><p>多个参数不是业务逻辑中的数据模型，但经常使用，推荐编写一个<strong>TO</strong>（Transfer Object）数据传输对象。</p>
<h3 id="4-5-和-的区别"><a href="#4-5-和-的区别" class="headerlink" title="4.5. #{}和${}的区别"></a>4.5. #{}和${}的区别</h3><p><strong>#{}</strong>， 是以<strong>预编译</strong>的形式，将参数设置到sql语句中。PreparedStatement，防止SQL注入</p>
<p><strong>${}</strong>，取出的值<strong>直接拼装</strong>到SQL语句中，会有安全问题</p>
<p>大多数情况，都应该使用<strong>#{}</strong>。但分表拆分、排序等操作，由于原生JDBC不支持占位符，这时可以使用<strong>${}</strong>。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> $&#123;<span class="keyword">year</span>&#125;_salary <span class="keyword">WHERE</span> xxx;</span><br><span class="line">SELCT * FROM tbl_employee order by $&#123;f_name&#125; $&#123;order&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="5-动态SQL"><a href="#5-动态SQL" class="headerlink" title="5. 动态SQL"></a>5. 动态SQL</h2><h3 id="5-0-if和where标签"><a href="#5-0-if和where标签" class="headerlink" title="5.0. if和where标签"></a>5.0. if和where标签</h3><p>查询的时候如果某些条件没带sql拼装可能会有问题，解决方法：<br>1、给where后面加上1=1，以后的条件都and xxx.<br>2、mybatis使用where标签来将所有的查询条件包括在内。mybatis就会将where标签中拼装的sql，多出来的and或者or去掉。<strong>where标签只会去掉第一个多出来的and或者or</strong>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionIf"</span> <span class="attr">resultType</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">	 	select * from tbl_employee</span><br><span class="line">	 	<span class="comment">&lt;!-- where --&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		 	<span class="comment">&lt;!-- test：判断表达式（OGNL）</span></span><br><span class="line"><span class="comment">		 	OGNL参照PPT或者官方文档。</span></span><br><span class="line"><span class="comment">		 	</span></span><br><span class="line"><span class="comment">		 	遇见特殊符号应该去写转义字符：</span></span><br><span class="line"><span class="comment">		 	&amp;&amp;：</span></span><br><span class="line"><span class="comment">		 	--&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">		 		id=#&#123;id&#125;</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line">		 		and last_name like #&#123;lastName&#125;</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line">		 		and email=#&#123;email&#125;</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">		 	<span class="comment">&lt;!-- OGNL会进行字符串与数字的转换判断  "0"==0 --&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender==0 or gender==1"</span>&gt;</span></span><br><span class="line">		 	 	and gender=#&#123;gender&#125;</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-1-trim标签"><a href="#5-1-trim标签" class="headerlink" title="5.1. trim标签"></a>5.1. trim标签</h3><p>trim标签可自定义字符串的截取规则。</p>
<p>trim标签里的各项属性：</p>
<ul>
<li>prefix=”前缀’’。trim标签体中是整个字符串拼串后的结果。prefix给拼串后的整个字符串加一个前缀 </li>
<li>prefixOverrides=”前缀覆盖”： <strong>去掉整个字符串前面多余的字符</strong>，该属性里面写什么就去除什么</li>
<li>suffix=”后缀”。suffix给拼串后的整个字符串加一个后缀 </li>
<li>suffixOverrides=”后缀覆盖”：<strong>去掉整个字符串后面多余的字符</strong>，该属性里面写什么就去除什么</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">		 		id=#&#123;id&#125; and</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line">		 		last_name like #&#123;lastName&#125; and</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line">		 		email=#&#123;email&#125; and</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">		 	<span class="comment">&lt;!-- OGNL会进行字符串与数字的转换判断  "0"==0 --&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender==0 or gender==1"</span>&gt;</span></span><br><span class="line">		 	 	gender=#&#123;gender&#125;</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-choose标签"><a href="#5-2-choose标签" class="headerlink" title="5.2. choose标签"></a>5.2. choose标签</h3><p>choose (when, otherwise):分支选择；相当于带了break的swtich-case</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionChoose"</span> <span class="attr">resultType</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">        select * from tbl_employee </span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">                                 id=#&#123;id&#125;</span><br><span class="line">                      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"lastName!=null"</span>&gt;</span></span><br><span class="line">                                last_name like #&#123;lastName&#125;</span><br><span class="line">                      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"email!=null"</span>&gt;</span></span><br><span class="line">                                email = #&#123;email&#125;</span><br><span class="line">                      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                                gender = 0</span><br><span class="line">                      <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-foreach标签"><a href="#5-3-foreach标签" class="headerlink" title="5.3. foreach标签"></a>5.3. foreach标签</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionForeach"</span> <span class="attr">resultType</span>=<span class="string">"com.xxx.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">	 	select * from tbl_employee</span><br><span class="line"></span><br><span class="line">	 	<span class="comment">&lt;!--#&#123;变量名&#125;就能取出变量的值也就是当前遍历出的元素--&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">item</span>=<span class="string">"item_id"</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">separator</span>=<span class="string">","</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">open</span>=<span class="string">"where id in("</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">	 		#&#123;item_id&#125;  （此值与item的属性值一致）</span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用foreach标签时，<strong>传入的参数要为包装类</strong>(包装类里有个属性的类型为List类型)</p>
<p>foreach标签里的各项属性解释：</p>
<ul>
<li>collection(属性)：代表要遍历的集合元素，不要写<code>#{}</code></li>
<li>open：代表语句的开始部分</li>
<li>close：代表语句的结束部分</li>
<li>item：代表遍历集合时生成的变量名</li>
<li>separator：所用的分隔符</li>
<li>index:索引。<strong>此处存疑</strong><br>遍历list的时候是index就是索引，item就是当前值<br>遍历map的时候index表示的就是map的key，item就是map的值</li>
</ul>
<h4 id="MySQL的批量插入"><a href="#MySQL的批量插入" class="headerlink" title="MySQL的批量插入"></a>MySQL的批量插入</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span>&gt;</span></span><br><span class="line">	 	insert into tbl_employee(</span><br><span class="line">    		<span class="comment">&lt;!-- 此处的include标签引用了SQL标签里的SQL语句 --&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColumn"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">	 	) </span><br><span class="line">		values</span><br><span class="line">		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">			(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>这种方式是执行了多条SQL，但需要数据库连接属性<strong>allowMultiQueries=true</strong>。</p>
<p>例：<strong>jdbc.url=jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这种方式需要数据库连接属性allowMultiQueries=true；</span></span><br><span class="line"><span class="comment">	 	这种分号分隔多个sql可以用于其他的批量操作（删除，修改） --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></span><br><span class="line">	 		insert into tbl_employee(last_name,email,gender,d_id)</span><br><span class="line">	 		values(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Oracle的批量插入"><a href="#Oracle的批量插入" class="headerlink" title="Oracle的批量插入"></a>Oracle的批量插入</h4><h5 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span> <span class="attr">databaseId</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line">	 	</span><br><span class="line">    <span class="comment">&lt;!-- oracle第一种批量方式,多个insert放在begin - end里面</span></span><br><span class="line"><span class="comment">		例：</span></span><br><span class="line"><span class="comment"> 		begin</span></span><br><span class="line"><span class="comment">			    insert into employees(employee_id,last_name,email) </span></span><br><span class="line"><span class="comment">			    values(employees_seq.nextval,'test_001','test_001@atguigu.com');</span></span><br><span class="line"><span class="comment">			    insert into employees(employee_id,last_name,email) </span></span><br><span class="line"><span class="comment">			    values(employees_seq.nextval,'test_002','test_002@atguigu.com');</span></span><br><span class="line"><span class="comment">		end;</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">open</span>=<span class="string">"begin"</span> <span class="attr">close</span>=<span class="string">"end;"</span>&gt;</span></span><br><span class="line">    insert into employees(employee_id,last_name,email) </span><br><span class="line">     values(employees_seq.nextval,#&#123;emp.lastName&#125;,#&#123;emp.email&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">	 	</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span> <span class="attr">databaseId</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line">	 	</span><br><span class="line">	 	<span class="comment">&lt;!-- oracle第二种批量方式，利用中间表</span></span><br><span class="line"><span class="comment"> 			例：</span></span><br><span class="line"><span class="comment">			insert into employees(employee_id,last_name,email)</span></span><br><span class="line"><span class="comment">		       select employees_seq.nextval,lastName,email from(</span></span><br><span class="line"><span class="comment">		              select 'test_a_01' lastName,'test_a_e01' email from dual</span></span><br><span class="line"><span class="comment">		              union</span></span><br><span class="line"><span class="comment">		              select 'test_a_02' lastName,'test_a_e02' email from dual</span></span><br><span class="line"><span class="comment">		              union</span></span><br><span class="line"><span class="comment">		              select 'test_a_03' lastName,'test_a_e03' email from dual</span></span><br><span class="line"><span class="comment">		       )</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">	 	insert into employees(</span><br><span class="line">	 		<span class="comment">&lt;!-- 引用外部定义的sql --&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColumn"</span>&gt;</span></span><br><span class="line">	 			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testColomn"</span> <span class="attr">value</span>=<span class="string">"abc"</span>/&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">	 	)</span><br><span class="line">	 	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">"union"</span></span></span><br><span class="line"><span class="tag">	 			<span class="attr">open</span>=<span class="string">"select employees_seq.nextval,lastName,email from("</span></span></span><br><span class="line"><span class="tag">	 			<span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">	 			select #&#123;emp.lastName&#125; lastName,#&#123;emp.email&#125; email from dual</span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-SQL标签"><a href="#5-4-SQL标签" class="headerlink" title="5.4. SQL标签"></a>5.4. SQL标签</h3><p>该标签将经常将要查询的列名，或者插入用的列名抽取出来方便引用。然后在增删改查的标签里用<strong>include标签</strong>来引用已经抽取的sql语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"insertColumn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">        employee_id,last_name,email</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">        last_name,email,gender,d_id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5-bind标签"><a href="#5-5-bind标签" class="headerlink" title="5.5. bind标签"></a>5.5. bind标签</h3><p>bind标签可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值。</p>
<p><strong>待验证和回忆</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsTestInnerParameter"</span> <span class="attr">resultType</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"_lastName"</span> <span class="attr">value</span>=<span class="string">"'%'+lastName+'%'"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">        select * from tbl_employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">              where last_name like #&#123;_lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">          select * from employees</span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">                where last_name like #&#123;_lastName&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-6-动态SQL内置对象"><a href="#5-6-动态SQL内置对象" class="headerlink" title="5.6. 动态SQL内置对象"></a>5.6. 动态SQL内置对象</h3><ul>
<li><strong>_parameter</strong>：代表整个参数<ul>
<li>如果只有单个参数，那么<strong>_parameter</strong>就是这个参数</li>
<li>如果有多个参数，这些参数会被封装为一个map。<strong>_parameter</strong>就是代表这个map</li>
</ul>
</li>
<li><strong>_databaseId</strong>：如果配置了databaseIdProvider标签的话。 <strong>_databaseId</strong>就是代表当前数据库的别名</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsTestInnerParameter"</span> <span class="attr">resultType</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	  		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">	  			select * from tbl_employee</span><br><span class="line">	  			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">	  				where last_name like #&#123;lastName&#125;</span><br><span class="line">	  			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	  		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	  		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">	  			select * from employees</span><br><span class="line">	  			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">	  				where last_name like #&#123;_parameter.lastName&#125;</span><br><span class="line">	  			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	  		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-MyBatis的缓存"><a href="#6-MyBatis的缓存" class="headerlink" title="6. MyBatis的缓存"></a>6. MyBatis的缓存</h2><p>MyBatis中默认定义了两级缓存。</p>
<h3 id="6-0-一级缓存"><a href="#6-0-一级缓存" class="headerlink" title="6.0. 一级缓存"></a>6.0. 一级缓存</h3><p>SqlSession级别的缓存，也称为<strong>本地缓存</strong>。默认开启。</p>
<h4 id="一级缓存失效的情况"><a href="#一级缓存失效的情况" class="headerlink" title="一级缓存失效的情况"></a>一级缓存失效的情况</h4><ul>
<li>SSM整合后，一级缓存就失效了。<strong>大概，待验证</strong></li>
<li>sqlSession不同</li>
<li>sqlSession相同，查询条件不同</li>
<li>sqlSession相同，两次查询之间执行了增删改操作（第二次查询可能对当前数据有影响）</li>
<li>sqlSession相同，手动清除了一级缓存</li>
</ul>
<h3 id="6-1-二级缓存"><a href="#6-1-二级缓存" class="headerlink" title="6.1. 二级缓存"></a>6.1. 二级缓存</h3><p>基于namespace级别的缓存，也称为<strong>全局缓存</strong>。需手动开启和配置。也可通过Cache接口自定义二级缓存。</p>
<h4 id="二级缓存的工作机制简述"><a href="#二级缓存的工作机制简述" class="headerlink" title="二级缓存的工作机制简述"></a>二级缓存的工作机制简述</h4><p>1、一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中</p>
<p>2、<strong>会话关闭后，一级缓存中的数据才会被保存到二级缓存中</strong>。新的会话查询信息，就可以参照二级缓存中的内容</p>
<h4 id="效果说明"><a href="#效果说明" class="headerlink" title="效果说明"></a>效果说明</h4><ul>
<li>不同namespace查出的数据会放在自己对应的缓存中（map），即查出的数据都<strong>会被默认先放在一级缓存中</strong>。</li>
<li><strong>只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中</strong></li>
<li>新会话开启后会先从二级缓存中查找。</li>
</ul>
<h4 id="如何开启二级缓存"><a href="#如何开启二级缓存" class="headerlink" title="如何开启二级缓存"></a>如何开启二级缓存</h4><ul>
<li>1、MyBatis的配置文件中<strong>开启全局二级缓存配置</strong>：&lt;setting name=”cacheEnabled” value=”true”/&gt;</li>
<li>2、在对应的mapper映射文件中配置<strong>&lt;cache/&gt;标签</strong>来使用二级缓存</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"FIFO"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">"60000"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">"false"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>cache相关属性解释：</p>
<ul>
<li>eviction:缓存的回收策略(默认的是 <strong>LRU</strong>)：<ul>
<li>LRU – 最近最少使用的：移除最长时间不被使用的对象。</li>
<li>FIFO – 先进先出：按对象进入缓存的顺序来移除它们。</li>
<li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</li>
<li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li>
</ul>
</li>
<li>flushInterval：缓存刷新间隔。缓存多长时间清空一次，默认不清空，设置单位为毫秒值</li>
<li>readOnly:是否只读。<ul>
<li>true：只读。mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。 mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快</li>
<li>false：非只读。mybatis觉得获取的数据可能会被修改。mybatis会利用序列化&amp;反序列的技术克隆一份新的数据给你。安全，速度慢</li>
</ul>
</li>
<li>size：缓存大小</li>
<li>type=””：指定自定义缓存的全类名，填写已实现Cache接口的类的全类名即可。</li>
<li>3、<strong>POJO需要实现序列化接口</strong></li>
</ul>
<h3 id="6-2-缓存的相关配置和属性"><a href="#6-2-缓存的相关配置和属性" class="headerlink" title="6.2. 缓存的相关配置和属性"></a>6.2. 缓存的相关配置和属性</h3><ul>
<li><strong>settings标签</strong>里cacheEnabled=true/false。false时关闭缓存（一级缓存一直可用的，二级缓存关闭)</li>
<li>select标签的useCache=”true/false”。false时不使用缓存（一级缓存依然使用，二级缓存不使用）</li>
<li>增删改标签的<strong>flushCache=”true”</strong>（增删改执行完成后就会清除一级和二级缓存）</li>
<li><strong>sqlSession.clearCache()</strong>只是清除当前session的一级缓存</li>
<li><strong>settings标签</strong>里localCacheScope(本地缓存作用域)属性，代表一级缓存SESSION。默认配置为SESSION，                                                                           使用STATEMENT可以禁用一级缓存        </li>
</ul>
<h3 id="6-3-第三方缓存配置"><a href="#6-3-第三方缓存配置" class="headerlink" title="6.3. 第三方缓存配置"></a>6.3. 第三方缓存配置</h3><p>导入第三方缓存包，再导入与第三方缓存整合的适配包，官方有。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mapper.xml中使用自定义缓存</span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">其它mapper.xml文件也可引用：</span><br><span class="line"><span class="comment">&lt;!-- 引用缓存：namespace：指定和哪个名称空间下的缓存一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache-ref</span> <span class="attr">namespace</span>=<span class="string">"com.atguigu.mybatis.dao.EmployeeMapper"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-SpEL表达式</title>
    <url>/2020/05/14/%E7%AC%94%E8%AE%B0-SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>SpEL表达式的使用说明</p>
<a id="more"></a>

<h1 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p><strong>SpringExpression Language</strong>，Spring表达式语言，简称SpEL。支持运行时查询并可以操作对象图。<br>和JSP页面上的<strong>EL</strong>表达式、Struts2中用到的<strong>OGNL</strong>表达式一样，SpEL根据JavaBean风格的<strong>getXxx()</strong>、<strong>setXxx()</strong>方法定义的属性<strong>访问对象图，</strong>完全符合我们熟悉的操作习惯。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>SpEL使用<code>#{…}</code>作为定界符，所有在大框号中的字符都将被认为是SpEL表达式。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="使用字面值"><a href="#使用字面值" class="headerlink" title="使用字面值"></a>使用字面值</h4><ul>
<li>整数<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"count"</span> <span class="attr">value</span>=<span class="string">"#&#123;5&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>小数<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">- <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"frequency"</span> <span class="attr">value</span>=<span class="string">"#&#123;89.7&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>科学计数法<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">- <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"capacity"</span> <span class="attr">value</span>=<span class="string">"#&#123;1e4&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>String类型<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“name”</span> <span class="attr">value</span>=<span class="string">"#&#123;'Chuck'&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">'name'</span>  <span class="attr">value</span>=<span class="string">'#&#123;"Chuck"&#125;'</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>Boolean<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enabled"</span> <span class="attr">value</span>=<span class="string">"#&#123;false&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="引用其他bean"><a href="#引用其他bean" class="headerlink" title="引用其他bean"></a>引用其他bean</h4></li>
</ul>
<p>此处待验证</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp04"</span> <span class="attr">class</span>=<span class="string">"com.xxx.parent.bean.Employee"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empId"</span> <span class="attr">value</span>=<span class="string">"1003"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empName"</span> <span class="attr">value</span>=<span class="string">"Kate"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"detp"</span> <span class="attr">value</span>=<span class="string">"#&#123;dept&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="引用其他bean的属性值作为自己某个属性的值"><a href="#引用其他bean的属性值作为自己某个属性的值" class="headerlink" title="引用其他bean的属性值作为自己某个属性的值"></a>引用其他bean的属性值作为自己某个属性的值</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp05"</span> <span class="attr">class</span>=<span class="string">"com.xxx.parent.bean.Employee"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empId"</span> <span class="attr">value</span>=<span class="string">"1003"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empName"</span> <span class="attr">value</span>=<span class="string">"Kate"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deptName"</span> <span class="attr">value</span>=<span class="string">"#&#123;dept.deptName&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="调用非静态方法"><a href="#调用非静态方法" class="headerlink" title="调用非静态方法"></a>调用非静态方法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"employee"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spel.bean.Employee"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 通过对象方法的返回值为属性赋值 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"salayOfYear"</span> <span class="attr">value</span>=<span class="string">"#&#123;salaryGenerator.getSalaryOfYear(5000)&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h4><p>格式：<strong>#{T(全类名).静态方法名(参数)}</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"employee"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spel.bean.Employee"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 在SpEL表达式中调用类的静态方法 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"circle"</span> <span class="attr">value</span>=<span class="string">"#&#123;T(java.lang.Math).PI*20&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="支持的运算符"><a href="#支持的运算符" class="headerlink" title="支持的运算符"></a>支持的运算符</h4><ul>
<li>算术运算符：<strong>+、-、*、/、%、^</strong></li>
<li>字符串连接：<strong>+</strong></li>
<li>比较运算符：<strong>&lt;、&gt;、==、&lt;=、&gt;=、lt、gt、eq、le、ge</strong></li>
<li>逻辑运算符：<strong>and, or, not, |</strong></li>
<li>三目运算符：<strong>判断条件?判断结果为true时的取值:判断结果为false时的取值</strong></li>
<li>正则表达式：<strong>matches</strong></li>
</ul>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Redis</title>
    <url>/2020/04/25/%E7%AC%94%E8%AE%B0-Redis/</url>
    <content><![CDATA[<p>NoSQL和Redis的基础了解</p>
<a id="more"></a>

<h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><p>not only SQL,泛指非关系型的数据库。NoSQL数据库都具有非常高的读写性能。无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。</p>
<h2 id="0-NoSQL数据库的四大分类"><a href="#0-NoSQL数据库的四大分类" class="headerlink" title="0. NoSQL数据库的四大分类"></a>0. NoSQL数据库的四大分类</h2><p>KV键值；</p>
<p>文档型数据库(bson格式)(CouchDB、MongoDB)；</p>
<p>列存储数据库(Cassandra, HBase)；</p>
<p>图关系数据库(Neo4J, InfoGrid)</p>
<h2 id="1-CAP"><a href="#1-CAP" class="headerlink" title="1. CAP"></a>1. CAP</h2><p>Consistency(强一致性)，Availability(可用性)Partition tolerance(分区容错性)</p>
<p>CAP理论：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的<strong>满足两个</strong>。</p>
<p>CA 传统Oracle数据库</p>
<p>AP 大多数网站架构的选择</p>
<p>CP Redis、Mongodb</p>
<p>图示</p>
<p><img src="/2020/04/25/%E7%AC%94%E8%AE%B0-Redis/CAP%E7%90%86%E8%AE%BA%E5%9B%BE.bmp" alt="CAP"></p>
<h2 id="2-BASE"><a href="#2-BASE" class="headerlink" title="2. BASE"></a>2. BASE</h2><p>为了解决关系数据库强一致性引起的问题而引起的可用性降低而提出的解决方案</p>
<p>基本可用（Basically Available）<br>软状态（Soft state）<br>最终一致（Eventually consistent）</p>
<h2 id="3-分布式与集群"><a href="#3-分布式与集群" class="headerlink" title="3. 分布式与集群"></a>3. 分布式与集群</h2><p>简单来讲：</p>
<p>分布式：不同的多台服务器上面<strong>部署不同的服务模块</strong>（工程），他们之间通过Rpc/Rmi之间通信和调用，对外提供服务和组内协作。</p>
<p>集群：不同的多台服务器上面<strong>部署相同的服务模块</strong>，通过分布式调度软件进行统一的调度，对外提供服务和访问。</p>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>Remote Dictionary Server(远程字典服务器)。用C语言编写的一个高性能的(key/value)分布式内存数据库，基于内存运行，并支持持久化。</p>
<h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h2><ul>
<li>支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用</li>
<li>不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储</li>
<li>支持数据的备份，即master-slave模式的数据备份</li>
</ul>
<h2 id="3-Redis的杂项基础知识"><a href="#3-Redis的杂项基础知识" class="headerlink" title="3. Redis的杂项基础知识"></a>3. Redis的杂项基础知识</h2><ul>
<li>Redis是单线程的</li>
<li>默认16个数据库，类似数组下标从零开始，初始默认使用零号库</li>
<li>统一密码管理，16个库都是同样密码，要么都OK要么一个也连接不上</li>
<li>Redis索引都是从零开始</li>
<li><strong>select命令</strong>切换数据库</li>
<li><strong>Dbsize命令</strong>查看当前数据库的key的数量</li>
<li><strong>Flushdb命令</strong>清空当前库</li>
<li><strong>Flushall命令</strong>通杀全部库</li>
<li>Redis默认端口6379</li>
</ul>
<h2 id="4-Redis的数据类型"><a href="#4-Redis的数据类型" class="headerlink" title="4. Redis的数据类型"></a>4. Redis的数据类型</h2><h3 id="4-0-常用的key命令"><a href="#4-0-常用的key命令" class="headerlink" title="4.0. 常用的key命令"></a>4.0. 常用的<code>key</code>命令</h3><ul>
<li><strong>KEYS *</strong>：查看所有的<code>key</code></li>
<li><strong>EXISTS key</strong>：判断指定的<code>key</code>是否存在</li>
<li><strong>MOVE key db</strong> ：从当前的库中移除指定的<code>key</code>，将它移到指定的库(db)中</li>
<li><strong>EXPIRE key seconds</strong>：为给定的key设置一个过期时间(秒)</li>
<li><strong>TTL key</strong>：查看指定的<code>key</code>还有多少秒过期。-1表示永不过期，-2表示已过期</li>
<li><strong>TYPE key</strong>： 查看指定的<code>key</code>是什么类型</li>
</ul>
<h3 id="4-1-其他的key命令"><a href="#4-1-其他的key命令" class="headerlink" title="4.1. 其他的key命令"></a>4.1. 其他的<code>key</code>命令</h3><ul>
<li><strong>DEL key</strong>：指定的<code>key</code>存在时，删除指定的<code>key</code></li>
<li><strong>DUMP key</strong>：序列化指定的<code>key</code>，并返回被序列化的值</li>
<li><strong>PERSIST key</strong>：移除<code>key</code>的过期时间</li>
<li><strong>EXPIREAT key timestamp</strong>：为指定<code>key</code>设置过期时间的时间辍</li>
<li><strong>PEXPIRE key milliseconds</strong>：为指定<code>key</code>设置过期时间(毫秒)</li>
<li><strong>EXPIREAT key milliseconds-timestamp</strong>：为指定<code>key</code>设置过期时间的时间辍(以毫秒计)</li>
<li><strong>PTTL key</strong>：返回指定<code>key</code>的剩余过期时间(以毫秒计)</li>
<li><strong>RANDOM key</strong>：从当前数据库中随机返回一个<code>key</code></li>
<li><strong>RENAME key newkey</strong>：修改<code>key</code>的名称</li>
<li><strong>RANAMENX key newkey</strong>：仅当newkey不存在时，将<code>key</code>改名为newkey</li>
</ul>
<h3 id="4-2-String-字符串"><a href="#4-2-String-字符串" class="headerlink" title="4.2. String(字符串)"></a>4.2. String(字符串)</h3><p>string是redis最基本的类型，<strong>单key单value</strong>。<br>string类型是二进制安全的。可以包含任何数据。比如jpg图片或者序列化的对象 。<br>Redis中字符串value最多可以是512M</p>
<ul>
<li><strong>SET key value</strong>：设置指定<code>key</code>的值</li>
<li><strong>GET key</strong>：获取指定<code>key</code>的值</li>
<li><strong>STRLEN key</strong>：返回<code>key</code>所存储的字符串的长度</li>
<li><strong>APPEND key value</strong>：如果<code>key</code>已经存在，该命令会在末尾追加value</li>
<li><strong>INCR key</strong>：将<code>key</code>中存储的<strong>数字值</strong>增1</li>
</ul>
<ul>
<li><strong>INCRBY key increment</strong>：将<code>key</code>所存储的值加上给定的增量值(increment)</li>
<li><strong>INCRBYFLOAT key increment</strong>：将<code>key</code>所存储的值加上给定的浮点增量值(increment)</li>
<li><strong>DECR key</strong>：将<code>key</code>中存储的数字值减1</li>
<li><strong>DECRBY key decrement</strong>：将<code>key</code>所存储的值减去给定的减量值(decrement)</li>
<li><strong>SETRANGE key offset value</strong>：将offset处的值覆写为value</li>
<li><strong>GETRANGE key start end</strong>：获取指定区间(start~end)的值</li>
<li><strong>SETEX(set with expire) key seconds value</strong>：将value关联到<code>key</code>上，并设置<code>key</code>的过期时间为seconds(以秒为单位)</li>
<li><strong>SETNX(set if not exist) key value</strong>：<code>key</code>不存在时才设置<code>key</code>的值</li>
<li><strong>MSET key value [key value…]</strong>：同时设置一个或多个key-value对</li>
<li><strong>MSETNX key value [key value…]</strong>：同时设置一个或多个key-value对，当且仅当所有给定的<code>key</code>都不存在</li>
<li><strong>MGET key1[key2…]</strong>：获取所有(一个或多个)给定的<code>key</code>的值</li>
<li><strong>GETSET key value</strong>：将指定的<code>key</code>的值设为value，并返回<code>key</code>的旧值(old value)</li>
<li>……</li>
</ul>
<h3 id="4-3-List-列表"><a href="#4-3-List-列表" class="headerlink" title="4.3. List(列表)"></a>4.3. List(列表)</h3><p>Redis的列表是简单的字符串列表，按照插入顺序排序。<br>可以添加一个元素到列表的<strong>头部</strong>（左边）或者<strong>尾部</strong>（右边）。<br>底层实际是个链表。<br><strong>单key多value</strong></p>
<ul>
<li><strong>LPUSH key value1[value2]</strong>：将一个值和多个值<strong>从左向右</strong>依次压入栈中，亦称<strong>右压栈</strong></li>
<li><strong>LPUSHX key value</strong>：将一个或多个值<strong>从左向右</strong>插入到已存在的列表头部</li>
<li><strong>RPUSH key value1[value2]</strong>：将一个值和多个值<strong>从右向左</strong>依次压入栈中，亦称<strong>左压栈</strong></li>
<li><strong>RPUSHX key value</strong>：为已存在的列表添加值</li>
<li><strong>LRANGE key start stop</strong>：获取列表中指定范围的元素</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 0 -1表示获取列表所有的元素</span></span><br><span class="line">LRANGE list01 0 -1</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>LPOP key</strong>：移除并获取列表<strong>头部</strong>的第一个元素，亦称<strong>左弹栈</strong></li>
<li><strong>RPOP key</strong>：移除并获取列表<strong>尾部</strong>的第一个元素，亦称<strong>右弹栈</strong></li>
<li><strong>LINDEX key index</strong>：通过<strong>索引</strong>获取列表中的元素</li>
<li><strong>LLEN key</strong>：获取列表长度</li>
<li><strong>LREM key count value</strong>：移除列表元素，即删除n个value</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从左向右删除2个值等于v1的元素，返回的值为实际删除的数量</span></span><br><span class="line">LREM list01 2 v1</span><br><span class="line"><span class="meta">#</span><span class="bash"> LREM list3 0 值，表示删除全部给定的值。零个就是全部值</span></span><br><span class="line">LREM list3 0</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>LTRIM key start stop</strong>：对列表进行修剪，只保留指定索引间(闭区间)的元素，其余的删除</li>
<li><strong>RPOPLPUSH source destination</strong>：移除列表的最后一个元素，并将该元素添加到另一个列表的<strong>头部</strong></li>
<li><strong>LSET key index value</strong>：通过索引设置列表元素的值</li>
<li><strong>LINSERT key BEFORE|AFTER pivot value</strong>：在列表元素<strong>pivot</strong>的前后插入元素<strong>value</strong></li>
<li><strong>BLPOP key1 [key2] timeout</strong>：移除并获取列表<strong>头部</strong>的一个元素，如果列表没有该元素会阻塞列表直到<strong>超时</strong>或发现可弹出的元素为止</li>
<li><strong>BRPOP key1 [key2] timeout</strong>：移除并获取列表<strong>尾部</strong>的一个元素，如果列表没有该元素会阻塞列表直到<strong>超时</strong>或发现可弹出的元素为止</li>
<li><strong>BRPOPLPUSH source destination timeout</strong>：移除并获取列表<strong>尾部</strong>的一个元素，并将该元素插入到另一个列表的<strong>头部</strong>，如果列表没有该元素会阻塞列表直到<strong>超时</strong>或发现可弹出的元素为止</li>
</ul>
<h3 id="4-4-Set"><a href="#4-4-Set" class="headerlink" title="4.4. Set"></a>4.4. Set</h3><p>Redis的Set是string类型的无序集合。它是通过HashTable实现实现的。<br><strong>单值多value</strong></p>
<ul>
<li><strong>SADD key value1 [value2]</strong>：向<code>key</code>中添加一个或多个value</li>
<li><strong>SMEMBERS key</strong>：返回所有的<code>key</code></li>
<li><strong>SISMEMBER key value</strong>：判断某个value是否是指定<code>key</code>的值</li>
<li><strong>SCARD key</strong>：获取Set集合中<code>key</code>的个数</li>
<li><strong>SREM key value1 [value2]</strong>：删除指定<code>key</code>中的指定几个value</li>
<li><strong>SRANDMEMBER key [count]</strong>：<strong>随机</strong>返回指定<code>key</code>中一个或多个value。count超过最大数量就全部取出，count为负照样取，但可能会有重复的值。</li>
<li><strong>SPOP key</strong>：移除并返回指定<code>key</code>中随机一个value</li>
<li><strong>SMOVE key1 key2 value1</strong>：将<code>key1</code>里的value1放到<code>key2</code>中</li>
<li><strong>SDIFF key1 [key2]</strong>：返回<code>key1</code>和<code>key2</code>的差集，以<code>key1</code>为准</li>
<li><strong>SINTER key1 [key2]</strong>：返回<code>key1</code>和<code>key2</code>的交集</li>
<li><strong>SUNION key1 [key2]</strong>：返回<code>key1</code>和<code>key2</code>的并集</li>
<li>……</li>
</ul>
<h3 id="4-5-Hash-哈希"><a href="#4-5-Hash-哈希" class="headerlink" title="4.5. Hash(哈希)"></a>4.5. Hash(哈希)</h3><p>KV模式，但V是一个或多个键值对。</p>
<ul>
<li><strong>HSET key field value</strong>：将<code>key</code>中的字段field的值设为value</li>
<li><strong>HGET key field</strong>：获取指定<code>key</code>中的指定字段field的值</li>
<li><strong>HGETALL key</strong>：获取指定<code>key</code>中所有字段和他们的值</li>
<li><strong>HMSET key field1 value1 [field2 value2]</strong>：在指定<code>key</code>中设置多个field-value</li>
<li><strong>HMGET key field1 [field2]</strong>：在指定<code>key</code>中获取所有<strong>指定字段</strong>的值</li>
<li><strong>HDEL key field1 [field2]</strong>：在指定<code>key</code>中删除一个或多个字段</li>
<li><strong>HLEN key</strong>：获取指定<code>key</code>的字段的数量</li>
<li><strong>HEXISTS key field</strong>：查看指定<code>key</code>中的<strong>指定字段</strong>是否存在</li>
<li><strong>HKEYS key</strong>：获取指定<code>key</code>中的所有字段field</li>
<li><strong>HVALS key</strong>：获取指定<code>key</code>中的所有字段的<strong>值</strong></li>
<li><strong>HINCRBY key field increment</strong>：为指定<code>key</code>中的<strong>指定字段</strong>field的<strong>整数值</strong>加上增量increment</li>
<li><strong>HINCRBYFLOAT key field increment</strong>：为指定<code>key</code>中的<strong>指定字段</strong>field的<strong>浮点数值</strong>加上增量increment</li>
<li><strong>HSETNX key field value</strong>：在指定key中，如果<strong>指定字段</strong>field不存在，才会设置该字段的值</li>
</ul>
<h3 id="4-6-ZSet-Sorted-Set，有序集合"><a href="#4-6-ZSet-Sorted-Set，有序集合" class="headerlink" title="4.6. ZSet(Sorted Set，有序集合)"></a>4.6. ZSet(Sorted Set，有序集合)</h3><p>Redis中的<strong>ZSet</strong> 和 Set 一样也是string类型元素的集合，且不允许成员望重复。<br>不同的是每个元素都会关联一个double类型的值<strong>score</strong>。<br>Redis正是通过<strong>score</strong>来为集合中的成员进行从小到大的排序。<br>ZSet的成员是唯一的,但值<strong>score</strong>却可以重复。</p>
<ul>
<li><strong>ZADD key score1 value1 [score2 value2]</strong>：向指定<code>key</code>中添加一个或多个value，或更新已存在的成员的值</li>
<li><strong>ZRANGE key start stop [WITHSCORES]</strong>：在指定<code>key</code>中，返回指定<strong>索引区间</strong>(start~stop)内的<strong>value</strong>或<strong>scores和value</strong></li>
<li><strong>ZRERANGE key stop start [WITHSCORES]</strong>：在指定<code>key</code>中，<strong>逆序</strong>返回指定<strong>索引区间</strong>(start~stop)内的<strong>value</strong>或<strong>scores和value</strong></li>
<li><strong>ZRANGEBYSCORE key min max [WITHSCORES][LIMIT]</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从key(ZSet)中，获取scores[60,90]闭区间内的value和score</span></span><br><span class="line">  ZRANGEBYSCORE ZSet 60 90 WITHSCORES</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从key(ZSet)中，获取scores(60,90)开区间内的value和score</span></span><br><span class="line">  ZRANGEBYSCORE ZSet (60 (90 WITHSCORES</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在之前的基础上，再加限制条件。LIMIT后有两个值，第一个值是从索引几开始，第二个值是选几个</span></span><br><span class="line">ZRANGEBYSCORE ZSet (60 (90 WITHSCORES LIMIT 0 2</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ZRERANGEBYSCORE key max min [WITHSCORES][LIMIT]</strong>：<strong>逆序</strong>获取</li>
<li><strong>ZREM key value1 [value2]</strong>：删除指定<code>key</code>中的<strong>指定score</strong>下的value值</li>
<li><strong>ZCARD key</strong>：获取指定<code>key</code>中的value或score的数量</li>
<li><strong>ZCOUNT key min max</strong>：计算指定<code>key</code>中指定score区间内value的数量</li>
<li><strong>ZRANK key value</strong>：获取指定<code>key</code>中的<strong>指定value</strong> 的<strong>索引</strong>或下标</li>
<li><strong>ZSCORE key value</strong>：获取指定<code>key</code>中的<strong>指定value</strong> 的<strong>score</strong></li>
<li><strong>ZRERANK key value</strong>：<strong>逆序</strong>获取指定<code>key</code>中的<strong>指定value</strong> 的<strong>score</strong></li>
</ul>
<h2 id="5-配置文件redis-conf的简单介绍"><a href="#5-配置文件redis-conf的简单介绍" class="headerlink" title="5. 配置文件redis.conf的简单介绍"></a>5. 配置文件redis.conf的简单介绍</h2><p>待整理</p>
<h2 id="6-Redis的持久化"><a href="#6-Redis的持久化" class="headerlink" title="6. Redis的持久化"></a>6. Redis的持久化</h2><h3 id="6-0-RDB-Redis-DataBase"><a href="#6-0-RDB-Redis-DataBase" class="headerlink" title="6.0. RDB(Redis DataBase)"></a>6.0. RDB(Redis DataBase)</h3><h4 id="6-0-0-简单介绍"><a href="#6-0-0-简单介绍" class="headerlink" title="6.0.0. 简单介绍"></a>6.0.0. 简单介绍</h4><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，恢复时是将快照<strong>文件</strong>直接读到<strong>内存</strong>里</p>
<p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。</p>
<h4 id="6-0-1-默认配置文件"><a href="#6-0-1-默认配置文件" class="headerlink" title="6.0.1. 默认配置文件"></a>6.0.1. 默认配置文件</h4><p>配置文件默认名为<strong>dump.rdb</strong></p>
<h4 id="6-0-2-如何触发RDB快照"><a href="#6-0-2-如何触发RDB快照" class="headerlink" title="6.0.2. 如何触发RDB快照"></a>6.0.2. 如何触发RDB快照</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>冷拷贝后重新使用(cp dump.rdb dump_new.rdb)</p>
<h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>用<strong>命令</strong>save和bgsave</p>
<p><strong>save</strong>：save只管保存，其余不管</p>
<p><strong>bgsave</strong>：Redis会在后台<strong>异步</strong>进行快照操作，快照同时还可以响应客户端请求。可以通过lastsave命令获取最后一次成功执行快照的时间。</p>
<h5 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h5><p>执行flushall<strong>命令</strong>，也会产生dump.rdb文件，但里面是空的，无意义</p>
<h4 id="6-0-3-如何恢复"><a href="#6-0-3-如何恢复" class="headerlink" title="6.0.3. 如何恢复"></a>6.0.3. 如何恢复</h4><p>将备份文件 (dump.rdb) <strong>移动</strong>到 redis 安装目录并<strong>重启</strong>服务即可</p>
<p>可使用命令<code>CONFIG GET dir</code>来获取目录</p>
<h4 id="6-0-4-RDB的优劣势"><a href="#6-0-4-RDB的优劣势" class="headerlink" title="6.0.4. RDB的优劣势"></a>6.0.4. RDB的优劣势</h4><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><p>适合大规模的数据恢复；对数据完整性和一致性要求不高</p>
<h5 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h5><p>在一定间隔时间做一次备份，所以如果redis意外断掉的话，就会丢失最后一次快照后的所有修改；</p>
<p>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</p>
<h4 id="6-0-5-动态停止RDB并保存的方法"><a href="#6-0-5-动态停止RDB并保存的方法" class="headerlink" title="6.0.5. 动态停止RDB并保存的方法"></a>6.0.5. 动态停止RDB并保存的方法</h4><p>使用命令<code>redis-cli config set save &quot;&quot;</code></p>
<h3 id="6-1-AOF-Append-only-File"><a href="#6-1-AOF-Append-only-File" class="headerlink" title="6.1. AOF(Append only File)"></a>6.1. AOF(Append only File)</h3><h4 id="6-1-0-简单叙述"><a href="#6-1-0-简单叙述" class="headerlink" title="6.1.0. 简单叙述"></a>6.1.0. 简单叙述</h4><p>以日志的形式来记录每个<strong>写操作</strong>，将Redis执行过的所有写指令记录下来(读操作不记录)<br><strong>只许追加文件</strong>但不可以改写文件，redis启动之初会读取该文件重新构建数据</p>
<h4 id="6-1-1-AOF配置文件"><a href="#6-1-1-AOF配置文件" class="headerlink" title="6.1.1. AOF配置文件"></a>6.1.1. AOF配置文件</h4><p>AOF的配置文件的默认名称为appendonly.aof</p>
<h4 id="6-1-2-AOF的正常恢复"><a href="#6-1-2-AOF的正常恢复" class="headerlink" title="6.1.2. AOF的正常恢复"></a>6.1.2. AOF的正常恢复</h4><ul>
<li>启动：修改Redis配置文件，默认的appendonly no，改为yes</li>
<li>将有数据的aof文件复制一份保存到对应目录(config get dir)</li>
<li>恢复：重启redis然后重新加载</li>
</ul>
<h4 id="6-1-3-AOF的异常恢复"><a href="#6-1-3-AOF的异常恢复" class="headerlink" title="6.1.3. AOF的异常恢复"></a>6.1.3. AOF的异常恢复</h4><ul>
<li>启动：修改Redis配置文件，默认的appendonly no，改为yes</li>
<li>备份损坏的AOF文件</li>
<li>修复：用命令<code>Redis-check-aof --fix 文件名</code>进行修复</li>
<li>恢复：重启redis然后重新加载</li>
</ul>
<h4 id="6-1-4-Rewrite"><a href="#6-1-4-Rewrite" class="headerlink" title="6.1.4. Rewrite"></a>6.1.4. Rewrite</h4><p>AOF采用文件追加方式，文件会越来越大。为避免出现此种情况，新增了重写机制，当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩。<br>只保留可以恢复数据的最小指令集，可以使用命令<code>bgrewriteaof</code></p>
<h5 id="重写原理"><a href="#重写原理" class="headerlink" title="重写原理"></a>重写原理</h5><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似</p>
<h5 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h5><p>Redis会记录上次重写时的AOF文件大小，默认配置是当AOF文件大小是上次rewrite后大小的2倍且文件大于64M时触发。</p>
<h4 id="6-1-5-AOF的优劣势"><a href="#6-1-5-AOF的优劣势" class="headerlink" title="6.1.5. AOF的优劣势"></a>6.1.5. AOF的优劣势</h4><h5 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h5><ul>
<li>每修改同步：<strong>appendfsync always</strong>   同步持久化 每次发生数据变更会被立即记录到磁盘  性能较差但数据完整性比较好</li>
<li>每秒同步：<strong>appendfsync everysec</strong>    异步操作，每秒记录   如果一秒内宕机，会有数据丢失</li>
<li>不同步：<strong>appendfsync no</strong>   从不同步</li>
</ul>
<h5 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h5><ul>
<li>对于相同数据集的数据而言，aof文件要远大于rdb文件，恢复速度慢于rdb</li>
<li>aof运行效率要慢于rdb，每秒同步策略效率较好，不同步效率和rdb相同</li>
</ul>
<h3 id="6-3-RDB和AOF的小总结"><a href="#6-3-RDB和AOF的小总结" class="headerlink" title="6.3. RDB和AOF的小总结"></a>6.3. RDB和AOF的小总结</h3><p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</p>
<p>AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据。AOF命令以redis协议追加保存每次写的操作到文件末尾。</p>
<p>Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大</p>
<h4 id="同时开启两种持久化方式"><a href="#同时开启两种持久化方式" class="headerlink" title="同时开启两种持久化方式"></a>同时开启两种持久化方式</h4><p>当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</p>
<p>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？<br>作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)，快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</p>
<h2 id="7-事务"><a href="#7-事务" class="headerlink" title="7. 事务"></a>7. 事务</h2><h3 id="7-0-简单叙述"><a href="#7-0-简单叙述" class="headerlink" title="7.0. 简单叙述"></a>7.0. 简单叙述</h3><p>可以<strong>一次执行</strong>多个命令。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入。</p>
<h3 id="7-1-常用命令"><a href="#7-1-常用命令" class="headerlink" title="7.1. 常用命令"></a>7.1. 常用命令</h3><ul>
<li><strong>MULTI</strong>：标记一个事务块的开始</li>
<li><strong>DISCARD</strong>：取消事务，放弃执行事务块内的所有命令</li>
<li><strong>EXEC</strong>：执行所有事务块的命令。一旦执行了EXEC，之前加的监控锁都会被取消掉</li>
<li><strong>WATCH key1 [key2…]</strong>：监视一个或多个<code>key</code>，如果在事务执行前这些<code>key</code>被其他命令改动，事务将会打断。</li>
<li><strong>UNWATCH</strong>：取消<code>WACTH</code>命令对<strong>所有</strong><code>key</code>的监视。</li>
</ul>
<h3 id="7-2-Redis事务的几个特性"><a href="#7-2-Redis事务的几个特性" class="headerlink" title="7.2. Redis事务的几个特性"></a>7.2. Redis事务的几个特性</h3><ul>
<li><strong>单独的隔离操作</strong>：事务块中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
<li><strong>没有隔离级别的概念</strong>：<strong>队列</strong>中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在“事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题。</li>
<li><strong>不保证原子性</strong>：redis同一个事务块中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li>
</ul>
<h2 id="8-Redis的发布订阅"><a href="#8-Redis的发布订阅" class="headerlink" title="8. Redis的发布订阅"></a>8. Redis的发布订阅</h2><p>进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p>
<h3 id="8-0-发布订阅命令"><a href="#8-0-发布订阅命令" class="headerlink" title="8.0. 发布订阅命令"></a>8.0. 发布订阅命令</h3><ul>
<li><strong>SUBSCRIBE channel1 [channel2…]</strong>：<strong>订阅</strong>一个或多个频道</li>
<li><strong>PSUBSCRIBE pattern1 [pattern2…]</strong>：<strong>订阅</strong>一个或多个给定模式的频道</li>
<li><strong>UNSUBSCRIBE [channel1 [channel2…]]</strong>：<strong>退订</strong>一个或多个频道</li>
<li><strong>PUNSUBSCRIBE [pattern1 [pattern2…]]</strong>：<strong>退订</strong>所有给定模式的频道</li>
<li><strong>PUBLISH channel message</strong>：将消息<strong>发送</strong>到指定的频道</li>
<li><strong>PUBSUB subcommand [argument1 [argument2…]]</strong>：查看订阅与发布系统状态</li>
</ul>
<h2 id="9-主从复制"><a href="#9-主从复制" class="headerlink" title="9. 主从复制"></a>9. 主从复制</h2><h3 id="9-0-简单叙述"><a href="#9-0-简单叙述" class="headerlink" title="9.0. 简单叙述"></a>9.0. 简单叙述</h3><p>主机数据更新后根据配置和策略，自动同步到备机的<strong>master/slaver</strong>机制，Master以写为主，Slave以读为主</p>
<h3 id="9-1-特点"><a href="#9-1-特点" class="headerlink" title="9.1. 特点"></a>9.1. 特点</h3><ul>
<li>读写分离</li>
<li>容灾恢复</li>
</ul>
<h3 id="9-2-配置命令"><a href="#9-2-配置命令" class="headerlink" title="9.2. 配置命令"></a>9.2. 配置命令</h3><ul>
<li><strong>SLAVEOF 主库IP 主库端口</strong>：使用该命令后，每次与master断开之后，都需要重新连接。除非你配置进redis.conf文件</li>
<li><strong>INFO replication</strong>：查看主从复制的信息</li>
<li><strong>SLAVEOF no one</strong>：使当前数据库停止与其他数据库的同步，转成主数据库</li>
</ul>
<h3 id="9-3-复制原理"><a href="#9-3-复制原理" class="headerlink" title="9.3. 复制原理"></a>9.3. 复制原理</h3><ul>
<li>Slave启动成功连接到master后会发送一个sync命令</li>
<li>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步</li>
<li><strong>全量复制</strong>：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li>
<li><strong>增量复制</strong>：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</li>
<li>只要是重新连接master,一次完全同步（全量复制)将被自动执行</li>
</ul>
<h3 id="9-4-哨兵模式"><a href="#9-4-哨兵模式" class="headerlink" title="9.4. 哨兵模式"></a>9.4. 哨兵模式</h3><p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数<strong>自动将从库转换为主库</strong></p>
<p>如果之前的master重启回来，不会出现双master冲突，而是会成为从机slave<br>一组sentinel能同时监控多个Master</p>
<h4 id="9-4-0-配置哨兵"><a href="#9-4-0-配置哨兵" class="headerlink" title="9.4.0. 配置哨兵"></a>9.4.0. 配置哨兵</h4><ol>
<li>在自定义的/myredis目录下新建<strong>sentinel.conf</strong>文件，名字绝不能错</li>
<li>使用命令配置哨兵模式： <code>sentinel monitor 被监控的主库的名字(自己起名字) 127.0.0.1 6379 1</code>，数字1表示主机挂掉后salve投票看让谁接替成为主机</li>
<li>使用命令开启哨兵模式：<code>Redis-sentinel /myredis/sentinel.conf</code></li>
</ol>
<h3 id="9-5-主从复制的缺点"><a href="#9-5-主从复制的缺点" class="headerlink" title="9.5. 主从复制的缺点"></a>9.5. 主从复制的缺点</h3><p>复制延时。<br>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-SpringBoot</title>
    <url>/2020/04/30/%E7%AC%94%E8%AE%B0-SpringBoot/</url>
    <content><![CDATA[<p>了解SpringBoot如何使用</p>
<a id="more"></a>

<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="0-SpringBoot简述"><a href="#0-SpringBoot简述" class="headerlink" title="0. SpringBoot简述"></a>0. SpringBoot简述</h2><blockquote>
<p>SpringBoot 是Spring开源组织下的子项目，提供了Spring组件一站式解决方案，简化了Spring的使用难度，简省了繁琐的配置，提供了各种<strong>启动器</strong>，使开发者能快速上手。</p>
</blockquote>
<h2 id="1-SpringBoot优点"><a href="#1-SpringBoot优点" class="headerlink" title="1. SpringBoot优点"></a>1. SpringBoot优点</h2><ul>
<li><strong>独立运行</strong>：内嵌各种Servlet容器(Tomcat、Jetty等)，不需要打成war包部署到容器中，只打一个可执行的jar包就能独立运行。</li>
<li><strong>简化配置</strong>：spring-boot-starter-xxx<strong>启动器</strong>自动依赖其他组件，减少了Maven的配置</li>
<li><strong>自动配置</strong>：能根据当前类路径下的类、Jar包来自动配置bean。如添加一个spring-boot-starter-web启动器就能拥有web的功能，无需其他配置。</li>
<li><strong>无代码生成和XML配置</strong>：SpringBoot配置过程中无代码生成，无需XML配置就能完成所有配置工作，这些借助于条件注解来完成。</li>
<li><strong>应用监控</strong>：SpringBoot提供了一系列端点可以监控服务及应用。</li>
</ul>
<h2 id="2-HelloWorld示例"><a href="#2-HelloWorld示例" class="headerlink" title="2. HelloWorld示例"></a>2. HelloWorld示例</h2><h3 id="2-0-Maven设置"><a href="#2-0-Maven设置" class="headerlink" title="2.0. Maven设置"></a>2.0. Maven设置</h3><p>如果本地Maven配置未配好，需要在本地Maven的setting.xml文件里配一下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-导入SpringBoot相关的依赖"><a href="#2-1-导入SpringBoot相关的依赖" class="headerlink" title="2.1. 导入SpringBoot相关的依赖"></a>2.1. 导入SpringBoot相关的依赖</h3><p>在创建好Maven工程后，需要在pom文件里引入相关的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-编写程序启动SpringBoot应用"><a href="#2-2-编写程序启动SpringBoot应用" class="headerlink" title="2.2. 编写程序启动SpringBoot应用"></a>2.2. 编写程序启动SpringBoot应用</h3><h4 id="2-2-0-主程序代码"><a href="#2-2-0-主程序代码" class="headerlink" title="2.2.0. 主程序代码"></a>2.2.0. 主程序代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@springBootApplication</span>：标注一个主程序类，表示这个是一个Springboot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-1-Controller层代码"><a href="#2-2-1-Controller层代码" class="headerlink" title="2.2.1. Controller层代码"></a>2.2.1. Controller层代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RestController：是spring4里的新注解，是<span class="doctag">@ResponseBody</span>和<span class="doctag">@Controller</span>的缩写。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello SpringBoot,this is my first Application"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后启动，浏览器访问<code>localhost:8080/hello</code>进行测试即可</p>
<h3 id="2-3-简化部署"><a href="#2-3-简化部署" class="headerlink" title="2.3. 简化部署"></a>2.3. 简化部署</h3><h4 id="2-3-0-添加Maven插件"><a href="#2-3-0-添加Maven插件" class="headerlink" title="2.3.0 添加Maven插件"></a>2.3.0 添加Maven插件</h4><p>在Maven的pom.xml文件中配置插件，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 该插件可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-1-打jar包"><a href="#2-3-1-打jar包" class="headerlink" title="2.3.1. 打jar包"></a>2.3.1. 打jar包</h4><p>使用<code>mvn package</code>命令打包</p>
<h4 id="2-3-2-运行"><a href="#2-3-2-运行" class="headerlink" title="2.3.2. 运行"></a>2.3.2. 运行</h4><p>在打包好的jar包的目录下，运行<code>java -jar jar包名称</code>进行测试</p>
<h2 id="3-HelloWorld示例探究"><a href="#3-HelloWorld示例探究" class="headerlink" title="3. HelloWorld示例探究"></a>3. HelloWorld示例探究</h2><h3 id="3-0-依赖"><a href="#3-0-依赖" class="headerlink" title="3.0. 依赖"></a>3.0. 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--HelloWorld项目的父工程是 org.springframework.boot--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      而org.springframework.boot的父工程是spring-boot-dependencies</span></span><br><span class="line"><span class="comment">      它来管理Spring Boot应用里面的所有依赖版本；</span></span><br><span class="line"><span class="comment">      所以以后我们导入依赖默认是不需要写版本；（但没有在dependencies里面管理的依赖还是需要声明版本号的）</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-启动器"><a href="#3-1-启动器" class="headerlink" title="3.1. 启动器"></a>3.1. 启动器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以<code>spring-boot-starter-web</code>为例，该启动器为我们导入了web模块正常运行所依赖的组件。</p>
<p>SpringBoot将很多功能场景都抽取出来，做成了<strong>starters</strong>(启动器)，以后只要在项目中导入了这些相关场景的<strong>启动器</strong>，便会自动导入该场景的<strong>相关依赖</strong>。</p>
<h3 id="3-2-主程序"><a href="#3-2-主程序" class="headerlink" title="3.2. 主程序"></a>3.2. 主程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@SpringBootApplication</code>: 该注解标注在SpringBoot的主配置类上，通过运行该类的main方法来启动SpringBoot应用。</p>
<p><code>@SpringBootApplication</code>注解的源码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)    <span class="comment">//可以给一个类型进行注解，比如类、接口、枚举</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)    <span class="comment">//可以保留到程序运行的时候，它会被加载进入到 JVM 中</span></span><br><span class="line"><span class="meta">@Documented</span>    <span class="comment">//将注解中的元素包含到 Javadoc 中去。</span></span><br><span class="line"><span class="meta">@Inherited</span>    <span class="comment">//继承，比如A类上有该注解，B类继承A类，B类就也拥有该注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*创建一个配置类，在配置类上添加 @ComponentScan 注解。</span></span><br><span class="line"><span class="comment">*该注解默认会扫描该类所在的包下所有的配置类，相当于之前的 &lt;context:component-scan&gt;。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span></span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-0-SpringBootConfiguration"><a href="#3-2-0-SpringBootConfiguration" class="headerlink" title="3.2.0. @SpringBootConfiguration"></a>3.2.0. @SpringBootConfiguration</h4><p><code>@SpringBootConfiguration</code>注解标注在SpringBoot的配置类上，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration</span><br></pre></td></tr></table></figure>

<h5 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h5><p>该注解用在Spring的配置类上，而配置类也是容器的一个组件(Component)。源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration</span><br></pre></td></tr></table></figure>

<h4 id="3-2-1-EnableAutoConfiguration"><a href="#3-2-1-EnableAutoConfiguration" class="headerlink" title="3.2.1. @EnableAutoConfiguration"></a>3.2.1. @EnableAutoConfiguration</h4><p>该注解用来开启<strong>自动配置</strong>的，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span></span></span><br></pre></td></tr></table></figure>

<h5 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h5><p>字面意思，自动配置包，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Import</span>(&#123;Registrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span></span></span><br></pre></td></tr></table></figure>

<h6 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h6><p>@Import是Spring的底层注解，是用来给容器导入组件的</p>
<p><code>@Import({Registrar.class})</code>表示<code>org.springframework.boot.autoconfigure.AutoConfigurationPackages.Registrar</code>会将<strong>主配置类（@SpringBootApplication标注的类）的所在包</strong>及其下所有子包里面的所有组件注册到Spring容器中。</p>
<h5 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import({AutoConfigurationImportSelector.class})"></a>@Import({AutoConfigurationImportSelector.class})</h5><p>​    同样的，<code>AutoConfigurationImportSelector.class</code>是将所有需要导入的组件<strong>以全类名的方式返回</strong>，之后这些组件就会被添加到容器中。这样便会给容器中导入非常多的自动配置类（<strong>xxxAutoConfiguration</strong>）</p>
<p>​    而Spring Boot在启动的时候从类路径下的<code>META-INF/spring.factories</code>中获取<code>@EnableAutoConfiguration</code>指定的值，将这些值作为自动配置类导入到容器中，帮我们进行自动配置工作。</p>
<h2 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h2><p>SpringBoot使用全局配置文件，<strong>用来修改SpringBoot自动配置的默认值</strong>，配置文件名是固定的：</p>
<ul>
<li>application.properties</li>
<li>application.yml</li>
</ul>
<h3 id="4-0-YAML"><a href="#4-0-YAML" class="headerlink" title="4.0. YAML"></a>4.0. YAML</h3><p>YAML(YAML Ain’t Markup Language)，通用的数据串行化格式，方便人类的读写。</p>
<h4 id="4-0-0-基本语法特点"><a href="#4-0-0-基本语法特点" class="headerlink" title="4.0.0. 基本语法特点"></a>4.0.0. 基本语法特点</h4><ul>
<li><strong>大小写敏感</strong></li>
<li><strong>使用缩进表示层级关系</strong></li>
<li><strong>缩进时不允许使用Tab键，只允许使用空格</strong></li>
<li><strong>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</strong></li>
<li><strong>使用#表示注释</strong></li>
<li><strong>字符串可以不用引号标注</strong><ul>
<li>如使用<code>&quot;&quot;</code>双引号，则字符串里有转义符号的话<strong>不会转义</strong></li>
<li>如使用<code>&#39;&#39;</code>单引号，则字符串里有转义符号的话<strong>会转义</strong></li>
</ul>
</li>
</ul>
<h4 id="4-0-1-数据结构"><a href="#4-0-1-数据结构" class="headerlink" title="4.0.1. 数据结构"></a>4.0.1. 数据结构</h4><h5 id="map-–-哈希表"><a href="#map-–-哈希表" class="headerlink" title="map – 哈希表"></a>map – 哈希表</h5><p>键值对(<code>key : value</code>)，<code>:</code>冒号<strong>后面</strong>要有空格。同一缩进的所有键值对属于同一个map</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YAML 表示法1</span></span><br><span class="line"><span class="attr">age :</span> <span class="number">25</span></span><br><span class="line"><span class="attr">name :</span> <span class="string">Seven</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML 表示法2</span></span><br><span class="line"><span class="string">&#123;age</span> <span class="string">:</span> <span class="number">25</span><span class="string">,</span> <span class="attr">name :</span> <span class="string">Seven&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON表示法</span></span><br><span class="line"><span class="string">&#123;'age'</span> <span class="string">:</span> <span class="number">25</span><span class="string">,</span> <span class="string">'name'</span> <span class="string">:</span> <span class="string">'Seven'</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="list-–-列表"><a href="#list-–-列表" class="headerlink" title="list – 列表"></a>list – 列表</h5><p>使用连字符<code>-</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YAML 表示法1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">a</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">b</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML 表示法2</span></span><br><span class="line"><span class="string">[a,</span> <span class="string">b,</span> <span class="number">17</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON 表示法</span></span><br><span class="line"><span class="string">['a',</span> <span class="string">'b'</span><span class="string">,</span> <span class="number">17</span><span class="string">]</span></span><br></pre></td></tr></table></figure>

<h5 id="scalar-–-纯量"><a href="#scalar-–-纯量" class="headerlink" title="scalar – 纯量"></a>scalar – 纯量</h5><p>数据最小单位，不可以再分割</p>
<h5 id="map与list嵌套"><a href="#map与list嵌套" class="headerlink" title="map与list嵌套"></a>map与list嵌套</h5><p>map和list的元素可以是另一个map或者list或者scalar</p>
<h6 id="1-map-in-map"><a href="#1-map-in-map" class="headerlink" title="1. map in map"></a>1. map in map</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YAML 表示</span></span><br><span class="line"><span class="attr">websites:</span></span><br><span class="line">  <span class="attr">YAML :</span> <span class="string">yaml.org</span></span><br><span class="line">  <span class="attr">Ruby :</span> <span class="string">ruby-lang.org</span></span><br><span class="line">  <span class="attr">Python :</span> <span class="string">python.org</span></span><br><span class="line">  <span class="attr">Perl:</span> <span class="string">use.perl.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON 表示</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">websites:</span></span><br><span class="line">  <span class="string">&#123;</span> <span class="attr">YAML :</span> <span class="string">'yaml.org'</span><span class="string">,</span></span><br><span class="line">    <span class="attr">Ruby :</span> <span class="string">'ruby-lang.org'</span><span class="string">,</span></span><br><span class="line">    <span class="attr">Python :</span> <span class="string">'python.org'</span><span class="string">,</span></span><br><span class="line">    <span class="attr">Perl:</span> <span class="string">'use.perl.org'</span><span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h6 id="2-list-in-map"><a href="#2-list-in-map" class="headerlink" title="2. list in map"></a>2. list in map</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YAML 表示</span></span><br><span class="line"><span class="string">language：</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">YAML</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ruby</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Perl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON 表示</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">language :</span> <span class="string">['YAML',</span> <span class="string">'Ruby'</span><span class="string">,</span> <span class="string">'Python'</span><span class="string">,</span> <span class="string">'Perl'</span><span class="string">]&#125;</span></span><br></pre></td></tr></table></figure>

<h6 id="3-list-in-list"><a href="#3-list-in-list" class="headerlink" title="3. list in list"></a>3. list in list</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YAML 表示法1</span></span><br><span class="line"><span class="bullet">-</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ruby</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Perl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">C</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">C++</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML 表示法2</span></span><br><span class="line"><span class="bullet">-</span> <span class="bullet">-</span> <span class="string">Ruby</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Perl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line"><span class="bullet">-</span> <span class="bullet">-</span> <span class="string">C</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">C++</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML 表示法3</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[Ruby,</span> <span class="string">Perl,</span> <span class="string">Python]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[C,</span> <span class="string">C++,</span> <span class="string">Java]</span></span><br><span class="line"><span class="comment"># JSON 表示法</span></span><br><span class="line"><span class="string">[</span> <span class="string">[</span> <span class="string">'Ruby'</span><span class="string">,</span>  <span class="string">'Perl'</span><span class="string">,</span>  <span class="string">'Python'</span> <span class="string">],</span>  <span class="string">[</span> <span class="string">'C'</span><span class="string">,</span>  <span class="string">'C++'</span><span class="string">,</span>  <span class="string">'java'</span> <span class="string">]</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>

<h6 id="4-map-in-list"><a href="#4-map-in-list" class="headerlink" title="4. map in list"></a>4. map in list</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YAML 表示</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">id :</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">name :</span> <span class="string">a</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">id :</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">name :</span> <span class="string">b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON 表示</span></span><br><span class="line"><span class="string">[</span> <span class="string">&#123;</span> <span class="attr">id :</span> <span class="number">1</span><span class="string">,</span>  <span class="attr">name :</span> <span class="string">'a'</span> <span class="string">&#125;,</span>  <span class="string">&#123;</span> <span class="attr">id :</span> <span class="number">2</span><span class="string">,</span> <span class="attr">name :</span> <span class="string">'b'</span> <span class="string">&#125;</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>

<h3 id="4-1-配置文件的值注入"><a href="#4-1-配置文件的值注入" class="headerlink" title="4.1. 配置文件的值注入"></a>4.1. 配置文件的值注入</h3><h4 id="4-1-0-值注入的两种方式及其区别"><a href="#4-1-0-值注入的两种方式及其区别" class="headerlink" title="4.1.0. 值注入的两种方式及其区别"></a>4.1.0. 值注入的两种方式及其区别</h4><p>配置文件的值注入有两种方式，一是SpringBoot的<code>@ConfigurationProperties</code>注解，另一个是Spring原先的<code>@value</code>注解。</p>
<h5 id="二者的应用场景："><a href="#二者的应用场景：" class="headerlink" title="二者的应用场景："></a>二者的应用场景：</h5><ul>
<li>在某个业务逻辑中需要获取一下配置文件中的某项值，使用<code>@Value</code></li>
<li>专门编写了一个JavaBean来和配置文件隐形映射，可直接使用<code>@ConfigurationProperties</code></li>
</ul>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">@ConfigurationProperties</th>
<th align="center">@value</th>
</tr>
</thead>
<tbody><tr>
<td align="center">功能</td>
<td align="center">批量注入配置文件中的属性</td>
<td align="center">一个个指定再注入</td>
</tr>
<tr>
<td align="center">松散绑定</td>
<td align="center">支持</td>
<td align="center">不支持</td>
</tr>
<tr>
<td align="center">SpEL</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">JSR303数据校验</td>
<td align="center">支持</td>
<td align="center">不支持</td>
</tr>
<tr>
<td align="center">复杂类型封装</td>
<td align="center">支持</td>
<td align="center">不支持</td>
</tr>
</tbody></table>
<h5 id="松散绑定"><a href="#松散绑定" class="headerlink" title="松散绑定"></a>松散绑定</h5><p>​    例如 Person中有<code>lastname</code>属性，在配置文件中可以写成<code>lastName</code>或<code>lastname</code>或<code>last-name</code>或<code>last_name</code>等等</p>
<h4 id="4-1-1-ConfigurationProperties的值注入示例"><a href="#4-1-1-ConfigurationProperties的值注入示例" class="headerlink" title="4.1.1. @ConfigurationProperties的值注入示例"></a>4.1.1. @ConfigurationProperties的值注入示例</h4><h5 id="1-YAML配置文件的编写"><a href="#1-YAML配置文件的编写" class="headerlink" title="1. YAML配置文件的编写"></a>1. YAML配置文件的编写</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">lastName:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2020</span><span class="string">/02/02</span></span><br><span class="line">    <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="string">v2&#125;</span></span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">    <span class="attr">dog:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">狗</span></span><br><span class="line">        <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>

<h5 id="2-JavaBean的编写"><a href="#2-JavaBean的编写" class="headerlink" title="2. JavaBean的编写"></a>2. JavaBean的编写</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；  </span></span><br><span class="line"><span class="comment"> * prefix = "person"：与配置文件中哪一个元素下面的所有属性进行一一映射  *  </span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>) <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;       </span><br><span class="line">    <span class="keyword">private</span> String lastName;     </span><br><span class="line">    <span class="keyword">private</span> Integer age;     </span><br><span class="line">    <span class="keyword">private</span> Boolean boss;     </span><br><span class="line">    <span class="keyword">private</span> Date birth;       </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;     <span class="keyword">private</span> List&lt;Object&gt; lists;     </span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<h5 id="3-在Maven的pom文件中导入处理器"><a href="#3-在Maven的pom文件中导入处理器" class="headerlink" title="3. 在Maven的pom文件中导入处理器"></a>3. 在Maven的pom文件中导入处理器</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入了这个配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloworldquickstartApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-1-2-配置文件相关的注解"><a href="#4-1-2-配置文件相关的注解" class="headerlink" title="4.1.2. 配置文件相关的注解"></a>4.1.2. 配置文件相关的注解</h4><h5 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h5><p>该注解的作用是加载指定的配置文件，该注解的value是一个数组，所以可以加载多个配置文件</p>
<h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>

<p>​    使用<code>@PropertySource</code>注解加载配置文件需要JavaBean使用<code>@Component</code>等注解而不是等待<code>@EnableConfigurationProperties</code>激活。</p>
<p>​    <code>@PropertySource</code>注解不支持YAML文件，只支持<code>.properties</code>格式的文件。</p>
<h5 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h5><p>SpringBoot不能自动识别Spring的配置文件。而<code>@ImportResource</code>注解用于导入Spring的配置文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure>

<h5 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h5><p>可使用<code>@Bean</code>给容器添加组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *相当于在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">myPet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pet pet = <span class="keyword">new</span> Pet();</span><br><span class="line">        pet.setName(<span class="string">"嘟嘟"</span>);</span><br><span class="line">        pet.setAge(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> pet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-1-3-配置文件的占位符"><a href="#4-1-3-配置文件的占位符" class="headerlink" title="4.1.3. 配置文件的占位符"></a>4.1.3. 配置文件的占位符</h4><h5 id="使用占位符获取随机数"><a href="#使用占位符获取随机数" class="headerlink" title="使用占位符获取随机数"></a>使用占位符获取随机数</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$&#123;random.value&#125;</span><br><span class="line">$&#123;random.int&#125;</span><br><span class="line">$&#123;random.long&#125;</span><br><span class="line">$&#123;random.int(10)&#125;</span><br><span class="line">$&#123;random.int[1024,65536]&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用占位符获取之前配置的值"><a href="#使用占位符获取之前配置的值" class="headerlink" title="使用占位符获取之前配置的值"></a>使用占位符获取之前配置的值</h5><p>如果没有会原样输出，或者使用<code>:</code>指定默认值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">person.last-name=张三$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.int&#125;</span><br><span class="line">person.birth=2017/12/15</span><br><span class="line">person.boss=false</span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=14</span><br><span class="line">person.lists=a,b,c</span><br><span class="line">person.dog.name=$&#123;person.hello:hello&#125;_dog</span><br><span class="line">person.dog.age=15</span><br></pre></td></tr></table></figure>

<h3 id="4-2-Profile"><a href="#4-2-Profile" class="headerlink" title="4.2. Profile"></a>4.2. Profile</h3><h4 id="4-2-0-多Profile文件的命名格式"><a href="#4-2-0-多Profile文件的命名格式" class="headerlink" title="4.2.0. 多Profile文件的命名格式"></a>4.2.0. 多Profile文件的命名格式</h4><p>在编写主配置文件时，文件名可以是<code>application-{profile}.properties/yml</code></p>
<h4 id="4-2-1-激活指定profile"><a href="#4-2-1-激活指定profile" class="headerlink" title="4.2.1. 激活指定profile"></a>4.2.1. 激活指定profile</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>用yml的多文档块方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span>  <span class="comment">#指定属于哪个环境</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure>

<h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>在主配置文件(application.properties/yml)中用<code>spring.profiles.active=xxx</code>指定要使用的<strong>其他的配置文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在主配置文件中配置如下参数 </span></span><br><span class="line"><span class="string">spring.profiles.active=xxx</span></span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">8181</span></span><br></pre></td></tr></table></figure>

<h5 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h5><p>用命令行的方式激活</p>
<p><strong>–spring.profiles.active=xxx</strong></p>
<h5 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h5><p>用虚拟机的方式激活</p>
<p><strong>-Dspring.profiles.active=xxx</strong></p>
<h3 id="4-3-配置文件的优先级和加载顺序"><a href="#4-3-配置文件的优先级和加载顺序" class="headerlink" title="4.3. 配置文件的优先级和加载顺序"></a>4.3. 配置文件的优先级和加载顺序</h3><p>在不指定被加载文件时，默认的加载顺序为：<strong>由里向外加载</strong>。(即优先级)<br>所以<strong>最外层的配置文件会被最后加载，会覆盖里层文件里的属性</strong>。</p>
<ul>
<li><code>file:./config/</code>：位于与jar包同级目录下的config文件夹，优先级<strong>最高</strong>，<strong>最后被加载</strong>。</li>
<li><code>file:./</code>：位于与jar包同级目录下</li>
<li><code>classpath:/config/</code>：idea环境下，resource文件夹下的config文件夹</li>
<li><code>classpath:/</code>：idea环境下，resource文件夹，<strong>优先级最低</strong>，<strong>最先被加载</strong>。</li>
</ul>
<p>还可通过<code>--spring.config.location</code>参数指定配置文件的新位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties</span><br></pre></td></tr></table></figure>

<h3 id="4-4-外部配置加载顺序"><a href="#4-4-外部配置加载顺序" class="headerlink" title="4.4. 外部配置加载顺序"></a>4.4. 外部配置加载顺序</h3><p><strong>SpringBoot 也可以从以下位置加载配置。以下顺序优先级从高到低，高优先级配置会覆盖低优先级配置，所有配置会形成互补配置。</strong></p>
<h4 id="1-命令行参数"><a href="#1-命令行参数" class="headerlink" title="1.命令行参数"></a>1.命令行参数</h4><p>所有配置都可以在命令行上进行指定，多想配置用空格隔开。例如：</p>
<p><code>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087 --server.context-path=/abc</code></p>
<h4 id="2-来自java-comp-env的JNDI属性"><a href="#2-来自java-comp-env的JNDI属性" class="headerlink" title="2.来自java:comp/env的JNDI属性"></a>2.来自java:comp/env的JNDI属性</h4><h4 id="3-Java系统属性-System-getProperties"><a href="#3-Java系统属性-System-getProperties" class="headerlink" title="3.Java系统属性(System.getProperties())"></a>3.Java系统属性(System.getProperties())</h4><h4 id="4-操作系统环境变量"><a href="#4-操作系统环境变量" class="headerlink" title="4.操作系统环境变量"></a>4.操作系统环境变量</h4><h4 id="5-RandomValuePropertySource配置的random-属性值"><a href="#5-RandomValuePropertySource配置的random-属性值" class="headerlink" title="5.RandomValuePropertySource配置的random.*属性值"></a>5.RandomValuePropertySource配置的random.*属性值</h4><p><strong>由jar包外向jar包内进行寻找</strong>；<strong>优先加载带profile的</strong></p>
<h4 id="6-jar包外部的application-profile-properties或application-yml-带spring-profile-配置文件"><a href="#6-jar包外部的application-profile-properties或application-yml-带spring-profile-配置文件" class="headerlink" title="6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件"></a><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></h4><h4 id="7-jar包内部的application-profile-properties或application-yml-带spring-profile-配置文件"><a href="#7-jar包内部的application-profile-properties或application-yml-带spring-profile-配置文件" class="headerlink" title="7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件"></a><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></h4><p><strong>再加载不带profile的</strong></p>
<h4 id="8-jar包外部的application-properties或application-yml-不带spring-profile-配置文件"><a href="#8-jar包外部的application-properties或application-yml-不带spring-profile-配置文件" class="headerlink" title="8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件"></a><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></h4><h4 id="9-jar包内部的application-properties或application-yml-不带spring-profile-配置文件"><a href="#9-jar包内部的application-properties或application-yml-不带spring-profile-配置文件" class="headerlink" title="9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件"></a><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></h4><h4 id="10-Configuration注解类上的-PropertySource"><a href="#10-Configuration注解类上的-PropertySource" class="headerlink" title="10.@Configuration注解类上的@PropertySource"></a>10.@Configuration注解类上的@PropertySource</h4><h4 id="11-通过SpringApplication-setDefaultProperties指定的默认属性"><a href="#11-通过SpringApplication-setDefaultProperties指定的默认属性" class="headerlink" title="11.通过SpringApplication.setDefaultProperties指定的默认属性"></a>11.通过SpringApplication.setDefaultProperties指定的默认属性</h4><p>……</p>
<h2 id="5-Spring-Boot和日志"><a href="#5-Spring-Boot和日志" class="headerlink" title="5. Spring Boot和日志"></a>5. Spring Boot和日志</h2><h3 id="5-0-市面上的日志框架"><a href="#5-0-市面上的日志框架" class="headerlink" title="5.0. 市面上的日志框架"></a>5.0. 市面上的日志框架</h3><table>
<thead>
<tr>
<th>日志门面  （日志的抽象层）</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td><del>JCL（Jakarta  Commons Logging）</del>    <br>SLF4j（Simple  Logging Facade for Java）   <br> <del><strong>jboss-logging</strong></del></td>
<td>Log4j<br>JUL(java.util.logging)<br>Log4j2 <br><strong>Logback</strong></td>
</tr>
</tbody></table>
<p>Spring框架默认是用<strong>JCL</strong>，<strong>而SpringBoot选用 SLF4j和logback</strong></p>
<h3 id="5-1-SLF4j的使用"><a href="#5-1-SLF4j的使用" class="headerlink" title="5.1. SLF4j的使用"></a>5.1. SLF4j的使用</h3><h4 id="5-1-0-如何在系统中使用SLF4j"><a href="#5-1-0-如何在系统中使用SLF4j" class="headerlink" title="5.1.0. 如何在系统中使用SLF4j"></a>5.1.0. 如何在系统中使用SLF4j</h4><p>​    开发时调用日志记录方法的正确姿势：不直接调用日志的实现类，而是调用日志抽象层里面的方法。详情见<a href="https://www.slf4j.org" target="_blank" rel="noopener">SLF4j官网</a></p>
<p>SLF4j的实现原理图示：</p>
<p><img src="http://www.slf4j.org/images/concrete-bindings.png" alt="SLF4j图示"></p>
<p>​    每一个日志实现框架都有属于自己的配置文件，使用SLF4j后，<strong>配置文件还是要用日志实现类本身的配置文件</strong>。</p>
<h4 id="5-1-1-统一日志记录"><a href="#5-1-1-统一日志记录" class="headerlink" title="5.1.1. 统一日志记录"></a>5.1.1. 统一日志记录</h4><p>如何让使用不同日志的框架<strong>统一使用SLf4j日志记录</strong>。</p>
<ul>
<li><p>先将系统中其他日志框架排除出去</p>
</li>
<li><p>再用中间包来替换原有的日志框架</p>
</li>
<li><p>最后导入SLF4j的其他实现类</p>
<p><strong>SLF4j日志适配图</strong></p>
</li>
</ul>
<p><img src="http://www.slf4j.org/images/legacy.png" alt="SLF4j日志适配图"></p>
<h3 id="5-2-SpringBoot日志关系"><a href="#5-2-SpringBoot日志关系" class="headerlink" title="5.2. SpringBoot日志关系"></a>5.2. SpringBoot日志关系</h3><p>SpringBoot是用<code>spring-boot-starter-logging</code>来记录日志的，用的时候只要引入相关依赖即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>SpringBoot底层使用的是SLF4j+logback进行日志记录</p>
</li>
<li><p>SpringBoot在底层把其他日志都替换成了SLF4j</p>
<p><img src="/2020/04/30/%E7%AC%94%E8%AE%B0-SpringBoot/SpringBoot%E5%BA%95%E5%B1%82%E6%97%A5%E5%BF%97%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" alt="SpringBoot底层日志依赖关系"></p>
</li>
<li><p>SpringBoot能自动适配所有的日志，<strong>引入其他日志框架时，只需把这个框架依赖的日志框架排除掉即可</strong>。</p>
</li>
</ul>
<h3 id="5-3-SpringBoot的日志配置"><a href="#5-3-SpringBoot的日志配置" class="headerlink" title="5.3. SpringBoot的日志配置"></a>5.3. SpringBoot的日志配置</h3><h4 id="5-3-0-SpringBoot日志的默认配置示例"><a href="#5-3-0-SpringBoot日志的默认配置示例" class="headerlink" title="5.3.0. SpringBoot日志的默认配置示例"></a>5.3.0. SpringBoot日志的默认配置示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//日志的级别；</span></span><br><span class="line">	<span class="comment">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">	<span class="comment">//可以调整输出的日志级别；之后打印日志就只会在这个级别以后的高级别生效</span></span><br><span class="line">	logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">	logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line">	<span class="comment">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class="line">	logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">	logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">	logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-1-SpringBoot默认配置文件里的一些日志设置"><a href="#5-3-1-SpringBoot默认配置文件里的一些日志设置" class="headerlink" title="5.3.1. SpringBoot默认配置文件里的一些日志设置"></a>5.3.1. SpringBoot默认配置文件里的一些日志设置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该属性可以调整指定包下的SpringBoot的日志输出级别</span></span><br><span class="line"><span class="meta">logging.level.com.xxx</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#logging.file.name和logging.file.path待验证</span></span><br><span class="line"><span class="comment"># 不指定路径在当前项目下生成springboot.log日志</span></span><br><span class="line"><span class="comment"># 可以指定完整的路径；</span></span><br><span class="line"><span class="comment">#logging.file.name=G:/springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span></span><br><span class="line"><span class="meta">logging.file.path</span>=<span class="string">/spring/log</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志输出格式：</span></span><br><span class="line"><span class="comment">	# %d表示日期时间，</span></span><br><span class="line"><span class="comment">	# %thread表示线程名，</span></span><br><span class="line"><span class="comment">	# %-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">	# %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">	# %msg：日志消息，</span></span><br><span class="line"><span class="comment">	# %n是换行符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">    # %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中日志输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-2-专门指定日志配置文件"><a href="#5-3-2-专门指定日志配置文件" class="headerlink" title="5.3.2. 专门指定日志配置文件"></a>5.3.2. 专门指定日志配置文件</h4><p>在类路径下放每个日志框架的配置文件即可。每个日志框架对应的配置文件的名称如下：</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>以logback为例，当日志的配置文件的默认名称为<code>logback.xml</code>时，该配置文件会被日志框架识别。</p>
<p>当日志的配置文件是其他名称时，如<code>logback-spring.xml</code>，会由SpringBoot直接进行日志解析。这时可以使用SpringBoot的<strong>高级Profile功能</strong>，只需在对应的配置文件里加上相应的<code>springProfile</code>标签即可，示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">			%d表示日期时间，</span></span><br><span class="line"><span class="comment">			%thread表示线程名，</span></span><br><span class="line"><span class="comment">			%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">			%msg：日志消息，</span></span><br><span class="line"><span class="comment">			%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-3-切换日志框架"><a href="#5-3-3-切换日志框架" class="headerlink" title="5.3.3. 切换日志框架"></a>5.3.3. 切换日志框架</h4><p>SpringBoot默认使用的日志框架是<strong>SLF4j+logback</strong>。要想切换成其他日志框架，需要在Maven的pom.xml文件中<strong>修改依赖关系</strong>。</p>
<p>以<strong>SLF4j+logback</strong>切换成<strong>SLF4j+log4j</strong>为例</p>
<h5 id="切换方式一"><a href="#切换方式一" class="headerlink" title="切换方式一"></a>切换方式一</h5><p>首先要排除<code>logback-classic</code>和<code>log4j-over-slf4j</code>，通过之前的SLF4j日志适配图，可以看出，要想使用log4j，需要slf4j-log4j12这个包。具体的<strong>日志适配图</strong>和<strong>添加修改的依赖关系</strong>如下：</p>
<p><strong>SLF4j日志适配图</strong></p>
<p><img src="http://www.slf4j.org/images/legacy.png" alt="SLF4j日志适配图"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h5><p>在Maven的pom.xml文件中直接去除<code>spring-boot-starter-logging</code>依赖，转而添加<code>spring-boot-starter-log4j2</code>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-Spring-Boot的Web开发"><a href="#6-Spring-Boot的Web开发" class="headerlink" title="6. Spring Boot的Web开发"></a>6. Spring Boot的Web开发</h2><h3 id="6-0-SpringBoot对静态资源的映射规则"><a href="#6-0-SpringBoot对静态资源的映射规则" class="headerlink" title="6.0. SpringBoot对静态资源的映射规则"></a>6.0. SpringBoot对静态资源的映射规则</h3><h4 id="6-0-0-两种静态资源映射规则"><a href="#6-0-0-两种静态资源映射规则" class="headerlink" title="6.0.0. 两种静态资源映射规则"></a>6.0.0. 两种静态资源映射规则</h4><p>SpringBoot对静态资源的存放位置有具体的规定。静态资源具体放在哪呢，这跟一个类有关，那就是<strong>WebMvcAuotConfiguration</strong>，它的部分源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="comment">// 添加资源映射的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="comment">//静态资源文件夹映射</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    上述源码中的<code>addResourceHandlers</code>方法，规定了两条映射规则：</p>
<ul>
<li><p>其一，如果访问路径中是以<code>/webjars/**</code>结尾的话，SpringBoot会去<code>classpath:/META-INF/resources/webjars/</code>路径下找具体的静态资源。</p>
<p>​    例如，先在Maven的pom.xml文件中引入<strong>webjar格式</strong>的jQuery的Maven坐标，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jquery-webjar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    引入之后，它在Maven里的目录层级如下图：</p>
<p><img src="/2020/04/30/%E7%AC%94%E8%AE%B0-SpringBoot/jQuery-webjar.png" alt="jQuery-webjar"></p>
<p>​    那么之后，我们以<code>localhost:8080/webjars/jquery/3.3.1/jquery.js</code>形式的URL访问，便可获取到对应的静态资源。而<strong>webjar格式</strong>的Maven坐标可以去<a href="http://www.webjars.org/" target="_blank" rel="noopener">webjar官方网站</a>寻找。</p>
</li>
<li><p>其二，如果访问路径是以<code>/**</code>结尾(<strong>即访问任何路径</strong>)，且SpringBoot没有用第一种规则进行处理，那么便会在以下几种路径里寻找具体的资源。另外这个<code>/**</code>是由<strong>MvcProperties类</strong>中的常量staticPathPattern定义的。</p>
<p>例如，我们输入的URL为<code>localhost:8080/abc</code>时，便会去下面的路径里寻找abc资源。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">"classpath:/META-INF/resources/", 意思是在当前类路径下的META-INF文件夹的resources文件夹里寻找具体的静态资源</span><br><span class="line">"classpath:/resources/",意思是在当前类路径下的resources文件夹里寻找具体的静态资源</span><br><span class="line">"classpath:/static/", 意思是在当前类路径下的static文件夹里寻找具体的静态资源</span><br><span class="line">"classpath:/public/" ,意思是在当前类路径下的public文件夹里寻找具体的静态资源</span><br></pre></td></tr></table></figure>

<p>​    为什么是这几个位置呢，这就跟<strong>ResourceProperties类</strong>的配置有关了，观察上方的<strong>WebMvcAuotConfiguration</strong>部分源码的第二条映射规则，可知它调用了<strong>ResourceProperties类</strong>的几个方法，而这几个静态资源的存放位置正是写在了<strong>ResourceProperties类</strong>里面，<strong>ResourceProperties类</strong>的部分源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以设置和静态资源有关的参数，缓存时间等</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.resources"</span>, ignoreUnknownFields = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line">			<span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span></span><br><span class="line"><span class="comment">	 * /resources/, /static/, /public/].</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Whether to enable default resource handling.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> addMappings = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Chain chain = <span class="keyword">new</span> Chain();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Cache cache = <span class="keyword">new</span> Cache();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String[] getStaticLocations() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.staticLocations;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStaticLocations</span><span class="params">(String[] staticLocations)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.staticLocations = appendSlashIfNecessary(staticLocations);</span><br><span class="line">	&#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    既然写在了<strong>XxxProperties类中</strong>，根据之前的SpringBoot自动配置原理可知，我们可以在SpringBoot的配置文件中手动指定静态资源的存放位置，例如，我们设置类路径下的hello文件夹和xxx文件夹为静态资源的存放位置，写法如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-location</span>=<span class="string">classpath:/hello,classpath:/xxx</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="6-0-1-欢迎页映射规则"><a href="#6-0-1-欢迎页映射规则" class="headerlink" title="6.0.1. 欢迎页映射规则"></a>6.0.1. 欢迎页映射规则</h4><p>关于欢迎页配置相关的SpringBoot源码改了，有时间再探究。</p>
<p><strong>欢迎页设置在所有的静态资源文件夹下，名称为index.html。</strong></p>
<p>例如访问<code>localhost:8080/</code>路径，找的便是index页面</p>
<p>​    <del>除去上面说的两种映射规则之外，SpringBoot还提供了<strong>欢迎页的映射规则</strong>，这也跟<strong>WebMvcAuotConfiguration</strong>有关，部分源码如下：</del></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置欢迎页映射</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">        <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">        <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-0-2-图标映射规则"><a href="#6-0-2-图标映射规则" class="headerlink" title="6.0.2. 图标映射规则"></a>6.0.2. 图标映射规则</h4><p>跟欢迎页一样，<code>favicon.ico</code>都是放在所有的静态资源文件夹下。</p>
<p>映射路径为<code>/favicon.ico</code>，具体行不行还没试。</p>
<p>SpringBoot2.2.6源码改了，WebMvcAuotConfiguration下的<strong>静态类FaviconConfiguration</strong>没有了，有时间再去找相应源码理解。</p>
<h3 id="6-1-模板引擎"><a href="#6-1-模板引擎" class="headerlink" title="6.1. 模板引擎"></a>6.1. 模板引擎</h3><p>JSP、Velocity、Freemarker、Thymeleaf等等等等</p>
<p>SpringBoot推荐使用Thymeleaf</p>
<p><strong>模板引擎图示</strong></p>
<p><img src="/2020/04/30/%E7%AC%94%E8%AE%B0-SpringBoot/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%9B%BE%E7%A4%BA.png" alt="模板引擎图示"></p>
<h4 id="6-1-0-引入thymeleaf"><a href="#6-1-0-引入thymeleaf" class="headerlink" title="6.1.0. 引入thymeleaf"></a>6.1.0. 引入thymeleaf</h4><p>在Maven的pom.xml文件里配置相关标签。没试验过，用的时候要试验下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- thymeleaf2适配layout1--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-1-1-thymeleaf的使用"><a href="#6-1-1-thymeleaf的使用" class="headerlink" title="6.1.1. thymeleaf的使用"></a>6.1.1. thymeleaf的使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure>

<p>将HTML页面放在类路径下的templates文件夹里，thymeleaf就能自动渲染。</p>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul>
<li><p>导入thymeleaf的名称空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用thymeleaf语法编写，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>至于thymeleaf的语法规则见thymeleaf常用语法一文。</p>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>框架</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Servlet</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-Servlet/</url>
    <content><![CDATA[<p>Servlet的简单学习</p>
<a id="more"></a>

<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="0-简述"><a href="#0-简述" class="headerlink" title="0. 简述"></a>0. 简述</h2><p>Servlet是两单词，Server、applet的合并，即<strong>服务器上的Java小程序</strong>。它是JavaEE的规范之一，JavaWeb三大组件之一。<br>简单理解，就是服务器端的Java小程序不能随意编写，必须要实现Servlet接口(其实我也不是很懂(●—●)),然后就可以接收客户端发送过来的请求，并响应数据给客户端了。</p>
<h2 id="1-Servlet程序的Web-xml文件配置示例"><a href="#1-Servlet程序的Web-xml文件配置示例" class="headerlink" title="1. Servlet程序的Web.xml文件配置示例"></a>1. Servlet程序的Web.xml文件配置示例</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet 标签给 Tomcat 配置 Servlet 程序 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-name 标签 Servlet 程序起一个别名（一般是类名） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-class 是 Servlet 程序的全类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.xxx.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--servlet-mapping 标签给 servlet 程序配置访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-name 标签的作用是告诉服务器，我当前配置的地址给哪个 Servlet 程序使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--url-pattern 标签配置访问地址 &lt;br/&gt;	</span></span><br><span class="line"><span class="comment">        / 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">        /hello 表示地址为：http://ip:port/工程路径/hello &lt;br/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-Servlet的生命周期"><a href="#2-Servlet的生命周期" class="headerlink" title="2. Servlet的生命周期"></a>2. Servlet的生命周期</h2><p>Servlet对象从最初的创建，方法的调用，到最后的销毁，都是由<strong>Web容器管理</strong>的。<br>默认情况下，Servlet对象在Web容器启动时不会实例化，可通过设置来改变其初始化的顺序(在web.xml文件中的servlet标签中配置load-on-startup标签)。</p>
<h3 id="2-0-简述Servlet生命周期"><a href="#2-0-简述Servlet生命周期" class="headerlink" title="2.0. 简述Servlet生命周期"></a>2.0. 简述Servlet生命周期</h3><ul>
<li>用户在浏览器上输入URL</li>
<li>Web容器截取了请求路径</li>
<li>Web容器在容器上下文中寻找请求路径对应的Servlet对象</li>
<li>如果没有找到对应的Servlet对象<ul>
<li>通过web.xml文件中配置的相关信息，得到请求路径对应的Servlet的完整类名</li>
<li>通过反射机制调用对应Servlet的无参构造方法将此Servlet实例化</li>
<li>Web容器调用该Servlet的<strong>init方法</strong>进行初始化操作</li>
<li>Web容器再调用该Servlet的<strong>service方法</strong>来提供服务</li>
</ul>
</li>
<li>若找到对应的Servlet对象，Web容器会直接调用该Servlet的<strong>service方法</strong>提供服务</li>
<li>Web容器关闭时或webapp重新部署时或该Servlet对象长时间没有被调用，Web容器都会把该Servlet对象销毁。<strong>在销毁之前</strong>，Web容器会调用该Servlet对象的<strong>destroy方法</strong>，完成销毁前的准备</li>
</ul>
<h3 id="2-1-Servlet各种方法的运执行次数"><a href="#2-1-Servlet各种方法的运执行次数" class="headerlink" title="2.1. Servlet各种方法的运执行次数"></a>2.1. Servlet各种方法的运执行次数</h3><ul>
<li>构造方法只执行一次</li>
<li>init方法只执行一次，执行时，Servket对象已经创建好</li>
<li>service方法，用户请求一次，执行一次</li>
<li>destroy方法只执行一次</li>
</ul>
<h2 id="3-ServletConfig"><a href="#3-ServletConfig" class="headerlink" title="3. ServletConfig"></a>3. ServletConfig</h2><h3 id="3-0-简述"><a href="#3-0-简述" class="headerlink" title="3.0. 简述"></a>3.0. 简述</h3><p>ServletConfig是一个接口，封装了对应Servlet对象的配置信息，Web容器中有它的实现类。它和Servlet对象一一对应，且在Servlet对象创建时由Web容器自动创建。</p>
<h3 id="3-1-ServletConfig的作用"><a href="#3-1-ServletConfig的作用" class="headerlink" title="3.1. ServletConfig的作用"></a>3.1. ServletConfig的作用</h3><ul>
<li>获取 Servlet 程序的别名 servlet-name 的值</li>
<li>获取初始化参数 init-param</li>
<li>获取 ServletContext 对象</li>
</ul>
<h3 id="3-2-ServletConfig的常用方法"><a href="#3-2-ServletConfig的常用方法" class="headerlink" title="3.2. ServletConfig的常用方法"></a>3.2. ServletConfig的常用方法</h3><ul>
<li><strong>String getInitParameter(“name”)</strong>; 获取当前对象的指定属性值</li>
<li><strong>Enumeration getInitParameterNames( )</strong>; 获取所有初始化参数的key，返回一个枚举</li>
<li><strong>String getServletName()</strong>; 获取Servlet对象的别名</li>
<li><strong>ServletContext getServletContext()</strong>; 获取ServletContext(Servlet上下文)对象</li>
</ul>
<h2 id="4-ServletContext"><a href="#4-ServletContext" class="headerlink" title="4. ServletContext"></a>4. ServletContext</h2><h3 id="4-0-简述"><a href="#4-0-简述" class="headerlink" title="4.0. 简述"></a>4.0. 简述</h3><ul>
<li>ServletContext 是一个接口，它表示 Servlet 上下文对象</li>
<li>ServletContext是域对象，代表应用域，整个应用只有一个ServletContext</li>
<li>ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁</li>
</ul>
<h3 id="4-1-ServletContext的作用"><a href="#4-1-ServletContext的作用" class="headerlink" title="4.1. ServletContext的作用"></a>4.1. ServletContext的作用</h3><ul>
<li>获取全局配置参数(context-param):this.getServletContext().getInitParameter(“key”)</li>
<li>保存数据,同一个项目的Servlet共享数据</li>
<li>加载配置文件:InputStream in = this.getServletContext().getResourceAsStream(“路径”)</li>
<li>获取当前的工程路径和文件的绝对路径:this.getServletContext().getRealPath(“/xx/xxx”)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1、获取 web.xml 中配置的上下文参数 context-param</span></span><br><span class="line">ServletContext context = getServletConfig().getServletContext();</span><br><span class="line">String username = context.getInitParameter(<span class="string">"username"</span>);</span><br><span class="line">System.out.println(<span class="string">"context-param 参数 username 的值是:"</span> + username);</span><br><span class="line">System.out.println(<span class="string">"context-param 参数 password 的值是:"</span> +</span><br><span class="line">context.getInitParameter(<span class="string">"password"</span>));</span><br><span class="line"><span class="comment">// 2、获取当前的工程路径，格式: /工程路径</span></span><br><span class="line">System.out.println( <span class="string">"当前工程路径:"</span> + context.getContextPath() );</span><br><span class="line"><span class="comment">// 3、获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line"><span class="comment">//  斜杠被服务器解析地址为:http://ip:port/工程名/，在IDEA下，可能会根据设置里的输出目录不同而发生变化</span></span><br><span class="line">System.out.println(<span class="string">"工程部署的路径是:"</span> + context.getRealPath(<span class="string">"/"</span>));</span><br><span class="line">System.out.println(<span class="string">"工程下 css 目录的绝对路径是:"</span> + context.getRealPath(<span class="string">"/css"</span>));</span><br><span class="line">System.out.println(<span class="string">"工程下 imgs 目录 1.jpg 的绝对路径是:"</span> + context.getRealPath(<span class="string">"/imgs/1.jpg"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>请求转发:this.getServletContext().getRequestDispatcher(“路径”).forward(req,resp)</li>
</ul>
<h3 id="4-2-ServletContext的常用方法"><a href="#4-2-ServletContext的常用方法" class="headerlink" title="4.2. ServletContext的常用方法"></a>4.2. ServletContext的常用方法</h3><ul>
<li>void setAttribute(key, value)</li>
<li>Object getAttributre(key)</li>
<li>void removeAttribute(key)</li>
<li>String getInitParameter(String name)</li>
<li>Enumeration getInitParameterNames();</li>
<li>String getRealPath(“虚拟路径”):获取绝对路径/真实路径</li>
<li>String getContextPath():获取工程路径</li>
</ul>
<h2 id="5-欢迎页面的设置"><a href="#5-欢迎页面的设置" class="headerlink" title="5. 欢迎页面的设置"></a>5. 欢迎页面的设置</h2><p>用户在直接访问webapp时自动定位到的页面即为欢迎页面。欢迎页面可以在web.xml中进行设置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>html/welcome.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="欢迎页面的注意点"><a href="#欢迎页面的注意点" class="headerlink" title="欢迎页面的注意点"></a>欢迎页面的注意点</h3><ul>
<li>欢迎页面可以设置多个，越靠上优先级越高。</li>
<li>欢迎页面可以设置多种，html,jsp,servlet…都可。</li>
<li>设置欢迎页面的路径时，<strong>路径开头没有“/”</strong>。</li>
</ul>
<h3 id="欢迎页面的全局配置和局部配置"><a href="#欢迎页面的全局配置和局部配置" class="headerlink" title="欢迎页面的全局配置和局部配置"></a>欢迎页面的全局配置和局部配置</h3><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><p>在CATALINA_HOME/conf/web.xml中已经配置好了几种欢迎页面的格式。</p>
<h4 id="局部配置"><a href="#局部配置" class="headerlink" title="局部配置"></a>局部配置</h4><p>CATALINA_HOME/webapps/webapp/WEB-INF/web.xml<br>我们所写的项目的web.xml中的欢迎页面的配置会覆盖全局配置。</p>
<h2 id="6-HttpServletRequest"><a href="#6-HttpServletRequest" class="headerlink" title="6. HttpServletRequest"></a>6. HttpServletRequest</h2><h3 id="6-0-简述"><a href="#6-0-简述" class="headerlink" title="6.0. 简述"></a>6.0. 简述</h3><p>HttpServletRequest是一个接口，其封装了HTTP请求协议的全部内容，其接口实现类由WEB容器负责实现。<br>前端传来的数据，会自动封装到request对象中，request对象中有Map集合存放这些数据，Map集合的key是参数的name,value是字符串类型的一维数组。</p>
<h3 id="6-1-HttpServletRequest的方法"><a href="#6-1-HttpServletRequest的方法" class="headerlink" title="6.1. HttpServletRequest的方法"></a>6.1. HttpServletRequest的方法</h3><h4 id="6-1-0-获取请求行的相关方法"><a href="#6-1-0-获取请求行的相关方法" class="headerlink" title="6.1.0. 获取请求行的相关方法"></a>6.1.0. 获取请求行的相关方法</h4><p>以URL<code>http://localhost:8080/request?name=zhangsan&amp;age=17</code>为例</p>
<ul>
<li><strong>String getMethod()</strong>:获取请求方式 </li>
<li><strong>String getRequestURI()</strong>:获取URI。即上面URL中/到问号之前的内容</li>
<li><strong>StringBuffer getRequestURL()</strong>:获取URL。即从开始到<strong>问号</strong>之前的内容</li>
<li><strong>String getQueryString()</strong>:获取请求参数。即<strong>问号</strong>之后的内容</li>
</ul>
<h4 id="6-1-1-获取请求头的相关方法"><a href="#6-1-1-获取请求头的相关方法" class="headerlink" title="6.1.1. 获取请求头的相关方法"></a>6.1.1. 获取请求头的相关方法</h4><ul>
<li><strong>String getHeader(String name)</strong>:获取请求头中的指定内容</li>
<li><strong>[Enumeration]&lt;String&gt; getHeaderNames()</strong>:获取所有请求头，返回一个枚举</li>
<li><strong>int getIntHeader(String name)</strong>:通过一个key获取int类型的值</li>
</ul>
<p>……</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration&lt;String&gt; headerNames = req.getHeaderNames();</span><br><span class="line"><span class="keyword">while</span>(headerNames.hasMoreElements()) &#123;</span><br><span class="line">    <span class="comment">// 遍历获得key值</span></span><br><span class="line">	String name = headerNames.nextElement();</span><br><span class="line">    <span class="comment">// 通过getHeader("key")获取value值</span></span><br><span class="line">    String value = req.getHeader(name);</span><br><span class="line">    System.out.println(name + <span class="string">"=="</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-2-获取请求参数的相关方法"><a href="#6-1-2-获取请求参数的相关方法" class="headerlink" title="6.1.2. 获取请求参数的相关方法"></a>6.1.2. 获取请求参数的相关方法</h4><ul>
<li><strong>String getParameter(String name)</strong>:获取key获取value一维数组的<strong>首元素</strong></li>
<li><strong>String[] getParameterValues(String name)</strong>:通过参数的Map集合的key获取value,返回一个数组</li>
<li><strong>Enumeration&lt;String&gt; getParameterNames()</strong>:获取参数的Map对象的所有key</li>
<li><strong>Map&lt;String,String[]&gt; getParameterMap()</strong>:获取所有key和value的Map对象(Map&lt;String, String[]&gt;)</li>
</ul>
<h4 id="6-1-3-其他方法"><a href="#6-1-3-其他方法" class="headerlink" title="6.1.3. 其他方法"></a>6.1.3. 其他方法</h4><ul>
<li><strong>String getContextPath()</strong>:获取上下文路径</li>
<li><strong>String getServletPath()</strong>:获取Servlet路径</li>
<li><strong>String getRemoteAddr()</strong>:获取IP地址</li>
<li><strong>Object getAttribute(key)</strong>:获取域数据</li>
<li><strong>ReuquestDispatcher getRequestDispatcher(String path)</strong>:获取请求转发器</li>
<li><strong>Cookie[] getCookies()</strong>:获取所有的Cookie</li>
<li><strong>HttpSession getsession()</strong>:获取HttpSession对象,没有则创建一个</li>
<li><strong>HttpSession getsession(boolean create)</strong>:获取HttpSession对象，参数为true获取不到时创建，为false时获取不到时返回null<br><strong>未完待续</strong></li>
</ul>
<h2 id="7-HttpServletResponse"><a href="#7-HttpServletResponse" class="headerlink" title="7. HttpServletResponse"></a>7. HttpServletResponse</h2><h3 id="7-0-简述"><a href="#7-0-简述" class="headerlink" title="7.0. 简述"></a>7.0. 简述</h3><p>HttpServletResponse，是接口。每次请求进来，Tomcat服务器都会创建一个Response 对象传递给 Servlet 程序去使用。HttpServletResponse 表示所有响应的信息，我们如果需要设置返回给客户端的信息，都可以通过 HttpServletResponse 对象来进行设置。</p>
<h3 id="7-1-常用方法"><a href="#7-1-常用方法" class="headerlink" title="7.1. 常用方法"></a>7.1. 常用方法</h3><ul>
<li><strong>PrintWriter getWrite()</strong>:获取打印流(字符流)，继而调用<strong>write()</strong>方法往页面写东西。常用于回传字符串</li>
<li><strong>ServletOutputStream getOutputStream()</strong>:获取输出流(字节流)，继而调用<strong>write()</strong>方法往页面写东西。常用于下载（传递二进制数据）<br><strong>以上两个流同时只能使用一个</strong>,否则会报错。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseIOServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span></span><br><span class="line"><span class="function">IOException </span>&#123;</span><br><span class="line"><span class="comment">// 要求 ： 往客户端回传 字符串 数据。</span></span><br><span class="line">PrintWriter writer = resp.getWriter();</span><br><span class="line">writer.write(<span class="string">"response's content!!!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-其他方法"><a href="#7-2-其他方法" class="headerlink" title="7.2. 其他方法"></a>7.2. 其他方法</h3><ul>
<li><strong>void setIntHeader(“refresh”,n)</strong>:n秒后刷新页面</li>
<li><strong>void setHeader(“refresh”,“n;url=路径”)</strong>:n秒后跳转页面,可访问外网</li>
<li><strong>void addCookie(Cookie cookie)</strong>:添加Cookie</li>
</ul>
<h2 id="8-乱码问题"><a href="#8-乱码问题" class="headerlink" title="8. 乱码问题"></a>8. 乱码问题</h2><h3 id="8-0-数据保存过程中的乱码"><a href="#8-0-数据保存过程中的乱码" class="headerlink" title="8.0. 数据保存过程中的乱码"></a>8.0. 数据保存过程中的乱码</h3><p>最终保存在数据库的表中的时候出现了乱码。导致乱码的原因有以下两种:</p>
<ul>
<li>数据保存之前，就已经是乱码了，这样保存到数据库中时必然就是乱码了。</li>
<li>保存之前数据不是乱码，但由于数据库不支持中文，所以数据保存之后就变成了乱码。</li>
</ul>
<h3 id="8-1-响应乱码"><a href="#8-1-响应乱码" class="headerlink" title="8.1.响应乱码"></a>8.1.响应乱码</h3><p>服务器响应浏览器请求，最终显示到网页上的内容出现乱码。<br>经过了Java程序响应浏览器请求时出现乱码，可以用以下方式解决</p>
<h4 id="8-1-0-响应乱码解决方式一"><a href="#8-1-0-响应乱码解决方式一" class="headerlink" title="8.1.0. 响应乱码解决方式一"></a>8.1.0. 响应乱码解决方式一</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);规定服务器的编码格式</span><br><span class="line">resp.setHeader(<span class="string">"Content-type"</span>,<span class="string">"text/html;charset=utf-8"</span>);规定浏览器使用的字符编码</span><br></pre></td></tr></table></figure>

<h4 id="8-1-1-响应乱码解决方式二"><a href="#8-1-1-响应乱码解决方式二" class="headerlink" title="8.1.1. 响应乱码解决方式二"></a>8.1.1. 响应乱码解决方式二</h4><p>设置响应的内容类型以及字符的编码方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br></pre></td></tr></table></figure>

<p>如果没有经过Java程序，直接访问html页面，可通过在html页面配置相应标签解决</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-2-请求乱码"><a href="#8-2-请求乱码" class="headerlink" title="8.2. 请求乱码"></a>8.2. 请求乱码</h3><p>数据从浏览器发送到服务器，在服务器上显示的是乱码</p>
<h4 id="8-2-0-请求乱码解决方式一"><a href="#8-2-0-请求乱码解决方式一" class="headerlink" title="8.2.0. 请求乱码解决方式一"></a>8.2.0. 请求乱码解决方式一</h4><p>先将浏览器发送过来的数据用ISO-8859-1的方式解码，再给定一种支持简体中文的编码方式重新编码组装。这样既能解决GET请求乱码，又能解决POST请求乱码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> String(xxx.getBytes(<span class="string">"ISO-8859-1"</span>,<span class="string">"UTF-8"</span>))</span><br></pre></td></tr></table></figure>

<h4 id="8-2-1-请求乱码解决方式二"><a href="#8-2-1-请求乱码解决方式二" class="headerlink" title="8.2.1. 请求乱码解决方式二"></a>8.2.1. 请求乱码解决方式二</h4><p>该方法只准针对POST请求有效，因为它只对请求体进行编码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"字符编码集);</span></span><br></pre></td></tr></table></figure>

<h4 id="8-2-2-请求乱码解决方式三"><a href="#8-2-2-请求乱码解决方式三" class="headerlink" title="8.2.2. 请求乱码解决方式三"></a>8.2.2. 请求乱码解决方式三</h4><p>专门解决GET请求乱码，因为它只针对请求行编码。<br>解决方式:修改Tomcat的server.xml文件，(在Contector标签里添加URIEncoding=”UTF-8”)</p>
<h2 id="9-域对象"><a href="#9-域对象" class="headerlink" title="9. 域对象"></a>9. 域对象</h2><ul>
<li>ServletContext,代表<strong>应用域</strong>即application</li>
<li>HttpSession,代表<strong>session域</strong></li>
<li>HttpServletRequest,代表请求域即<strong>request</strong>;</li>
<li>pageContext(本页面范围,JSP页面独有)</li>
</ul>
<h3 id="9-0-域对象的范围排序"><a href="#9-0-域对象的范围排序" class="headerlink" title="9.0. 域对象的范围排序"></a>9.0. 域对象的范围排序</h3><p>application &gt; session &gt; request&gt;pageContext</p>
<h3 id="9-1-域对象的数据共享范围"><a href="#9-1-域对象的数据共享范围" class="headerlink" title="9.1. 域对象的数据共享范围"></a>9.1. 域对象的数据共享范围</h3><ul>
<li>application跨会话共享数据</li>
<li>session跨请求共享数据，请求需在同一会话中</li>
<li>request跨Servlet共享数据，Servlet需在同一请求中</li>
<li>pageContext,数据在当前页面有效</li>
</ul>
<h2 id="10-转发和重定向"><a href="#10-转发和重定向" class="headerlink" title="10. 转发和重定向"></a>10. 转发和重定向</h2><h3 id="10-0-转发"><a href="#10-0-转发" class="headerlink" title="10.0. 转发"></a>10.0. 转发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getRequestDispatcher(<span class="string">"/b"</span>).forward(request,response);</span><br></pre></td></tr></table></figure>

<h3 id="10-1-重定向"><a href="#10-1-重定向" class="headerlink" title="10.1. 重定向"></a>10.1. 重定向</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.sendRedireact(request.getContextPath() + <span class="string">"/b"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="10-2-二者的异同点"><a href="#10-2-二者的异同点" class="headerlink" title="10.2. 二者的异同点"></a>10.2. 二者的异同点</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><p>都能进行资源的跳转</p>
<h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ul>
<li>转发是request对象触发的;重定向是response对象触发的。</li>
<li>转发是服务器的行为;重定向是浏览器的行为。</li>
<li>转发是<strong>一次请求</strong>，浏览器上地址栏<strong>不会发生变化</strong>;重定向是<strong>二次请求</strong>，浏览器上地址栏会<strong>发生变化</strong>。</li>
<li>转发会<strong>保留</strong>请求域中的数据;重定向后，请求域的内容会<strong>改变</strong>。</li>
<li>转发是在<strong>项目内部</strong>进行资源的跳转;重定向的路径需要<strong>加上项目的根路径</strong>。</li>
<li>转发<strong>不能转到其他应用</strong>，只能在本应用中转发;重定向可以<strong>重定向到项目之外</strong>的应用(外网)。</li>
<li>在ServletA中<strong>转发ServletB</strong>执行顺序为:ServletA转发代前的代码-&gt;ServletB的代码-&gt;ServletA剩余的代码;ServletA中<strong>重定向ServletB</strong>,ServletA中的全部代码会首先执行。</li>
</ul>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>Java笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-XML</title>
    <url>/2020/05/15/%E7%AC%94%E8%AE%B0-XML/</url>
    <content><![CDATA[<p>XML的简单了解</p>
<a id="more"></a>

<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Extensible Markup Language，<strong>可扩展</strong>标记语言。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>存储数据</p>
<h2 id="语法特点"><a href="#语法特点" class="headerlink" title="语法特点"></a>语法特点</h2><ul>
<li>xml文档的后缀名为   .xml</li>
<li>xml<strong>第一行</strong>必须定义为文档声明</li>
<li>xml文档中<strong>有且仅有一个根标签</strong></li>
<li>标签的属性值必须使用引号(单双都行)引起来</li>
<li>标签必须正确关闭</li>
<li><strong>xml标签名称区分大小写</strong></li>
</ul>
<h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><h3 id="1-文档声明"><a href="#1-文档声明" class="headerlink" title="1. 文档声明"></a>1. 文档声明</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml 属性列表 ?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>version</strong>: 版本号，必须的属性</li>
<li><strong>encoding</strong>：编码方式。告知解析引擎当前文档使用的编码集，默认值：ISO-8859-1</li>
<li><strong>standalone</strong>：是否独立，取值为’yes’，表示不依赖其他文件，取值为’no’，表示依赖其他文件。不常用 </li>
</ul>
<h3 id="2、指令"><a href="#2、指令" class="headerlink" title="2、指令"></a>2、指令</h3><p>仅做了解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/css" href=" xxx.css"?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、标签"><a href="#3、标签" class="headerlink" title="3、标签"></a>3、标签</h3><p>标签名称自定义</p>
<h5 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h5><ul>
<li>名称可包含字母数字及其他字符</li>
<li>名称<strong>不能以数字或标点符号开头</strong></li>
<li>名称<strong>不能以字母xml开头</strong></li>
<li>名称<strong>不能包含空格</strong></li>
</ul>
<h3 id="4、属性"><a href="#4、属性" class="headerlink" title="4、属性"></a>4、属性</h3><p>id属性值唯一</p>
<h3 id="5、文本"><a href="#5、文本" class="headerlink" title="5、文本"></a>5、文本</h3><p>CDATA区</p>
<p>区中文本会被原样展示<br>&lt;![ CDATA [ 数据 ] ]&gt;</p>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>约束，规定了xml文档的书写规则。</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h5><p>简单的约束技术。</p>
<h6 id="内部DTD"><a href="#内部DTD" class="headerlink" title="内部DTD"></a>内部DTD</h6><p>内部DTD将约束规则定义在xml文档中。</p>
<p>书写格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根标签名 [</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">students</span> (<span class="meta-keyword">student</span>+)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">student</span> (<span class="meta-keyword">name</span>,<span class="meta-keyword">age</span>,<span class="meta-keyword">sex</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">age</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">sex</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ATTLIST <span class="meta-keyword">student</span> <span class="meta-keyword">number</span> <span class="meta-keyword">ID</span> <span class="meta-keyword">#REQUIRED</span>&gt;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>加号表示出现1次或多次</li>
<li>星号表示出现0次或多次</li>
<li>#PCDATA表示字符串</li>
<li>number属性为ID属性，唯一</li>
<li>#REQUIRED表示必须出现</li>
<li>ELEMENT定义标签</li>
<li>ATTLIST定义属性</li>
</ul>
<h6 id="外部DTD"><a href="#外部DTD" class="headerlink" title="外部DTD"></a>外部DTD</h6><p>外部DTD将约束规则定义在外部DTD文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入本地本地的DTD约束文件 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE 根标签名 <span class="meta-keyword">SYSTEM</span> “xxx.dtd”&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入本地网络上的DTD约束文件 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE 根标签名 <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"xxx.dtd"</span> <span class="meta-string">"dtd文件位置的URL"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h5><p>复杂的约束技术</p>
<h6 id="引入顺序"><a href="#引入顺序" class="headerlink" title="引入顺序"></a>引入顺序</h6><ol>
<li>填写xml文档的根元素</li>
<li>引入xsi前缀，xmlns:xsi=”xxxxx”</li>
<li>引入xsd文件命名空间，xsi:schemaLocation=”xxxxx”</li>
<li>为每一个xsd约束声明一个前缀，作为标识 xmlns:a=”xxxxxx”(a为前缀)</li>
</ol>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="解析方式"><a href="#解析方式" class="headerlink" title="解析方式"></a>解析方式</h3><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ul>
<li>将标记语言文档一次性加载进内存中，在内存中形成一颗DOM树</li>
<li>优点：操作方便，可以对文档进行CRUD的所有操作</li>
<li>缺点：很占内存</li>
</ul>
<h4 id="SAX"><a href="#SAX" class="headerlink" title="SAX"></a>SAX</h4><ul>
<li>逐行读取，基于事件驱动的</li>
<li>优点：基本不占内存</li>
<li>缺点：只能读取，不能增删改</li>
</ul>
<h3 id="常见解析器"><a href="#常见解析器" class="headerlink" title="常见解析器"></a>常见解析器</h3><ul>
<li><strong>JAXP</strong>：sun公司提供的解析器，支持DOM和SAX解析</li>
<li><strong>DOM4J</strong>：常用在服务器端</li>
<li><strong>PULL</strong>：Android操作系统内置解析器，支持SAX解析</li>
<li><strong>Jsoup</strong>：一款Java的Html解析器，可直接解析某个URL地址、HTML文本内容。可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li>
</ul>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Spring</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-Spring/</url>
    <content><![CDATA[<p>施工中，该篇笔记绝大多数拷贝自尚硅谷雷丰阳课件。</p>
<a id="more"></a>

<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spring是一个开源框架。简化了企业级开发。Spring是一个<strong>IOC</strong>(<strong>DI</strong>)和<strong>AOP</strong>容器框架。</p>
<h2 id="Spring特点"><a href="#Spring特点" class="headerlink" title="Spring特点"></a>Spring特点</h2><ul>
<li><strong>非侵入式</strong>：基于Spring开发的应用中的对象可以不依赖于Spring的API</li>
<li><strong>依赖注入</strong>：DI——<strong>Dependency Injection</strong>，反转控制(IOC)最经典的实现。</li>
<li><strong>面向切面编程</strong>：AspectOriented Programming——AOP</li>
<li><strong>容器</strong>：<strong>Spring是一个容器</strong>，因为它包含并且管理应用对象的生命周期</li>
<li><strong>组件化</strong>：Spring实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</li>
<li><strong>一站式</strong>：在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上Spring自身也提供了表述层的SpringMVC和持久层的SpringJDBC）</li>
</ul>
<h2 id="HelloWorld示例"><a href="#HelloWorld示例" class="headerlink" title="HelloWorld示例"></a>HelloWorld示例</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><ul>
<li><strong>spring-beans.jar</strong>：处理Bean的jar &lt;Bean&gt;</li>
<li><strong>spring-context.jar</strong>：处理spring上下文的jar  &lt;context&gt;</li>
<li><strong>spring-core.jar</strong>：spring核心jar（必需）</li>
<li><strong>spring-expression.jar</strong>：spring表达式 </li>
<li><strong>spring-aop.jar</strong>：开发AOP特性时需要的JAR</li>
<li><strong>commons-logging.jar</strong>：第三方提供的日志jar包</li>
</ul>
<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uId;</span><br><span class="line">    <span class="keyword">private</span> String uName;</span><br><span class="line">    <span class="keyword">private</span> Integer uAge;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">	<span class="comment">// getter、setter和toString方法略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写Spring配置文件"><a href="#编写Spring配置文件" class="headerlink" title="编写Spring配置文件"></a>编写Spring配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-autowire</span>=<span class="string">"byName"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用bean元素定义一个由IOC容器创建的对象 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- class属性指定用于创建bean的全类名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id属性指定用于引用bean实例的标识 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.xxx.cn.entity.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用property子元素为bean的属性赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uId"</span> <span class="attr">value</span>=<span class="string">"002"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uName"</span> <span class="attr">value</span>=<span class="string">"王二"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uAge"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"desc"</span> <span class="attr">value</span>=<span class="string">"是个傻子"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后要在IDEA的<strong>Project Structure</strong>的<strong>Modules</strong>里配置一下Spring应用上下文，如下图</p>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Spring/IDEA%E4%B8%AD%E6%B7%BB%E5%8A%A0Spring%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87.png" alt="IDEA中添加Spring应用上下文"></p>
<h3 id="编写测试类测试"><a href="#编写测试类测试" class="headerlink" title="编写测试类测试"></a>编写测试类测试</h3><p>注：<strong>Spring在创建IOC容器对象时，就已经完成了bean的创建和属性的赋值</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建IOC容器对象</span></span><br><span class="line">        ApplicationContext iocContainer =</span><br><span class="line">                <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationcontext.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据ID值获取bean实例对象</span></span><br><span class="line">        User user = (User) iocContainer.getBean(<span class="string">"user"</span>);</span><br><span class="line">        <span class="comment">//3.打印bean</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IOC和DI"><a href="#IOC和DI" class="headerlink" title="IOC和DI"></a>IOC和DI</h2><h3 id="IOC-Inversion-of-Control"><a href="#IOC-Inversion-of-Control" class="headerlink" title="IOC(Inversion of Control)"></a>IOC(Inversion of Control)</h3><p>反转控制。Spring反转了资源的获取方向，改<strong>由容器主动的将资源推送给需要的组件</strong>，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可。</p>
<h3 id="DI-Dependency-Injection"><a href="#DI-Dependency-Injection" class="headerlink" title="DI(Dependency Injection)"></a>DI(Dependency Injection)</h3><p>依赖注入。IOC的另一种表述方式：即组件以一些预先定义好的方式(例如：setter 方法)接受来自于容器的资源注入。将属性值注入给了属性，将属性注入给了bean，将bean注入给了ioc容器。</p>
<h3 id="IOC容器在Spring中的实现"><a href="#IOC容器在Spring中的实现" class="headerlink" title="IOC容器在Spring中的实现"></a>IOC容器在Spring中的实现</h3><p>在通过IOC容器读取Bean的实例之前，需要先将IOC容器本身实例化。<strong>Spring提供了IOC容器的两种实现方式</strong></p>
<ul>
<li><strong>BeanFactory</strong>：IOC容器的基本实现，是Spring内部的基础设施，是<strong>面向Spring本身</strong>的，不是提供给开发人员使用的</li>
<li><strong>ApplicationContext</strong>：BeanFactory的子接口，提供了更多高级特性。面向Spring的使用者，几乎所有场合都使用ApplicationContext，而不是底层的BeanFactory<ul>
<li>在<strong>初始化时就创建单例的bean</strong>，也可以通过配置的方式指定创建的Bean是多实例的</li>
<li><strong>ClassPathXmlApplicationContext</strong>，对应<strong>类路径下</strong>的XML格式的配置文件</li>
<li><strong>FileSystemXmlApplicationContext</strong>，对应<strong>文件系统中</strong>的XML格式的配置文件</li>
</ul>
</li>
<li><strong>ConfigurableApplicationContext</strong>，是ApplicationContext的子接口，包含一些扩展方法。<strong>refresh()</strong>和<strong>close()</strong>让ApplicationContext具有启动、关闭和刷新上下文的能力。</li>
<li><strong>WebApplicationContext</strong>，专门为WEB应用而准备的，它允许从相对于WEB根目录的路径中完成初始化工作</li>
</ul>
<h2 id="获取Bean的两种方式"><a href="#获取Bean的两种方式" class="headerlink" title="获取Bean的两种方式"></a>获取Bean的两种方式</h2><ul>
<li>通过Bean的<strong>ID值</strong>从IOC容器中获取</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = (User) iocContainer.getBean(<span class="string">"user"</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过Bean的类型从IOC容器中获取，但如果同一个类型的bean在XML文件中配置了多个，则获取时会抛出异常，所以同一个类型的bean在容器中必须是唯一的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = (User) iocContainer.getBean(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Bean的赋值方式"><a href="#Bean的赋值方式" class="headerlink" title="Bean的赋值方式"></a>Bean的赋值方式</h2><h3 id="通过Bean的setXxx-方法赋值"><a href="#通过Bean的setXxx-方法赋值" class="headerlink" title="通过Bean的setXxx()方法赋值"></a>通过Bean的<strong>setXxx()</strong>方法赋值</h3><p>下面的property标签除了name、value属性外，还可以用ref属性引用外部的Bean。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.xxx.cn.entity.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用property子元素为bean的属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uId"</span> <span class="attr">value</span>=<span class="string">"002"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uName"</span> <span class="attr">value</span>=<span class="string">"王二"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uAge"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"desc"</span> <span class="attr">value</span>=<span class="string">"是个傻子"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：<strong>property标签里的name属性的值，必须要和对应的实体类的setXxx方法的Xxx一致</strong>。</p>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Spring/%E9%80%9A%E8%BF%87setXxx()%E6%96%B9%E5%BC%8F%E8%B5%8B%E5%80%BC.png" alt="setXxx()赋值的方式"></p>
<h3 id="通过Bean的构造器赋值"><a href="#通过Bean的构造器赋值" class="headerlink" title="通过Bean的构造器赋值"></a>通过Bean的构造器赋值</h3><h4 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h4><p>这种基本的写法，在bean标签里使用了<strong>constructor-arg</strong>标签，其属性有name，有value</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>= <span class="string">"10010"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"bookName"</span> <span class="attr">value</span>= <span class="string">"Book01"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"authorName"</span> <span class="attr">value</span>= <span class="string">"Author01"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"number"</span> <span class="attr">value</span>= <span class="string">"20.2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="省略name属性的写法"><a href="#省略name属性的写法" class="headerlink" title="省略name属性的写法"></a>省略name属性的写法</h4><p><strong>这种写法需严格按照参数顺序</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"10010"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"Book01"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"Author01"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"20.2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过索引值指定参数位置"><a href="#通过索引值指定参数位置" class="headerlink" title="通过索引值指定参数位置"></a>通过索引值指定参数位置</h4><p>只要index属性对的上了，便可以省略name属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"10010"</span> <span class="attr">index</span> =<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"Book01"</span> <span class="attr">index</span> =<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"20.2"</span> <span class="attr">index</span> =<span class="string">"3"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"Author01"</span> <span class="attr">index</span> =<span class="string">"2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过类型不同区分重载的构造器"><a href="#通过类型不同区分重载的构造器" class="headerlink" title="通过类型不同区分重载的构造器"></a>通过类型不同区分重载的构造器</h4><p>只要index属性对的上了，便可以省略name属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"10010"</span> <span class="attr">index</span> =<span class="string">"0"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"Book01"</span> <span class="attr">index</span> =<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"Author01"</span> <span class="attr">index</span> =<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>= <span class="string">"20.2"</span> <span class="attr">index</span> =<span class="string">"3"</span> <span class="attr">type</span>=<span class="string">"java.lang.Double"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Bean的级联属性赋值"><a href="#Bean的级联属性赋值" class="headerlink" title="Bean的级联属性赋值"></a>Bean的级联属性赋值</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"action"</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.ref.Action"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"service"</span> <span class="attr">ref</span>=<span class="string">"service"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置级联属性(了解) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"service.dao.dataSource"</span> <span class="attr">value</span>=<span class="string">"DBCP"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="p名称空间赋值"><a href="#p名称空间赋值" class="headerlink" title="p名称空间赋值"></a>p名称空间赋值</h3><p>为了简化XML文件的配置，越来越多的XML文件采用属性而非子元素配置信息。Spring从2.5版本开始引入了一个新的<strong>p命名空间</strong>，可以通过&lt;bean&gt;元素属性的方式配置Bean的属性。使用p命名空间后，基于XML的配置方式将进一步简化。<br><strong>p名称空间赋值的方式也依赖于实体类里的setter方法</strong>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">id</span>=<span class="string">"studentSuper"</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"com.xxx.helloworld.bean.Student"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">p:studentId</span>=<span class="string">"2002"</span> <span class="attr">p:stuName</span>=<span class="string">"Jerry2016"</span> <span class="attr">p:age</span>=<span class="string">"18"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="bean标签内可以用的值"><a href="#bean标签内可以用的值" class="headerlink" title="bean标签内可以用的值"></a>bean标签内可以用的值</h2><h3 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h3><ul>
<li>可以使用字符串表示的值，可以通过value属性或value子节点的方式指定</li>
<li>基本数据类型及其封装类、String等类型都可以采取字面值注入的方式</li>
<li>若字面值中包含特殊字符，可以使用<!--[CDATA[]]-->把字面值包裹起来</li>
</ul>
<h3 id="赋Null值"><a href="#赋Null值" class="headerlink" title="赋Null值"></a>赋Null值</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.Book"</span> <span class="attr">id</span>=<span class="string">"bookNull"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"bookId"</span> <span class="attr">value</span> =<span class="string">"2000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"bookName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"author"</span> <span class="attr">value</span> =<span class="string">"nullAuthor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"price"</span> <span class="attr">value</span> =<span class="string">"50"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引用外部声明的bean"><a href="#引用外部声明的bean" class="headerlink" title="引用外部声明的bean"></a>引用外部声明的bean</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shop"</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.Shop"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"book"</span> <span class="attr">ref</span> =<span class="string">"book"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用内部bean"><a href="#使用内部bean" class="headerlink" title="使用内部bean"></a>使用内部bean</h3><p>当bean实例<strong>仅仅给一个特定的属性使用</strong>时，可以将其声明为内部bean。<br>内部bean声明直接包含在&lt;property&gt;或&lt;constructor-arg&gt;元素里，不需要设置任何id或name属性。<br><strong>内部bean不能使用在任何其他地方</strong>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shop"</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.Shop"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"book"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>= <span class="string">"com.xxx.spring.bean.Book"</span> &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"bookId"</span> <span class="attr">value</span> =<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"bookName"</span> <span class="attr">value</span>=<span class="string">"innerBook"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"innerAuthor"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"price"</span> <span class="attr">value</span> =<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="集合的赋值"><a href="#集合的赋值" class="headerlink" title="集合的赋值"></a>集合的赋值</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>Set的赋值方式跟Llist差不多。</p>
<h4 id="通过-lt-value-gt-指定简单的常量值"><a href="#通过-lt-value-gt-指定简单的常量值" class="headerlink" title="通过&lt;value&gt;指定简单的常量值"></a>通过&lt;value&gt;指定简单的常量值</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shop"</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.Shop"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"categoryList"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 以字面量为值的List集合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>历史<span class="tag">&lt;/<span class="name">value</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>军事<span class="tag">&lt;/<span class="name">value</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过-lt-ref-gt-指定对其他Bean的引用"><a href="#通过-lt-ref-gt-指定对其他Bean的引用" class="headerlink" title="通过&lt;ref&gt;指定对其他Bean的引用"></a>通过&lt;ref&gt;指定对其他Bean的引用</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shop"</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.Shop"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"bookList"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 以bean的引用为值的List集合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>= <span class="string">"book01"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>= <span class="string">"book02"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过-lt-bean-gt-指定内置bean定义"><a href="#通过-lt-bean-gt-指定内置bean定义" class="headerlink" title="通过&lt;bean&gt;指定内置bean定义"></a>通过&lt;bean&gt;指定内置bean定义</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shop"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.bean.Shop"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"bookList"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内置bean的List集合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.bean.Book"</span> <span class="attr">p:bookName</span>=<span class="string">"西游记"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过-lt-null-gt-指定空元素。甚至可以内嵌其他集合"><a href="#通过-lt-null-gt-指定空元素。甚至可以内嵌其他集合" class="headerlink" title="通过&lt;null/&gt;指定空元素。甚至可以内嵌其他集合"></a>通过&lt;null/&gt;指定空元素。甚至可以内嵌其他集合</h4><p>这个就不举例了，自己想象吧</p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>&lt;map&gt;标签里可以使用多个&lt;entry&gt;作为子标签。一个&lt;entry&gt;标签代表一个键值对 。</p>
<h4 id="套娃写法一"><a href="#套娃写法一" class="headerlink" title="套娃写法一"></a>套娃写法一</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cup"</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.Cup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maps"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"17"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key03"</span> <span class="attr">value-ref</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key04"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xxx.bean.Car"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"carName"</span> <span class="attr">value</span>=<span class="string">"xxx"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="套娃写法二"><a href="#套娃写法二" class="headerlink" title="套娃写法二"></a>套娃写法二</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cup"</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.Cup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>bookKey01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"book01"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>bookKey02<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"book02"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>使用&lt;props&gt;定义java.util.Properties，该标签使用多个&lt;prop&gt;作为子标签。每个&lt;prop&gt;标签必须定义key属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xxx.spring.bean.DataSource"</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"userName"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>jdbc:mysql:///test<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="集合属性的Bean"><a href="#集合属性的Bean" class="headerlink" title="集合属性的Bean"></a>集合属性的Bean</h3><p>如果集合对象配置在某个bean内部，则这个集合的配置将不能重用。要想重用需要将集合bean的配置拿到外面，供其他bean引用。<strong>配置集合类型的bean需要引入util名称空间</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"bookList"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"book01"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"book02"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"book03"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"book04"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"book05"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"categoryList"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>编程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>极客<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>相声<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>评书<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="工厂创建Bean"><a href="#工厂创建Bean" class="headerlink" title="工厂创建Bean"></a>工厂创建Bean</h2><h3 id="静态工厂创建Bean"><a href="#静态工厂创建Bean" class="headerlink" title="静态工厂创建Bean"></a>静态工厂创建Bean</h3><p>静态工厂本身并不需要创建对象，通过静态方法来调用获取Bean。<code>对象 = 工厂类.工厂方法名();</code></p>
<h4 id="编写静态工厂类"><a href="#编写静态工厂类" class="headerlink" title="编写静态工厂类"></a>编写静态工厂类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title">getUserService</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Spring配置文件中配置静态工厂"><a href="#Spring配置文件中配置静态工厂" class="headerlink" title="Spring配置文件中配置静态工厂"></a>Spring配置文件中配置静态工厂</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.xxx.cn.factory.StaticFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"getUserService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实例工厂创建Bean"><a href="#实例工厂创建Bean" class="headerlink" title="实例工厂创建Bean"></a>实例工厂创建Bean</h3><p><strong>必须先有工厂实例对象，通过实例对象创建对象</strong>。提供所有的方法都是“非静态”的。</p>
<h4 id="编写实例工厂"><a href="#编写实例工厂" class="headerlink" title="编写实例工厂"></a>编写实例工厂</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstatnceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">getUserService</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Spring配置文件中配置实例工厂"><a href="#Spring配置文件中配置实例工厂" class="headerlink" title="Spring配置文件中配置实例工厂"></a>Spring配置文件中配置实例工厂</h4><p><strong>需要在要获取的Bean的标签里配置相应的factory-bean和factory-method属性</strong>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置实例工厂的bean标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instatnceFactory"</span> <span class="attr">class</span>=<span class="string">"com.xxx.cn.factory.InstatnceFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.xxx.cn.service.UserServiceImpl"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">"instatnceFactory"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"getUserService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现FactoryBean的方式创建Bean"><a href="#实现FactoryBean的方式创建Bean" class="headerlink" title="实现FactoryBean的方式创建Bean"></a>实现FactoryBean的方式创建Bean</h3><p>除去配置静态工厂和实例工厂的方式创建Bean外，我们还可以区实现FactoryBean接口，用这种方式去创建Bean。实现了FactoryBean接口的类是Spring认识的工厂类，Spring会自动调用工厂方法创建实例。</p>
<h4 id="实现FactoryBean"><a href="#实现FactoryBean" class="headerlink" title="实现FactoryBean"></a>实现FactoryBean</h4><p>实现了FactoryBean的类，不管返回的是单例还是多实例，<strong>都是在获取Bean的时候创建对象</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工厂方法，返回创建的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setuName(<span class="string">"王四"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回创建对象的类型，Spring会自动调用这个方法来确认创建的对象是什么类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回false是单例，返回true表示不是单例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置工厂Bean"><a href="#配置工厂Bean" class="headerlink" title="配置工厂Bean"></a>配置工厂Bean</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myFactory"</span> <span class="attr">class</span>=<span class="string">"com.xxx.cn.factory.MyFactory"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Bean的高级配置"><a href="#Bean的高级配置" class="headerlink" title="Bean的高级配置"></a>Bean的高级配置</h2><h3 id="配置信息的继承"><a href="#配置信息的继承" class="headerlink" title="配置信息的继承"></a>配置信息的继承</h3><p>Spring允许继承bean的配置，被继承的bean称为父bean，继承这个父bean的bean称为子bean。<br>子bean从父bean中继承配置，包括bean的属性配置。子bean也可以覆盖从父bean继承过来的配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept"</span> <span class="attr">class</span>=<span class="string">"com.xxx.parent.bean.Department"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deptId"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deptName"</span> <span class="attr">value</span>=<span class="string">"IT"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp01"</span> <span class="attr">class</span>=<span class="string">"com.xxx.parent.bean.Employee"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empId"</span> <span class="attr">value</span>=<span class="string">"1001"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empName"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 会被继承的属性值 --&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"detp"</span> <span class="attr">ref</span>=<span class="string">"dept"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以emp01作为父bean，继承后可以省略公共属性值的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp02"</span> <span class="attr">parent</span>=<span class="string">"emp01"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empId"</span> <span class="attr">value</span>=<span class="string">"1002"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empName"</span> <span class="attr">value</span>=<span class="string">"Jerry"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h4><ul>
<li>父bean可以作为配置模板，也可以作为bean实例。若只想把父bean作为模板，可以设置&lt;bean&gt;<strong>abstract</strong>属性为true，这样Spring将不会实例化这个bean。</li>
<li>如果一个bean的<strong>class属性没有指定，则必须是抽象bean</strong></li>
<li>并不是&lt;bean&gt;元素里的所有属性都会被继承。比如：autowire，abstract等。</li>
<li>也可以忽略父bean的class属性，让子bean指定自己的类，而共享相同的属性配置。但此时abstract必须设为true。</li>
</ul>
<h3 id="bean之间的依赖"><a href="#bean之间的依赖" class="headerlink" title="bean之间的依赖"></a>bean之间的依赖</h3><p><strong>有的时候创建一个bean的时候需要保证另外一个bean也被创建</strong>，这时我们称前面的bean对后面的bean有依赖。例如：要求创建Employee对象的时候必须创建Department。这里需要注意的是<strong>依赖关系不等于引用关系</strong>，Employee即使依赖Department也可以不引用它。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp03"</span> <span class="attr">class</span>=<span class="string">"com.xxx.parent.bean.Employee"</span> <span class="attr">depends-on</span>=<span class="string">"dept"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empId"</span> <span class="attr">value</span>=<span class="string">"1003"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empName"</span> <span class="attr">value</span>=<span class="string">"Kate"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><p>Spring中，可以在&lt;bean&gt;元素的<strong>scope属性里设置bean的作用域</strong>，以决定这个bean是单实例的还是多实例的。</p>
<p>默认情况下，Spring只为每个在IOC容器里声明的bean创建唯一一个实例，整个IOC容器范围内都能共享该实例。所有后续的getBean()调用和bean引用都将返回这个唯一的bean实例。该作用域被称为<strong>singleton</strong>，它是所有bean的默认作用域。</p>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Spring/Bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F.png" alt="Bean的作用域"></p>
<h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><p><strong>Spring IOC容器可以管理bean的生命周期</strong>，Spring允许在bean生命周期内特定的时间点执行指定的任务。</p>
<h4 id="单实例Bean的生命周期"><a href="#单实例Bean的生命周期" class="headerlink" title="单实例Bean的生命周期"></a>单实例Bean的生命周期</h4><ul>
<li>通过构造器或工厂方法创建bean实例</li>
<li>为bean的属性设置值和对其他bean的引用</li>
<li>调用bean的<strong>初始化方法</strong></li>
<li>bean可以使用了</li>
<li>当容器关闭时，调用<strong>bean的销毁方法</strong></li>
</ul>
<p>(容器启动)<strong>构造器</strong>—-&gt;<strong>初始化方法</strong>—-&gt;(容器关闭)<strong>销毁方法</strong></p>
<h4 id="多实例Bean的生命周期"><a href="#多实例Bean的生命周期" class="headerlink" title="多实例Bean的生命周期"></a>多实例Bean的生命周期</h4><p><strong>获取Bean(构造器—-&gt;初始化方法) —-&gt; 初始化方法 —-&gt; 容器关闭不会调用Bean的销毁方法</strong></p>
<h4 id="配置后置处理器后Bean的生命周期"><a href="#配置后置处理器后Bean的生命周期" class="headerlink" title="配置后置处理器后Bean的生命周期"></a>配置后置处理器后Bean的生命周期</h4><p>Spring有个接口BeanPostProcessor，该接口可以在Bean的初始化前后调用方法</p>
<h5 id="自定义后置处理器"><a href="#自定义后置处理器" class="headerlink" title="自定义后置处理器"></a>自定义后置处理器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化之前调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(beanName + <span class="string">"将要调用初始化方法了。该Bean为---&gt;"</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化之后调用，该方法返回null的时候，经测试，仍会将传入的bean方法到IOC容器中，</span></span><br><span class="line"><span class="comment">     * 假如不返回null，返回别的对象，就会将该对象作为替换，放到IOC容器中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(beanName + <span class="string">"的初始化方法调用完了。该Bean为---&gt;"</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="将后置处理器注册在Spring配置文件中"><a href="#将后置处理器注册在Spring配置文件中" class="headerlink" title="将后置处理器注册在Spring配置文件中"></a>将后置处理器注册在Spring配置文件中</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"com.xxx.cn.bean.MyBeanPostProcessor"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>（容器启动）构造器–&gt;后置处理器的before方法…–&gt;初始化方法–&gt;后置处理器的after方法</strong>，如果相关Bean没有配置初始化方法，自定义的后置处理器仍会工作。</p>
<ul>
<li>通过构造器或工厂方法<strong>创建bean实例</strong></li>
<li>为bean的<strong>属性设置值</strong>和对其他bean的引用</li>
<li>将bean实例传递给bean后置处理器的<strong>postProcessBeforeInitialization()</strong>方法</li>
<li>调用bean的<strong>初始化</strong>方法</li>
<li>将bean实例传递给bean后置处理器的<strong>postProcessAfterInitialization()</strong>方法</li>
<li>bean可以使用了</li>
<li>当容器关闭时调用bean的<strong>销毁方法</strong></li>
</ul>
<h4 id="Bean的后置处理器"><a href="#Bean的后置处理器" class="headerlink" title="Bean的后置处理器"></a>Bean的后置处理器</h4><p><strong>此处待回忆</strong></p>
<ul>
<li>bean后置处理器允许在调用<strong>初始化方法前后</strong>对bean进行额外的处理</li>
<li><strong>bean后置处理器对IOC容器里的所有bean实例逐一处理，而非单一实例</strong>。其典型应用是：检查bean属性的正确性或根据特定的标准更改bean的属性。</li>
<li>bean后置处理器时<strong>需要实现接口</strong>：org.springframework.beans.factory.config.BeanPostProcessor。在初始化方法被调用前后，Spring将把每个bean实例分别传递给上述接口的以下两个方法<ul>
<li>postProcessBeforeInitialization(Object,String)</li>
<li>postProcessAfterInitialization(Object,String)</li>
</ul>
</li>
</ul>
<h3 id="引用外部属性配置文件"><a href="#引用外部属性配置文件" class="headerlink" title="引用外部属性配置文件"></a>引用外部属性配置文件</h3><p>当bean的配置信息逐渐增多时，查找和修改一些bean的配置信息就变得愈加困难。这时可以将一部分信息提取到bean配置文件的外部，以properties格式的属性文件保存起来，同时在bean的配置文件中引用properties属性文件中的内容，从而实现一部分属性值在发生变化时仅修改properties属性文件即可。这种技术多用于连接数据库的基本信息的配置。</p>
<h4 id="方式一-使用-lt-context-property-placeholder-gt-标签引入"><a href="#方式一-使用-lt-context-property-placeholder-gt-标签引入" class="headerlink" title="方式一 使用&lt;context:property-placeholder&gt;标签引入"></a>方式一 使用&lt;context:property-placeholder&gt;标签引入</h4><h5 id="1、创建properties属性文件"><a href="#1、创建properties属性文件" class="headerlink" title="1、创建properties属性文件"></a>1、创建properties属性文件</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">prop.userName</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">prop.password</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">prop.url</span>=<span class="string">jdbc:mysql:///test</span></span><br><span class="line"><span class="meta">prop.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<h5 id="2、引入context名称空间"><a href="#2、引入context名称空间" class="headerlink" title="2、引入context名称空间"></a>2、引入context名称空间</h5><p>步骤略</p>
<h5 id="3、在Spring配置文件中指定properties属性文件的位置"><a href="#3、在Spring配置文件中指定properties属性文件的位置" class="headerlink" title="3、在Spring配置文件中指定properties属性文件的位置"></a>3、在Spring配置文件中指定properties属性文件的位置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定properties属性文件的位置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- classpath:xxx 表示属性文件位于类路径下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="4、从properties属性文件中引入属性值"><a href="#4、从properties属性文件中引入属性值" class="headerlink" title="4、从properties属性文件中引入属性值"></a>4、从properties属性文件中引入属性值</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 从properties属性文件中引入属性值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.userName&#125;"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.password&#125;"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.url&#125;"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.driverClass&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="方式二-使用专门配置类"><a href="#方式二-使用专门配置类" class="headerlink" title="方式二 使用专门配置类"></a>方式二 使用专门配置类</h4><h5 id="在Spring配置文件中配置专门的Bean"><a href="#在Spring配置文件中配置专门的Bean" class="headerlink" title="在Spring配置文件中配置专门的Bean"></a>在Spring配置文件中配置专门的Bean</h5><p>通过配置该Bean，注入相关属性，从而引入外部配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"xxx.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="方式三-使用-PropertySource注解"><a href="#方式三-使用-PropertySource注解" class="headerlink" title="方式三 使用@PropertySource注解"></a>方式三 使用<strong>@PropertySource</strong>注解</h4><p>该注解标注在类上，和组件标识注解搭配使用，没有组件标识注解的话会抛异常。之后引入的配置文件中的属性可用<strong>@Value</strong>取出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@propertySource</span>(value=&#123;<span class="string">"classpath:xxx.properties"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.age&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>手动装配：以value或ref的方式<strong>明确指定属性值</strong>都是手动装配。</li>
<li>自动装配：根据指定的装配规则，<strong>不需要明确指定getter、setter方法</strong>，Spring<strong>自动</strong>将匹配的属性值<strong>注入</strong>bean中。</li>
</ul>
<h3 id="装配模式"><a href="#装配模式" class="headerlink" title="装配模式"></a>装配模式</h3><ul>
<li>根据<strong>类型</strong>自动装配：将类型匹配的bean作为属性注入到另一个bean中。若IOC容器中有多个与目标bean类型一致的bean，Spring将无法判定哪个bean最合适该属性，所以不能执行自动装配</li>
<li>根据<strong>名称</strong>自动装配：必须将目标bean的名称和属性名设置的完全相同</li>
<li>通过构造器自动装配：当bean中存在多个构造器时，此种自动装配方式将会很复杂。不推荐使用。</li>
</ul>
<h3 id="选用建议"><a href="#选用建议" class="headerlink" title="选用建议"></a>选用建议</h3><p>相对于使用注解的方式实现的自动装配，在XML文档中进行的自动装配略显笨拙，<strong>在项目中更多的使用注解的方式实现自动装配</strong>。</p>
<h2 id="Bean标签的相关属性"><a href="#Bean标签的相关属性" class="headerlink" title="Bean标签的相关属性"></a>Bean标签的相关属性</h2><ul>
<li><strong>class</strong>：要注册的组件的全类名。若class属性没有指定，相应的bean得是抽象类</li>
<li><strong>id</strong>：唯一标识，不可以有特殊字符</li>
<li><strong>name</strong>：唯一标识，可以有特殊字符</li>
<li><strong>parent</strong>：引用其他bean的配置信息，填其他bean的ID<ul>
<li>子bean从父bean中继承配置，包括bean的属性配置</li>
<li>子bean也可以覆盖从父bean继承过来的配置</li>
<li>父bean里的<strong>autowire</strong>，<strong>abstract</strong>等属性不会被继承。</li>
</ul>
</li>
<li><strong>abstract</strong>：<strong>abstract为true</strong>的话，则Spring不会实例化这个bean</li>
<li><strong>depens-on</strong>：用于bean之间的依赖，可以改变bean的加载顺序</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a依赖于c和b，先加载c，再是b，最后是a --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"xx.xxx.xx"</span> <span class="attr">depends-on</span>=<span class="string">"c，b"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>scope</strong>：规定bean的作用域<ul>
<li><strong>singleton</strong>：scope的值为<strong>singleton</strong>时，bean为单实例。singleton为scope的默认值</li>
<li><strong>prototype</strong>：scope的值为<strong>prototype</strong>时，bean为多实例。<ul>
<li>容器启动默认不会创建多实例bean</li>
<li>获取的时候才会创建多实例bean</li>
<li>每次获取都会创建一个新的bean实例</li>
</ul>
</li>
<li><strong>request</strong>：web环境下，同一请求创建一个bean实例。</li>
<li><strong>session</strong>：web环境下，同一会话创建一个bean实例</li>
</ul>
</li>
<li><strong>factory-method</strong>：指定静态工厂或实例工厂的哪个方法是工厂方法。是静态工厂的话，就在静态工厂的Bean配置；是实例工厂的话，不在实例工厂的Bean里配置，在要获取的实例Bean的标签里配置。</li>
<li><strong>factory-bean</strong>：指定用哪个工厂Bean，填工厂的全类名</li>
<li><strong>destroy-method</strong>：销毁方法的名称</li>
<li><strong>init-method</strong>：初始化方法的名称</li>
<li><strong>lazy-int</strong>：<strong>lazy-int的值为true时，实现懒加载，初始化容器时不创建对象</strong></li>
<li><strong>autowire</strong>：自动装配<ul>
<li>自动装配仅限于 自定义类型</li>
<li>autowire的值为<strong>default或no</strong>时，不自动装配，默认值</li>
<li>autowire的值为<strong>byName</strong>时，Spring会将属性名作为bean的ID去容器中寻找相应的bean。未找到会装配null</li>
<li>autowire的值为<strong>byType</strong>时，Spring会以属性类型作为查找依据去容器中找相应的bean，容器中若有多个相同类型的组件会报错。未找到会装配null</li>
<li>autowire的值为<strong>constructor</strong>时，Spring会按按构造器装配<ul>
<li>先按照有参构造器参数类型进行装配（成功就赋值），没有就直接为组件装配null</li>
<li>若按照参数类型找到了多个bean，会将参数名作为bean的id继续查找。找到就装配，没有就装配null</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="注解配置Bean"><a href="#注解配置Bean" class="headerlink" title="注解配置Bean"></a>注解配置Bean</h2><p>相对于XML方式而言，<strong>通过注解的方式配置bean更加简洁和优雅</strong>，而且和MVC组件化开发的理念十分契合，是开发中常用的使用方式。</p>
<p><strong>XML配置Bean的方式更适合配置引入外部jar包里的Bean；而通过包扫描加注解配置Bean的方式，更适合配置我们自己写的Bean。</strong></p>
<h3 id="使用注解标识组件"><a href="#使用注解标识组件" class="headerlink" title="使用注解标识组件"></a>使用注解标识组件</h3><ul>
<li>普通组件：<strong>@Component</strong>，标识一个受SpringIOC容器管理的组件</li>
<li>持久化层组件：<strong>@Respository</strong>，标识一个受SpringIOC容器管理的持久化层组件</li>
<li>业务逻辑层组件：<strong>@Service</strong>，标识一个受SpringIOC容器管理的业务逻辑层组件</li>
<li>表述层控制器组件：<strong>@Controller</strong>，标识一个受SpringIOC容器管理的表述层控制器组件</li>
</ul>
<h4 id="组件命名规则"><a href="#组件命名规则" class="headerlink" title="组件命名规则"></a>组件命名规则</h4><ol>
<li><strong>默认情况：使用组件的简单类名首字母小写后得到的字符串作为bean的id</strong></li>
<li><strong>使用组件注解的value属性指定bean的id</strong></li>
</ol>
<p>注：@Respository、@Service、@Controller这几个注解仅仅是为了让开发人员自己明确当前的组件扮演的角色。</p>
<h3 id="扫描组件"><a href="#扫描组件" class="headerlink" title="扫描组件"></a>扫描组件</h3><p>组件被上述注解标识后还需要通过Spring进行扫描才能够侦测到。<strong>需要在基础的5个包上添加aop的包</strong></p>
<h4 id="指定被扫描的包"><a href="#指定被扫描的包" class="headerlink" title="指定被扫描的包"></a>指定被扫描的包</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xxx.component"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="相关属性说明"><a href="#相关属性说明" class="headerlink" title="相关属性说明"></a>相关属性说明</h4><ul>
<li><strong>base-package</strong>属性指定一个需要扫描的基类包，Spring容器将会扫描这个基类包及其子包中的所有类。当需要扫描多个包时可以使用逗号分隔</li>
<li>仅希望扫描特定的类而非基包下的所有类，可使用<strong>resource-pattern属性过滤特定的类</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">base-package</span>=<span class="string">"com.xxx.component"</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">resource-pattern</span>=<span class="string">"autowire/*.class"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="包含与排除"><a href="#包含与排除" class="headerlink" title="包含与排除"></a>包含与排除</h4><ul>
<li>component-scan下可以拥有若干个<strong>include-filter</strong>和<strong>exclude-filter</strong>子标签</li>
</ul>
<ul>
<li><p>&lt;context:include-filter&gt;子标签表示要<strong>包含的目标类</strong></p>
<p>注：<strong>通常需要与use-default-filters属性配合</strong>使用才能够达到“仅包含某些组件”这样的效果。即：通过将use-default-filters属性设置为false，禁用默认过滤器，然后扫描的就只是include-filter中的规则指定的组件了。</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xxx.component"</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">context:inlude-filter</span> <span class="attr">type</span>=<span class="string">"annoation"</span> <span class="attr">expression</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;context:exclude-filter&gt;子标签表示要<strong>排除在外的目标类</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xxx.component"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annoation"</span> <span class="attr">expression</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="过滤表达式"><a href="#过滤表达式" class="headerlink" title="过滤表达式"></a>过滤表达式</h6><table>
<thead>
<tr>
<th align="center">类别</th>
<th align="center">示例</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">annotation</td>
<td align="center">com.xxx.XxxAnnotation</td>
<td align="left">过滤所有标注了XxxAnnotation的类。这个规则根据目标组件是否标注了指定类型的注解进行过滤。</td>
</tr>
<tr>
<td align="center">assignable</td>
<td align="center">com.xxx.BaseXxx</td>
<td align="left">过滤所有BaseXxx类的子类。这个规则根据目标组件是否是指定类型的子类的方式进行过滤。</td>
</tr>
<tr>
<td align="center">aspectj</td>
<td align="center">com.xxx.*Service+</td>
<td align="left">所有类名是以Service结束的，或这样的类的子类。这个规则根据AspectJ表达式进行过滤。</td>
</tr>
<tr>
<td align="center">regex</td>
<td align="center">com.xxx.anno.*</td>
<td align="left">所有com.atguigu.anno包下的类。这个规则根据正则表达式匹配到的类名进行过滤。</td>
</tr>
<tr>
<td align="center">custom</td>
<td align="center">com.xxx.XxxTypeFilter</td>
<td align="left">使用XxxTypeFilter类通过编码的方式自定义过滤规则。该类必须实现org.springframework.core.type.filter.TypeFilter接口</td>
</tr>
</tbody></table>
<h3 id="组件装配"><a href="#组件装配" class="headerlink" title="组件装配"></a>组件装配</h3><p>Controller组件中往往需要用到Service组件的实例，Service组件中往往需要用到Repository组件的实例。Spring可以通过注解的方式帮我们实现属性的装配。</p>
<p>在指定要扫描的包时，<strong>&lt;context:component-scan&gt;</strong> 标签会自动注册一个bean的后置处理器：AutowiredAnnotationBeanPostProcessor的实例。该后置处理器可以自动装配标记了<strong>@Autowired</strong>、@Resource或@Inject注解的属性。</p>
<h4 id="Autowired注解"><a href="#Autowired注解" class="headerlink" title="@Autowired注解"></a>@Autowired注解</h4><ul>
<li><strong>@Autowired</strong>注解根据类型实现自动装配的，是Spring这个框架自带的注解。</li>
<li>构造器、普通字段(即使是非public)、一切具有参数的方法都可以应用@Autowired注解。<ul>
<li>方法上标有<strong>@Autowired</strong>的话，这个方法在Bean创建的时候也会自动运行；方法的每个参数都会自动注入值</li>
</ul>
</li>
<li><strong>默认情况下，所有使用@Autowired注解的属性都需要被设置</strong>。当Spring找不到匹配的bean装配属性时，会抛出异常。</li>
<li><strong>若某一属性允许不被设置，可以设置@Autowired注解的required属性为false</strong>。找到就装配，找不到就会装个null</li>
<li>默认情况下，当IOC容器里存在多个类型兼容的bean时，Spring会尝试匹配bean的id值是否与变量名相同，如果相同则进行装配。如果bean的id值不相同，通过类型的自动装配将无法工作。此时可以在@Qualifier注解里提供bean的名称。Spring甚至允许在方法的形参上标注@Qualifiter注解以指定注入bean的名称。</li>
<li>@Autowired注解也可以应用在数组类型的属性上，此时Spring将会把所有匹配的bean进行自动装配。@Autowired注解也可以应用在集合属性上，此时Spring读取该集合的类型信息，然后自动装配所有与之兼容的bean。</li>
<li>@Autowired注解用在java.util.Map上时，若该Map的键值为String，那么Spring将自动装配与值类型兼容的bean作为值，并以bean的id值作为键。</li>
</ul>
<h5 id="流程简述"><a href="#流程简述" class="headerlink" title="流程简述"></a>流程简述</h5><ul>
<li>先按照类型去容器中找到相应的组件。例：bookService = ioc.getBean(“BookService.class”);<ul>
<li>只找到一个，找到就赋值，没找到抛异常</li>
<li>找到多个后，先按照变量名作为id查找，BookService（bookService），BookServiceExt（bookServiceExt）未匹配到时报错</li>
</ul>
</li>
</ul>
<h2 id="Spring单元测试"><a href="#Spring单元测试" class="headerlink" title="Spring单元测试"></a>Spring单元测试</h2><ul>
<li>导包，Spring的单元测试包spring-test-x.x.x.RELEASE.jar</li>
<li>使用@ContextConfiguration(locations=””)指定Spring的配置文件存放位置</li>
<li>用@RunWith指定使用哪种驱动进行单元测试，如果不指定默认就是junit<ul>
<li>以下两种方式是使用<strong>Spring的单元测试模块来执行</strong>标注了@Test注解的测试方法</li>
<li>@RunWith(SpringJUnit4ClassRunner.class)</li>
<li>@RunWith(SpringRunner.class)</li>
</ul>
</li>
</ul>
<p>使用Spring的单元测试，不用ioc.getBean()获取组件了，直接在组件上添加@Autowired注解，让Spring为我们自动装配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:applicationcontext.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDemo</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            省略了ApplicationContext ioc =</span></span><br><span class="line"><span class="comment">                new ClassPathXmlApplicationContext("applicationcontext.xml");</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring其他注解"><a href="#Spring其他注解" class="headerlink" title="Spring其他注解"></a>Spring其他注解</h2><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><p>@Value，需和注入组件的注解(@Component、@Respository、@Service、@Controller)搭配使用。</p>
<h4 id="不通过外部文件注入属性"><a href="#不通过外部文件注入属性" class="headerlink" title="不通过外部文件注入属性"></a>不通过外部文件注入属性</h4><h5 id="注入普通字符串"><a href="#注入普通字符串" class="headerlink" title="注入普通字符串"></a>注入普通字符串</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"normal"</span>)</span><br><span class="line"><span class="keyword">private</span> String normal;</span><br></pre></td></tr></table></figure>

<h5 id="注入操作系统属性"><a href="#注入操作系统属性" class="headerlink" title="注入操作系统属性"></a>注入操作系统属性</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;systemProperties['os.name']&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String systemPropertiesName;</span><br></pre></td></tr></table></figure>

<h5 id="注入表达式结果"><a href="#注入表达式结果" class="headerlink" title="注入表达式结果"></a>注入表达式结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123; T(java.lang.Math).random() * 100.0 &#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> randomNumber;</span><br></pre></td></tr></table></figure>

<h5 id="注入其他Bean的属性"><a href="#注入其他Bean的属性" class="headerlink" title="注入其他Bean的属性"></a>注入其他Bean的属性</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;beanInject.another&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String fromAnotherBean;</span><br></pre></td></tr></table></figure>

<h5 id="注入文件资源"><a href="#注入文件资源" class="headerlink" title="注入文件资源"></a>注入文件资源</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"classpath:com/hry/spring/configinject/config.txt"</span>)</span><br><span class="line"><span class="keyword">private</span> Resource resourceFile;</span><br></pre></td></tr></table></figure>

<h5 id="注入URL资源"><a href="#注入URL资源" class="headerlink" title="注入URL资源"></a>注入URL资源</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"> <span class="keyword">private</span> Resource testUrl;</span><br></pre></td></tr></table></figure>

<h4 id="通过配置文件注入属性"><a href="#通过配置文件注入属性" class="headerlink" title="通过配置文件注入属性"></a>通过配置文件注入属性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 引入外部配置文件组：$&#123;app.configinject&#125;的值来自config.properties。</span></span><br><span class="line"><span class="comment">// 如果相同</span></span><br><span class="line"><span class="meta">@PropertySource</span>(&#123;<span class="string">"classpath:com/hry/spring/configinject/config.properties"</span>,</span><br><span class="line">    <span class="string">"classpath:com/hry/spring/configinject/config_$&#123;anotherfile.configinject&#125;.properties"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationFileInject</span></span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;app.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String appName; <span class="comment">// 这里的值来自application.properties，spring boot启动时默认加载此文件</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;book.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bookName; <span class="comment">// 注入第一个配置外部文件属性</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;book.name.placeholder&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bookNamePlaceholder; <span class="comment">// 注入第二个配置外部文件属性</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;  <span class="comment">// 注入环境变量对象，存储注入的属性值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"bookName="</span>).append(bookName).append(<span class="string">"\r\n"</span>)</span><br><span class="line">        .append(<span class="string">"bookNamePlaceholder="</span>).append(bookNamePlaceholder).append(<span class="string">"\r\n"</span>)</span><br><span class="line">        .append(<span class="string">"appName="</span>).append(appName).append(<span class="string">"\r\n"</span>)</span><br><span class="line">        .append(<span class="string">"env="</span>).append(env).append(<span class="string">"\r\n"</span>)</span><br><span class="line">        <span class="comment">// 从eniroment中获取属性值</span></span><br><span class="line">        .append(<span class="string">"env="</span>).append(env.getProperty(<span class="string">"book.name.placeholder"</span>)).append(<span class="string">"\r\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>用法跟@Autowired类似，是J2EE的标准，扩展性更强。</p>
<h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>AOP(Aspect-OrientedProgramming，<strong>面向切面编程</strong>)是一种新的方法论，是对传统OOP(Object-Oriented Programming，面向对象编程)的补充。AOP编程操作的主要对象是切面(aspect)。</p>
<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><h4 id="横切关注点"><a href="#横切关注点" class="headerlink" title="横切关注点"></a>横切关注点</h4><p>从每个方法中抽取出来的同一类非核心业务。</p>
<h4 id="切面-Aspect"><a href="#切面-Aspect" class="headerlink" title="切面(Aspect)"></a>切面(Aspect)</h4><p>封装横切关注点信息的类，每个关注点体现为一个通知方法。</p>
<h4 id="通知-Advice"><a href="#通知-Advice" class="headerlink" title="通知(Advice)"></a>通知(Advice)</h4><p>切面必须要完成的各个具体工作</p>
<h4 id="目标-Target"><a href="#目标-Target" class="headerlink" title="目标(Target)"></a>目标(Target)</h4><p>被通知的对象</p>
<h4 id="代理-Proxy"><a href="#代理-Proxy" class="headerlink" title="代理(Proxy)"></a>代理(Proxy)</h4><p>向目标对象应用通知之后创建的代理对象</p>
<h4 id="连接点-Joinpoint"><a href="#连接点-Joinpoint" class="headerlink" title="连接点(Joinpoint)"></a>连接点(Joinpoint)</h4><p>横切关注点在程序代码中的具体体现，对应程序执行的某个特定位置。例如：类某个方法调用前、调用后、方法捕获到异常后等。在应用程序中可以使用横纵两个坐标来定位一个具体的连接点。</p>
<h4 id="切入点-pointcut"><a href="#切入点-pointcut" class="headerlink" title="切入点(pointcut)"></a>切入点(pointcut)</h4><p><strong>定位连接点的方式</strong>。每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物。如果把连接点看作数据库中的记录，那么切入点就是查询条件，AOP可以通过切入点定位到特定的连接点。切点通过org.springframework.aop.Pointcut接口进行描述，它使用类和方法作为连接点的查询条件。</p>
<h3 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h3><p>AspectJ，Java社区里最完整最流行的AOP框架。Spring2.0以上版本中，可以使用基于AspectJ注解或基于XML配置的AOP。</p>
<h4 id="在Spring中启用AspectJ注解支持"><a href="#在Spring中启用AspectJ注解支持" class="headerlink" title="在Spring中启用AspectJ注解支持"></a>在Spring中启用AspectJ注解支持</h4><h5 id="导入JAR包"><a href="#导入JAR包" class="headerlink" title="导入JAR包"></a>导入JAR包</h5><p>aopalliance.jar和aspectj.weaver.jar合spring-aspects.jar</p>
<h5 id="引入aop名称空间"><a href="#引入aop名称空间" class="headerlink" title="引入aop名称空间"></a>引入aop名称空间</h5><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>当SpringIOC容器侦测到bean配置文件中的<strong>&lt;aop:aspectj-autoproxy&gt;</strong>标签时，会自动为与AspectJ切面匹配的bean创建代理。</p>
<h5 id="用AspectJ注解声明切面"><a href="#用AspectJ注解声明切面" class="headerlink" title="用AspectJ注解声明切面"></a>用AspectJ注解声明切面</h5><ul>
<li>要在Spring中声明AspectJ切面，只需要在IOC容器中将切面声明为bean实例。</li>
<li>当在SpringIOC容器中初始化AspectJ切面之后，SpringIOC容器就会为那些与AspectJ切面相匹配的bean创建代理。</li>
<li><strong>切面只是一个带有@Aspect注解的Java类</strong>，它往往要包含很多通知。</li>
<li>通知是标注有某种注解的简单的Java方法。</li>
<li>AspectJ支持5种类型的通知注解：<ul>
<li><strong>@Before</strong>：前置通知，在方法执行之前执行</li>
<li><strong>@After</strong>：后置通知，在方法执行之后执行</li>
<li><strong>@AfterRunning</strong>：返回通知，在方法返回结果之后执行</li>
<li><strong>@AfterThrowing</strong>：异常通知，在方法抛出异常之后执行</li>
<li><strong>@Around</strong>：环绕通知，围绕着方法执行</li>
</ul>
</li>
</ul>
<h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>通过<strong>表达式的方式</strong>定位<strong>一个或多个</strong>具体的连接点。</p>
<h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><p><strong>execution([权限修饰符][返回值类型][简单类名/全类名][方法名]([参数列表]))</strong></p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><table>
<thead>
<tr>
<th align="center">表达式</th>
<th>execution(* com.xxx.spring.ArithmeticCalculator.*(..))</th>
</tr>
</thead>
<tbody><tr>
<td align="center">含义</td>
<td>ArithmeticCalculator接口中声明的所有方法。第一个“*”代表任意修饰符及任意返回值。第二个“*”代表任意方法。“..”匹配任意数量、任意类型的参数。若目标类、接口与该切面类在同一个包中可以省略包名。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th>execution(public * ArithmeticCalculator.*(..))</th>
</tr>
</thead>
<tbody><tr>
<td align="center">含义</td>
<td>ArithmeticCalculator接口的所有公有方法</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th>execution (* *.add(int,..)) || execution(* *.sub(int,..))</th>
</tr>
</thead>
<tbody><tr>
<td align="center">含义</td>
<td>任意类中第一个参数为int类型的add方法<strong>或</strong>sub方法</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th>execution (* *.add(int,..)) &amp;&amp; execution(* *.sub(int,..))</th>
</tr>
</thead>
<tbody><tr>
<td align="center">含义</td>
<td>任意类中第一个参数为int类型的add方法<strong>和</strong>sub方法</td>
</tr>
</tbody></table>
<h4 id="切入点表达式的实际应用"><a href="#切入点表达式的实际应用" class="headerlink" title="切入点表达式的实际应用"></a>切入点表达式的实际应用</h4><p>如下图</p>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Spring/%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8.png" alt="切入点表达式的实际应用"></p>
<h3 id="当前连接点细节"><a href="#当前连接点细节" class="headerlink" title="当前连接点细节"></a>当前连接点细节</h3><p>切入点表达式和具体某个通知的注解结合起来就能够确定对应的连接点。而连接点的具体信息都封装在JoinPoint接口的实例对象中。</p>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Spring/%E8%BF%9E%E6%8E%A5%E7%82%B9%E7%9A%84%E5%85%B7%E4%BD%93%E4%BF%A1%E6%81%AF.png" alt="连接点的具体信息"></p>
<h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>通知是在具体的连接点上要执行的操作。 一个切面可以包括一个或者多个通知。<strong>通知所使用的注解的值往往是切入点表达式。</strong></p>
<h4 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h4><p>前置通知在方法执行之前执行的通知。<strong>使用@Before注解</strong></p>
<h4 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h4><p>后置通知是在连接点完成之后执行的，即连接点返回结果或者抛出异常的时候。<strong>使用@After注解</strong></p>
<h4 id="返回通知"><a href="#返回通知" class="headerlink" title="返回通知"></a>返回通知</h4><p>无论连接点是正常返回还是抛出异常，后置通知都会执行。如果只想在连接点返回的时候记录日志，应使用返回通知代替后置通知。<strong>返回通知使用@AfterReturning注解</strong></p>
<h5 id="在返回通知中访问连接点的返回值"><a href="#在返回通知中访问连接点的返回值" class="headerlink" title="在返回通知中访问连接点的返回值"></a>在返回通知中访问连接点的返回值</h5><ul>
<li>在返回通知中，只要将returning属性添加到@AfterReturning注解中，就可以访问连接点的返回值。该属性的值即为用来传入返回值的参数名称</li>
<li>必须在通知方法的签名中添加一个同名参数。在运行时SpringAOP会通过这个参数传递返回值</li>
<li>原始的切点表达式需要出现在pointcut属性中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning</span>(pointcut=<span class="string">"execution(* *.*(..))"</span>, returning=<span class="string">"result"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterReturning</span> <span class="params">(JointPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">    log.info (<span class="string">"The method"</span> + joinPoint.getSignature().getName()</span><br><span class="line">             + <span class="string">"() ends with "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="异常通知"><a href="#异常通知" class="headerlink" title="异常通知"></a>异常通知</h4><ul>
<li>异常通知只在连接点抛出异常时才执行异常通知</li>
<li>将<strong>throwing属性添加到@AfterThrowing注解中</strong>，也可以访问连接点抛出的异常。Throwable是所有错误和异常类的顶级父类，所以在异常通知方法可以捕获到任何错误和异常。</li>
<li>如果只对某种特殊的异常类型感兴趣，可以将参数声明为其他异常的参数类型。然后通知就只在抛出这个类型及其子类的异常时才被执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing</span>(pointcut=<span class="string">"execution(* *.*(..))"</span>, throwing=<span class="string">"e"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterThrowing</span> <span class="params">(JointPoint joinPoint, ArithmeticExeption e)</span> </span>&#123;</span><br><span class="line">    log.info (<span class="string">"An Exception"</span> + e + <span class="string">"has been throwing in "</span> + joinPoint.getSignature().getName()</span><br><span class="line">             + <span class="string">"() "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h4><ul>
<li><p>环绕通知是所有通知类型中功能最为强大的，能够全面地控制连接点，甚至可以控制是否执行连接点。</p>
</li>
<li><p>对于环绕通知来说，连接点的参数类型必须是<strong>ProceedingJoinPoint</strong>。它是JoinPoint的子接口，允许控制何时执行，是否执行连接点。</p>
</li>
<li><p>在环绕通知中需要明确调用ProceedingJoinPoint的proceed()方法来执行被代理的方法。如果忘记这样做就会导致通知被执行了，但目标方法没有被执行。</p>
</li>
<li><p>注意：环绕通知的方法需要返回目标方法执行之后的结果，即调用<strong>joinPoint.proceed()</strong>的返回值，否则会出现空指针异常。<strong>此处待回忆</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around</span>(pointcut=<span class="string">"execution(* *.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAround</span> <span class="params">(ProceedingJoinPoin joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">    log.info (<span class="string">"The method "</span> + jointPoint.gtSignature().getName() + <span class="string">"() begins with "</span> + Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        log.into(<span class="string">"The method"</span> + joinPoint.getSignatrue().getName() + <span class="string">"() ends"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        log.info(<span class="string">"An exception"</span> + e + <span class="string">"has been throwing in"</span> + joinPoint.getSignature().getName() + <span class="string">"()"</span>);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重用切入点定义"><a href="#重用切入点定义" class="headerlink" title="重用切入点定义"></a>重用切入点定义</h3><ul>
<li>写AspectJ切面时，可以直接在通知注解中书写切入点表达式。但同一个切点表达式可能会在多个通知中重复出现。</li>
<li>AspectJ切面中，可以<strong>通过@Pointcut注解将一个切入点声明成简单的方法</strong>。<strong>切入点的方法体通常是空的</strong>，因为将切入点定义与应用程序逻辑混在一起是不合理的。</li>
<li>方法的访问控制符同时也控制着这个切入点的可见性。如果切入点要在多个切面中共用，最好将它们集中在一个公共的类中。在这种情况下，它们必须被声明为public。在引入这个切入点时，必须将类名也包括在内。如果类没有与这个切面放在同一个包中，还必须包含包名。</li>
<li><strong>通知可以通过方法名称引入该切入点</strong>。</li>
</ul>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Spring/%E9%87%8D%E7%94%A8%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="重用切入点定义"></p>
<h3 id="指定切面的优先级"><a href="#指定切面的优先级" class="headerlink" title="指定切面的优先级"></a>指定切面的优先级</h3><ul>
<li>一个连接点上应用不止一个切面时，除非明确指定，否则它们的优先级是不确定的。</li>
<li>切面的优先级<strong>可以通过实现Ordered接口</strong>或<strong>利用@Order注解指定</strong>。</li>
<li>实现Ordered接口，getOrder()方法的<strong>返回值越小，优先级越高</strong>。</li>
<li>若使用@Order注解，序号出现在注解中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A_Aspect</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B_Aspect</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h3><p><strong>环绕前置–&gt;普通前置–&gt;目标方法执行–&gt;环绕正常返回/出现异常–&gt;环绕后置–&gt;普通后置–&gt;普通返回和异常</strong></p>
<h2 id="XML方式配置切面"><a href="#XML方式配置切面" class="headerlink" title="XML方式配置切面"></a>XML方式配置切面</h2><p>除了使用AspectJ注解声明切面，Spring也支持在bean配置文件中声明切面。这种声明是通过aop名称空间中的XML元素完成的。正常情况下，基于注解的声明要优先于基于XML的声明。</p>
<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>该方式可在通过切入点表达式，<strong>在目标方法的指定位置单独配置不同的通知</strong>，相比方式二使用通知的方式更加灵活。</p>
<h4 id="1、编写切面类"><a href="#1、编写切面类" class="headerlink" title="1、编写切面类"></a>1、编写切面类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"前置通知"</span> + joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"后置通知"</span> + joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"方法执行前"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	proceedingJoinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        	throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"方法执行后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、配置-lt-aop-aspect-gt-标签"><a href="#2、配置-lt-aop-aspect-gt-标签" class="headerlink" title="2、配置&lt;aop:aspect&gt;标签"></a>2、配置&lt;aop:aspect&gt;标签</h4><p>在Spring配置文件中，所有的Spring AOP配置都必须定义在<strong>&lt;aop:config&gt;</strong>元素内部。创建一个<strong>&lt;aop:aspect&gt;</strong>标签引入切面类的Bean。</p>
<p>切面类必须有一个标识符(即ID元素)，供<strong>&lt;aop:aspect&gt;</strong>标签引用</p>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Spring/aop_aspect%E6%A0%87%E7%AD%BE.png" alt="aspect标签"></p>
<h4 id="2、声明切入点"><a href="#2、声明切入点" class="headerlink" title="2、声明切入点"></a>2、声明切入点</h4><ul>
<li>切入点使用<strong>&lt;aop:pointcut&gt;</strong>标签声明。</li>
<li><strong>&lt;aop:pointcut&gt;</strong>标签定义在<strong>&lt;aop:aspect&gt;</strong>标签下：只对当前切面有效</li>
<li><strong>&lt;aop:pointcut&gt;</strong>标签定义在<strong>&lt;aop:config&gt;</strong>标签下：对所有切面都有效</li>
<li>基于XML的AOP配置不允许在切入点表达式中用名称引用其他切入点。</li>
</ul>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Spring/%E5%88%87%E5%85%A5%E7%82%B9%E6%A0%87%E7%AD%BE.png" alt="切入点标签"></p>
<h4 id="3、声明通知"><a href="#3、声明通知" class="headerlink" title="3、声明通知"></a>3、声明通知</h4><ul>
<li>在aop名称空间中，每种通知类型都对应一个特定的XML标签。</li>
<li>通知标签需要使用<strong>pointcut-ref</strong>来引用切入点，或用&lt;pointcut&gt;直接嵌入切入点表达式。</li>
<li>method属性指定切面类中通知方法的名称</li>
</ul>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Spring/%E9%80%9A%E7%9F%A5%E6%A0%87%E7%AD%BE.png" alt="通知标签"></p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>该种方式对目标统一设置了通知，不能针对特点连接点进行特定的通知设置，不灵活。</p>
<h4 id="1、创建切面类"><a href="#1、创建切面类" class="headerlink" title="1、创建切面类"></a>1、创建切面类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 切面类 实现方法拦截器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行之前打印的"</span>);</span><br><span class="line">        Object proceed = methodInvocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">"执行之后打印的"</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、编写Spring的配置文件"><a href="#2、编写Spring的配置文件" class="headerlink" title="2、编写Spring的配置文件"></a>2、编写Spring的配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置目标类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO"</span> <span class="attr">class</span>=<span class="string">"com.xxx.cn.dao.UserDAOImpl"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切面类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">class</span>=<span class="string">"com.xxx.cn.Aspect.MyAspect"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myAspect"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">pointcut</span>=<span class="string">"execution(* com.xxx.cn.dao.UserDAO.addUser())"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h2><h3 id="编程式事务管理"><a href="#编程式事务管理" class="headerlink" title="编程式事务管理"></a>编程式事务管理</h3><p>使用原生的JDBC API进行事务管理</p>
<ul>
<li>获取数据库连接Connection对象</li>
<li>取消事务的自动提交</li>
<li>执行操作</li>
<li>正常完成操作时手动提交事务</li>
<li>执行失败时回滚事务</li>
<li>关闭相关资源</li>
</ul>
<p>编程式事务管理需要将事务管理代码<strong>嵌入到业务方法中</strong>来控制事务的提交和回滚，会造成较大程度的<strong>代码冗余</strong>。        </p>
<h3 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h3><p>声明式事务将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</p>
<h3 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h3><p>Spring从不同的事务管理API中抽象出了一整套事务管理机制，让事务管理代码从特定的事务技术中独立出来。开发人员通过配置的方式进行事务管理，而不必了解其底层是如何实现的。</p>
<p>Spring的核心事务管理抽象是PlatformTransactionManager。它为事务管理封装了一组独立于技术的方法。无论使用Spring的哪种事务管理策略(编程式或声明式)，事务管理器都是必须的。</p>
<p>事务管理器可以以普通的bean的形式声明在Spring IOC容器中。</p>
<h3 id="事务管理器的主要实现"><a href="#事务管理器的主要实现" class="headerlink" title="事务管理器的主要实现"></a>事务管理器的主要实现</h3><ul>
<li><strong>DataSourceTransactionManager</strong>：在应用程序中只需要处理一个数据源，而且通过JDBC存取。</li>
<li><strong>JtaTransactionManager</strong>：在JavaEE应用服务器上用JTA(JavaTransaction API)进行事务管理</li>
<li><strong>HibernateTransactionManager</strong>：用Hibernate框架存取数据库</li>
</ul>
<h3 id="基于XML的声明式事务"><a href="#基于XML的声明式事务" class="headerlink" title="基于XML的声明式事务"></a>基于XML的声明式事务</h3><h4 id="1、Spring配置文件的相关配置"><a href="#1、Spring配置文件的相关配置" class="headerlink" title="1、Spring配置文件的相关配置"></a>1、Spring配置文件的相关配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span>	  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">"execution(* com.atguigu.tx.component.service.BookShopServiceImpl.purchase(..))"</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">id</span>=<span class="string">"txPointCut"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将切入点表达式和事务属性配置关联到一起 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myTx"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置基于XML的声明式事务  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"myTx"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置具体方法的事务属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"purchase"</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">isolation</span>=<span class="string">"READ_COMMITTED"</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">no-rollback-for</span>=<span class="string">"java.lang.ArithmeticException,java.lang.NullPointerException"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">read-only</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">timeout</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="基于注解的声明式事务"><a href="#基于注解的声明式事务" class="headerlink" title="基于注解的声明式事务"></a>基于注解的声明式事务</h3><h4 id="1、Spring配置文件的相关配置-1"><a href="#1、Spring配置文件的相关配置-1" class="headerlink" title="1、Spring配置文件的相关配置"></a>1、Spring配置文件的相关配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span>	  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 启用事务注解 transaction-manager属性的值为transactionManager时可忽略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、在需要进行事务控制的类或方法上加注解"><a href="#2、在需要进行事务控制的类或方法上加注解" class="headerlink" title="2、在需要进行事务控制的类或方法上加注解"></a>2、在需要进行事务控制的类或方法上加注解</h4><p>加@Transactional注解</p>
<h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h3><p>在需要进行事务控制的方法和类上加注解。默认<strong>发生运行时异常回滚</strong>，发生编译时异常不回滚。</p>
<h4 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h4><h5 id="isolation-Isolation"><a href="#isolation-Isolation" class="headerlink" title="isolation-Isolation"></a>isolation-Isolation</h5><p>事务的隔离级别</p>
<ul>
<li>读未提交：READ UNCOMMITTED。  允许事务1 读取 事务2 未提交的修改</li>
<li>读已提交：READ COMMITTED。 要求事务1  只能读取 事务2 已提交的修改</li>
<li>可重复读：REPEATABLE READ。确保事务1  可以多次从一个字段读取到相同的值，即事务1 执行期间禁止其他事务对这个字段进行更新</li>
<li>串行化：SERIALIZABLE。  确保事务1 可以多次从一个表中读取相同的行。即在事务1执行期间，禁止其他事务对这个表进行增删改查操作。可避免任何并发问题，但性能十分低下。</li>
</ul>
<h5 id="noRollbackFor"><a href="#noRollbackFor" class="headerlink" title="noRollbackFor"></a>noRollbackFor</h5><p>哪些异常事务可以不回滚。示例：noRollbackFor={a.class,b.class}，指定a,b异常  不回滚</p>
<h5 id="noRollbackForClassName"><a href="#noRollbackForClassName" class="headerlink" title="noRollbackForClassName"></a>noRollbackForClassName</h5><p>哪些异常事务可以不回滚</p>
<h5 id="rollbackFor"><a href="#rollbackFor" class="headerlink" title="rollbackFor"></a>rollbackFor</h5><p>哪些异常事务可以回滚。示例：rollbackFor={a.class,b.class}，指定a,b异常  都回滚</p>
<h5 id="rollbackForClassName"><a href="#rollbackForClassName" class="headerlink" title="rollbackForClassName"></a>rollbackForClassName</h5><p>哪些异常事务可以回滚</p>
<h5 id="readOnly-boolean"><a href="#readOnly-boolean" class="headerlink" title="readOnly-boolean"></a>readOnly-boolean</h5><p>设置事务为只读事务,默认为false</p>
<h5 id="timeout-int"><a href="#timeout-int" class="headerlink" title="timeout-int"></a>timeout-int</h5><p>超时。事务超出指定时长后自动终止并回滚。以秒为单位</p>
<h5 id="propagation-Propagation"><a href="#propagation-Propagation" class="headerlink" title="propagation-Propagation"></a>propagation-Propagation</h5><p>事务的传播行为。默认值REQUIRED，事务的属性继承于外部的大事务</p>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-Spring/%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA.png" alt="事务的传播行为"></p>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>在Spring配置文件中配置相应标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启异步 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">executor</span>=<span class="string">"taskExecutor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span> <span class="attr">pool-size</span>=<span class="string">"20"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后在相应的方法上添加<code>@Async</code>注解</p>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-SpringMVC</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-SpringMVC/</url>
    <content><![CDATA[<p>施工中</p>
<a id="more"></a>

<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><ul>
<li>一种轻量级的、基于MVC的Web层应用框架</li>
<li>通过一套 MVC 注解，让 POJO 成为处理请求的控制器，而无须实现任何接口</li>
<li>支持 REST 风格的 URL 请求</li>
<li>采用了松散耦合可插拔组件结构，比其他 MVC 框架更具扩展性和灵活性</li>
</ul>
<h2 id="2-SpringMVC的基本使用"><a href="#2-SpringMVC的基本使用" class="headerlink" title="2. SpringMVC的基本使用"></a>2. SpringMVC的基本使用</h2><h3 id="2-0-建Web工程，导jar包"><a href="#2-0-建Web工程，导jar包" class="headerlink" title="2.0. 建Web工程，导jar包"></a>2.0. 建Web工程，导jar包</h3><p>导的包有：</p>
<p>spring-aop-4.0.0.RELEASE.jar<br>spring-beans-4.0.0.RELEASE.jar<br>spring-context-4.0.0.RELEASE.jar<br>spring-core-4.0.0.RELEASE.jar<br>spring-expression-4.0.0.RELEASE.jar<br>commons-logging-1.1.3.jar<br>spring-web-4.0.0.RELEASE.jar<br>spring-webmvc-4.0.0.RELEASE.jar</p>
<h3 id="2-1-Web-xml中配置DispathcerServlet"><a href="#2-1-Web-xml中配置DispathcerServlet" class="headerlink" title="2.1. Web.xml中配置DispathcerServlet"></a>2.1. Web.xml中配置DispathcerServlet</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC核心控制器： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置DispatcherServlet的初始化參數：设置文件的路径和文件名称</span></span><br><span class="line"><span class="comment">        如不想配置文件的路径，需配置一个/WEB_INF/&lt;servlet-name&gt;-servlet.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- contextConfigLocation：指定SpringMVC配置文件位置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Servlet在启动时加载，在第一次访问时创建对象。</span></span><br><span class="line"><span class="comment">        load-on-startup：服务器启动时创建对象，值越小优先级越高，越先创建对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /*和/都是拦截所有请求。</span></span><br><span class="line"><span class="comment">        但/不能拦截*.jsp,能保证*.jsp访问正常；/*范围更大，会拦截到*.jsp这些文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-配置springmvc-xml文件"><a href="#2-2-配置springmvc-xml文件" class="headerlink" title="2.2. 配置springmvc.xml文件"></a>2.2. 配置springmvc.xml文件</h3><p><strong>注意</strong>：在使用IDEA导入各种名称空间时，一定仔细看看之后导入的约束文件是不是自己要的。比如：导入mvc的名称空间时，其相关schema约束的的地址的URL要选<strong>以mvc结尾的</strong>，不要选其他的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导入各种名称空间（beans,context,mvc……）后</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置扫描组件的包： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.atguigu.springmvc"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- mvc:annotation-driven标签会默认会帮我们注册默认处理请求，参数和返回值的类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器：如何将控制器返回的结果字符串，转换为一个物理的视图文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-编写相应Controller类和success页面-success-jsp-进行测试等"><a href="#2-3-编写相应Controller类和success页面-success-jsp-进行测试等" class="headerlink" title="2.3. 编写相应Controller类和success页面(success.jsp)进行测试等"></a>2.3. 编写相应Controller类和success页面(success.jsp)进行测试等</h3><h2 id="3-SpringMVC内部流程图"><a href="#3-SpringMVC内部流程图" class="headerlink" title="3. SpringMVC内部流程图"></a>3. SpringMVC内部流程图</h2><p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-SpringMVC/springmvc%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="springmvc流程图"></p>
<p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-SpringMVC/%E7%AC%AC%E4%BA%8C%E7%A7%8DSpringMVC%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="笔记-SpringMVC"></p>
<h3 id="流程说明-重要"><a href="#流程说明-重要" class="headerlink" title="流程说明(重要)"></a>流程说明(重要)</h3><ol>
<li>客户端（浏览器）发送请求，直接请求到 <code>DispatcherServlet</code>。</li>
<li><code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code>，解析请求对应的 <code>Handler</code>。</li>
<li>解析到对应的 <code>Handler</code>（也就是我们平常说的 <code>Controller</code> 控制器）后，开始由 <code>HandlerAdapter</code> 适配器处理。</li>
<li><code>HandlerAdapter</code> 会根据 <code>Handler</code>来调用真正的处理器来处理请求，并处理相应的业务逻辑。</li>
<li>处理器处理完业务后，会返回一个 <code>ModelAndView</code> 对象，<code>Model</code> 是返回的数据对象，<code>View</code> 是个逻辑上的 <code>View</code>。</li>
<li><code>ViewResolver</code> 会根据逻辑 <code>View</code> 查找实际的 <code>View</code>。</li>
<li><code>DispaterServlet</code> 把返回的 <code>Model</code> 传给 <code>View</code>（视图渲染）。</li>
<li>把 <code>View</code> 返回给请求者（浏览器）</li>
</ol>
<h2 id="4-请求相关"><a href="#4-请求相关" class="headerlink" title="4. 请求相关"></a>4. 请求相关</h2><h3 id="4-0-相关注解"><a href="#4-0-相关注解" class="headerlink" title="4.0. 相关注解"></a>4.0. 相关注解</h3><h4 id="4-0-1-RequestMapping"><a href="#4-0-1-RequestMapping" class="headerlink" title="4.0.1. @RequestMapping"></a>4.0.1. @RequestMapping</h4><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><h6 id="value"><a href="#value" class="headerlink" title="value"></a>value</h6><ul>
<li>为控制器指定可以处理哪些URL请求</li>
<li><strong>标记在类上：</strong>提供初步的请求映射信息。路径相对于  WEB 应用的根目录</li>
<li><strong>标记在方法上：</strong>提供进一步的细分映射信息。路径相对于标记在类上的 URL。若类上未标注 @RequestMapping，则方法处标记的 URL 相对于 WEB 应用的根目录</li>
<li><strong>示例：</strong>@RequestMapping(value={“value1”,”value2”})</li>
</ul>
<h6 id="method"><a href="#method" class="headerlink" title="method"></a>method</h6><ul>
<li>限定请求方式</li>
<li>不写method则默认什么请求都行</li>
<li><strong>示例：</strong>@RequestMapping(value=”URL路径”,method=RequestMethod.PUT)</li>
</ul>
<h6 id="params"><a href="#params" class="headerlink" title="params"></a>params</h6><ul>
<li><p>限定请求参数</p>
<p>param1: 表示请求必须包含名为 param1 的请求参数</p>
<p>!param1: 表示请求不能包含名为 param1 的请求参数</p>
<p>param1 != value1: 表示请求包含名为 param1 的请求参数，但其值不能为 value1</p>
<p>param1 = value1: 表示请求包含名为 param1 的请求参数，但其值必须为 value1</p>
</li>
<li><p><strong>示例：</strong>params={“param1=value1”, “param2”,”!param3”,”param4!=value4”}</p>
<p>请求必须包含名为 param1,2 的请求参数</p>
<p>param1 参数的值必须为 value1；param2的值随意；</p>
<p>请求参数中不能有param3；参数中可以有param4，如果有，其值不能为value4</p>
</li>
</ul>
<h6 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h6><ul>
<li><p>指定request中必须包含某些指定的header值，才能让该方法处理请求，用法同params</p>
<p>例：<strong>@RequestMapping(headers={ “Accept-Language=en-US,zh;q=0.8”})</strong></p>
</li>
</ul>
<h6 id="consumes"><a href="#consumes" class="headerlink" title="consumes"></a>consumes</h6><ul>
<li><p>指定处理请求的提交内容类型（Content-Type）</p>
<p>例：@RequestMapping(consumes=”application/json”)</p>
<p>​    仅处理request的Content-Type中为“application/json”类型的请求</p>
</li>
</ul>
<h6 id="produces"><a href="#produces" class="headerlink" title="produces"></a>produces</h6><ul>
<li><p>指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回</p>
<p>例：@RequestMapping(produces=”application/json”)</p>
<p>​    方法仅处理request请求中Accept头中包含了”application/json”的请求，</p>
<p>​    同时暗示了返回的内容类型为application/json;</p>
</li>
</ul>
<h5 id="RequestMapping支持Ant资源路径风格"><a href="#RequestMapping支持Ant资源路径风格" class="headerlink" title="@RequestMapping支持Ant资源路径风格"></a>@RequestMapping支持Ant资源路径风格</h5><ol>
<li><h6 id="路径中带有？"><a href="#路径中带有？" class="headerlink" title="路径中带有？"></a>路径中带有？</h6><p>每一个<strong>?</strong>匹配单层路径中的一个字符 </p>
<p><strong>例：</strong>user/createUser??<br>​    匹配 /user/createUseraa、/user/createUserbb 等 URL</p>
</li>
<li><h6 id="路径中带有"><a href="#路径中带有" class="headerlink" title="路径中带有*"></a>路径中带有*</h6><p>匹配单层路径中的任意字符</p>
<p><strong>例：</strong>/user/*/createUser<br>​    匹配 /user/aaa/createUser、/user/bbb/createUser 等 URL</p>
</li>
<li><h6 id="路径中带有-1"><a href="#路径中带有-1" class="headerlink" title="路径中带有**"></a>路径中带有**</h6><p>匹配多层路径</p>
<p><strong>例：</strong>/user/**/createUser<br>​    匹配 /user/createUser、/user/aaa/bbb/createUser 等 URL</p>
</li>
</ol>
<h4 id="4-0-2-PathVariable"><a href="#4-0-2-PathVariable" class="headerlink" title="4.0.2. @PathVariable"></a>4.0.2. @PathVariable</h4><h5 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h5><p>可以将 <strong>URL 中占位符参数绑定到控制器处理方法的入参中</strong>,常用于REST风格的传值</p>
<h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testPathVariable/&#123;id&#125;"</span>)<span class="comment">//&#123;id&#125;只能占一层路径</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPathVariable</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer c)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testPathVariable...id="</span>+c);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-0-3-RequestParam"><a href="#4-0-3-RequestParam" class="headerlink" title="4.0.3. @RequestParam"></a>4.0.3. @RequestParam</h4><h5 id="简述-1"><a href="#简述-1" class="headerlink" title="简述"></a>简述</h5><p>该注解在处理方法的入参处使用，可以把请求参数传给方法入参，常用于普通传值</p>
<h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><h6 id="value-1"><a href="#value-1" class="headerlink" title="value"></a>value</h6><p>指定要获取的请求参数的Key</p>
<h6 id="required"><a href="#required" class="headerlink" title="required"></a>required</h6><p>请求参数是否必须。默认为true，表示请求参数里必须包含对应的参数，否则会抛异常</p>
<h6 id="defaultValue"><a href="#defaultValue" class="headerlink" title="defaultValue"></a>defaultValue</h6><p>默认值，当required=false且没有传递参数时使用该值。默认为null</p>
<h5 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testRequestParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestParam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@RequestParam(value=<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"age"</span>,required=<span class="keyword">false</span>,defaultValue=<span class="string">"0"</span>)</span> <span class="keyword">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testRequestParam - username="</span>+username +<span class="string">",age="</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-0-4-RequestHeader"><a href="#4-0-4-RequestHeader" class="headerlink" title="4.0.4. @RequestHeader"></a>4.0.4. @RequestHeader</h4><h5 id="简述-2"><a href="#简述-2" class="headerlink" title="简述"></a>简述</h5><p>将请求报头的指定属性值绑定到处理方法的入参上</p>
<h5 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h5><p>同@RequestParam   </p>
<h5 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testRequestHeader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestHeader</span><span class="params">(@RequestHeader(value=<span class="string">"Accept-Language"</span>)</span> String al)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testRequestHeader - Accept-Language："</span>+al);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-0-5-CookieValue"><a href="#4-0-5-CookieValue" class="headerlink" title="4.0.5. @CookieValue"></a>4.0.5. @CookieValue</h4><h5 id="简述-3"><a href="#简述-3" class="headerlink" title="简述"></a>简述</h5><p>将请求中的指定的 Cookie 值绑定到处理方法的入参上</p>
<h5 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h5><p>同@RequestParam</p>
<h5 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testCookieValue"</span>)<span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testCookieValue</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span> String sessionId) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testCookieValue: sessionId: "</span> + sessionId);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的@CookieValue(“JSESSIONID”)相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">"JESSIONID"</span>.euqals(c.getName())) &#123;</span><br><span class="line">            String cv = c.getValue();</span><br><span class="line">       &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-0-6-RequestMapping的组合注解"><a href="#4-0-6-RequestMapping的组合注解" class="headerlink" title="4.0.6. @RequestMapping的组合注解"></a>4.0.6. @RequestMapping的组合注解</h4><p>@GetMapping、@PostMapping、@PutMapping、@DeleteMapping</p>
<p>以@GetMapping为例，@GetMapping<strong>等同于</strong>@RequestMapping(method=RequestMethod.GET)</p>
<h3 id="4-1-参数封装"><a href="#4-1-参数封装" class="headerlink" title="4.1. 参数封装"></a>4.1. 参数封装</h3><h4 id="4-1-0-普通参数类型"><a href="#4-1-0-普通参数类型" class="headerlink" title="4.1.0. 普通参数类型"></a>4.1.0. 普通参数类型</h4><p>只要 <strong>请求参数的key</strong> 和 <strong>方法的参数名</strong> 一样，数据便会自动封装上。</p>
<p>若不一致，可在方法参数上添加@ReuquestParam注解，注解的<strong>value值</strong>还是要和<strong>请求参数的key</strong>一致</p>
<h4 id="4-1-1-数组类型"><a href="#4-1-1-数组类型" class="headerlink" title="4.1.1.数组类型"></a>4.1.1.数组类型</h4><p>同 普通参数类型</p>
<h4 id="4-1-2-POJO类型"><a href="#4-1-2-POJO类型" class="headerlink" title="4.1.2. POJO类型"></a>4.1.2. POJO类型</h4><ul>
<li>请求中的<strong>参数名</strong>、<strong>参数类型</strong>和方法参数的<strong>POJO</strong>里的<strong>属性名</strong>和<strong>属性类型</strong>要一一对应</li>
<li>自动匹配与方法<strong>参数名</strong>无关</li>
<li>请求中的参数可以比POJO里的属性少，但<strong>不能多</strong></li>
<li>支持级联属性</li>
</ul>
<h4 id="4-1-3-List集合类型"><a href="#4-1-3-List集合类型" class="headerlink" title="4.1.3. List集合类型"></a>4.1.3. List集合类型</h4><p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-SpringMVC/List%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E5%B0%81%E8%A3%85.png" alt="List集合"></p>
<h4 id="4-1-4-Map集合类型"><a href="#4-1-4-Map集合类型" class="headerlink" title="4.1.4. Map集合类型"></a>4.1.4. Map集合类型</h4><p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-SpringMVC/Map%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E5%B0%81%E8%A3%85.png" alt="Map集合"></p>
<h4 id="4-1-5-Json格式字符串"><a href="#4-1-5-Json格式字符串" class="headerlink" title="4.1.5. Json格式字符串"></a>4.1.5. Json格式字符串</h4><ol>
<li><p>导包</p>
<p>jackson-annotations-2.9.8.jar</p>
<p>jackson-core-2.9.8.jar</p>
<p>jackson-databind-2.9.8.jar</p>
</li>
<li><p>在Controller里的指定方法的参数前<strong>加@RequestBody</strong>，让SpringMVC去请求体中获取参数对象。参数对象的属性要和Json字符串里的key对应</p>
</li>
</ol>
<p>由于SpringMVC和SpringBoot默认支持jackson，所有我们在接受前端json格式的字符串的时候，就可以直接指定方法参数为对应的实体类类型，帮我们省略了将json字符串封装到对象中的步骤。</p>
<h3 id="4-2-使用Servlet-API"><a href="#4-2-使用Servlet-API" class="headerlink" title="4.2. 使用Servlet API"></a>4.2. 使用Servlet API</h3><p>SpringMVC支持调用原生Servlet API，Controller方法参数用ServletAPI类型的即可</p>
<p>可用的参数类型有：</p>
<p><strong>HttpServletRequest;HttpServletResponse;HttpSession;</strong></p>
<p>java.security.Principal;Locale;InputStream;OutputStream;Reader;Writer</p>
<h3 id="4-3-静态资源的处理"><a href="#4-3-静态资源的处理" class="headerlink" title="4.3. 静态资源的处理"></a>4.3. 静态资源的处理</h3><h4 id="处理方式一"><a href="#处理方式一" class="headerlink" title="处理方式一"></a>处理方式一</h4><p>在web.xml中配DispatcherServlet时，限定其拦截格式，没有被拦截的则交给<strong>默认Servlet</strong>处理</p>
<p>缺点：不符合REST风格</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="处理方式二-常用"><a href="#处理方式二-常用" class="headerlink" title="处理方式二(常用)"></a>处理方式二(常用)</h4><p>springmvc的配置文件中配两个标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="处理方式三"><a href="#处理方式三" class="headerlink" title="处理方式三"></a>处理方式三</h4><p>springmvc的配置文件中配一个&lt;mvc:resources/&gt;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置静态资源映射</span></span><br><span class="line"><span class="comment"> 	 mapping:请求路径规则</span></span><br><span class="line"><span class="comment">	 location:满足路径规则后，去哪找静态资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/pages/*"</span> <span class="attr">location</span>=<span class="string">"/pages"</span>/&gt;</span><span class="comment">&lt;!-- *代表一层路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/pages/**"</span> <span class="attr">location</span>=<span class="string">"/pages"</span>/&gt;</span><span class="comment">&lt;!-- **代表多层路径 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-数据输出"><a href="#5-数据输出" class="headerlink" title="5. 数据输出"></a>5. 数据输出</h2><p>除了在方法参数上传入原生的ServletAPI，Spring还提供了几种途径输出数据模型</p>
<h3 id="5-1-方法参数为Map、Model或ModelMap"><a href="#5-1-方法参数为Map、Model或ModelMap" class="headerlink" title="5.1. 方法参数为Map、Model或ModelMap"></a>5.1. 方法参数为Map、Model或ModelMap</h3><p>Controller方法参数为Map、ModelMap或Model 时，最终都是BindingAwareModelMap工作。</p>
<p>里面保存的数据会放在请求域中，可以在页面进行获取。</p>
<h3 id="5-2-方法返回值类型为ModelAndView"><a href="#5-2-方法返回值类型为ModelAndView" class="headerlink" title="5.2. 方法返回值类型为ModelAndView"></a>5.2. 方法返回值类型为ModelAndView</h3><p>ModelAndView既包含视图信息（页面地址）也包含模型数据（给页面带的数据）。数据仍放在了请求域中</p>
<p>可在jsp页面用 JSTL 和 EL 表达式取出</p>
<h4 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAndView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过构造方法指定返回的页面名称，也可以用setViewName()方法跳转到指定页面</span></span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"success"</span>);</span><br><span class="line">    mv.addObject(<span class="string">"time"</span>,<span class="keyword">new</span> Date().toString()); <span class="comment">//实质上存放到request域中 </span></span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-方法返回值类型为String"><a href="#5-3-方法返回值类型为String" class="headerlink" title="5.3. 方法返回值类型为String"></a>5.3. 方法返回值类型为String</h3><h4 id="5-3-0-跳转到jsp页面"><a href="#5-3-0-跳转到jsp页面" class="headerlink" title="5.3.0. 跳转到jsp页面"></a>5.3.0. 跳转到jsp页面</h4><h5 id="示例一："><a href="#示例一：" class="headerlink" title="示例一："></a>示例一：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/stringPage"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testStringPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法参数为空，返回jsp页面，且不携带数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例二："><a href="#示例二：" class="headerlink" title="示例二："></a>示例二：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/stringPage"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testStringPage</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//参数类型为Model类型，返回jsp页面，用model携带了数据</span></span><br><span class="line">    model.addAttribute(<span class="string">"msg"</span>, <span class="string">"测试"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例三："><a href="#示例三：" class="headerlink" title="示例三："></a>示例三：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/stringPage"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testStringPage</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//参数类型为Map类型，返回jsp页面，用map携带了数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-1-将字符串返回到页面上"><a href="#5-3-1-将字符串返回到页面上" class="headerlink" title="5.3.1. 将字符串返回到页面上"></a>5.3.1. 将字符串返回到页面上</h4><h5 id="示例一：-1"><a href="#示例一：-1" class="headerlink" title="示例一："></a>示例一：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//使用后不会再走视图处理器，而是直接将数据写入到输入流中，将返回值输出到了页面</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testString"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"string"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例二：-1"><a href="#示例二：-1" class="headerlink" title="示例二："></a>示例二：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//使用后不会再走视图处理器，而是直接将数据写入到输入流中，将返回值输出到了页面</span></span><br><span class="line"><span class="meta">@GetMapping</span>(value=<span class="string">"/testString"</span>, produces=<span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"测试"</span>;<span class="comment">//中文乱码用@GetMapping的produces属性解决了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-2-转发和重定向"><a href="#5-3-2-转发和重定向" class="headerlink" title="5.3.2. 转发和重定向"></a>5.3.2. 转发和重定向</h4><p>一般情况下，控制器方法返回字符串类型的值会被当成逻辑视图名处理。如果返回的字符串中带<code>forward:</code>或 <code>redirect:</code>前缀时，SpringMVC 会对他们进行特殊处理：将 <code>forward:</code>和 <code>redirect:</code>当成指示符，其后的字符串作为 URL 来处理</p>
<h5 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testForward"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForwad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:string"</span>;<span class="comment">//转发到url为string的请求中，还可以直接在后面写具体的静态资源名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testRedirect"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForwad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:string"</span>;<span class="comment">//重定向到url为string的请求中，还可以直接在后面写具体的静态资源名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-方法返回值为void（无返回值）"><a href="#5-4-方法返回值为void（无返回值）" class="headerlink" title="5.4. 方法返回值为void（无返回值）"></a>5.4. 方法返回值为void（无返回值）</h3><p>方法返回值为void，访问地址就变成了响应的视图页面。</p>
<h4 id="示例：-5"><a href="#示例：-5" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVoid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//无返回值，默认找的是 配置路径 下的 '路径'+.jsp页面</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所以一般可以在无返回值的方法里转发或重定向</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testVoid"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVoid02</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// request.getRequestDIspatcher("string").forward(request, response);</span></span><br><span class="line">    response.sendRedirect(<span class="string">"string"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-方法返回值为自定义对象"><a href="#5-5-方法返回值为自定义对象" class="headerlink" title="5.5. 方法返回值为自定义对象"></a>5.5. 方法返回值为自定义对象</h3><p>需要jackson的支持和@ResponseBody，将对象转成了json，实际返回的是json格式的字符串</p>
<h4 id="示例：-6"><a href="#示例：-6" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/object"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//不加该注解的话逻辑视图名为object.jsp,即返回的是object.jsp页面</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">testObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student stu = <span class="keyword">new</span> Student(<span class="number">11</span>, <span class="string">"张三"</span>);</span><br><span class="line">    <span class="keyword">return</span> stu;<span class="comment">//加了@ResponseBody并导了jackson相关的包，返回的便是json格式的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-6-方法返回值为ResponseEntity"><a href="#5-6-方法返回值为ResponseEntity" class="headerlink" title="5.6. 方法返回值为ResponseEntity"></a>5.6. 方法返回值为ResponseEntity</h3><h4 id="示例：-7"><a href="#示例：-7" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ResponseEntity内部提供状态码</span></span><br><span class="line"><span class="comment"> * 所以既能携带数据，又能携带状态码</span></span><br><span class="line"><span class="comment"> * 返回的也是Json格式的字符串</span></span><br><span class="line"><span class="comment"> * 依赖jackson，使用时不需加<span class="doctag">@ResponseBody</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/responseEntity"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">testentity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student stu = <span class="keyword">new</span> Student(<span class="number">11</span>, <span class="string">"张三"</span>);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(stu);</span><br><span class="line">    <span class="comment">// 或使用这种写法，跟上面的那行表示的意思是一样的</span></span><br><span class="line">    <span class="comment">// return ResponseEntity.ok(stu);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-乱码问题"><a href="#6-乱码问题" class="headerlink" title="6. 乱码问题"></a>6. 乱码问题</h2><h4 id="6-0-参数格式为key-value格式时的乱码"><a href="#6-0-参数格式为key-value格式时的乱码" class="headerlink" title="6.0. 参数格式为key-value格式时的乱码"></a>6.0. 参数格式为key-value格式时的乱码</h4><h5 id="6-0-0-GET请求乱码"><a href="#6-0-0-GET请求乱码" class="headerlink" title="6.0.0. GET请求乱码"></a>6.0.0. GET请求乱码</h5><p>GET请求在tomcat 8 版本以上不乱码，8版本以下乱码</p>
<h6 id="1-解决方式一"><a href="#1-解决方式一" class="headerlink" title="1. 解决方式一"></a>1. 解决方式一</h6><p>接收参数后，用如下方式自己转一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(username.getBytes(<span class="string">"ISO‐8859‐1"</span>), <span class="string">"utf‐8"</span>);</span><br></pre></td></tr></table></figure>

<h6 id="2-解决方式二"><a href="#2-解决方式二" class="headerlink" title="2. 解决方式二"></a>2. 解决方式二</h6><p>为tomcat中的config目录下 server.xml  添加  URIEncoding=”utf‐8”。</p>
<p>如果有useBodyEncodingForURI=”true”，注释掉</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span>         </span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span>         </span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span>         </span></span><br><span class="line"><span class="tag">           <span class="attr">disableUploadTimeout</span>=<span class="string">"true"</span>         </span></span><br><span class="line"><span class="tag">           <span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span>         </span></span><br><span class="line"><span class="tag">           <span class="attr">URIEncoding</span>=<span class="string">"utf‐8"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="6-0-1-POST请求乱码"><a href="#6-0-1-POST请求乱码" class="headerlink" title="6.0.1. POST请求乱码"></a>6.0.1. POST请求乱码</h5><p>web.xml文件中配置字符编码过滤器，<strong>该过滤器需在其他过滤器的前面</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--CharacterEncodingFilter 在高版本的Spring中是可以解决 GET请求 和POST请求</span></span><br><span class="line"><span class="comment">    低版本,比如说4.X中 只能解决POST请求  不能解决GET请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- encoding：指定解决POST请求乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- forceEncoding：解决响应乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-1-参数格式为Json格式时的乱码"><a href="#6-1-参数格式为Json格式时的乱码" class="headerlink" title="6.1. 参数格式为Json格式时的乱码"></a>6.1. 参数格式为Json格式时的乱码</h4><p>请求参数为Json格式时，因为走了jackson，所以没有乱码问题</p>
<h4 id="6-2-响应乱码"><a href="#6-2-响应乱码" class="headerlink" title="6.2. 响应乱码"></a>6.2. 响应乱码</h4><h5 id="字符串乱码"><a href="#字符串乱码" class="headerlink" title="字符串乱码"></a>字符串乱码</h5><p>通过设定@XxxMapping里的produces属性来避免字符串乱码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该方式不走jackson</span></span><br><span class="line"><span class="meta">@GetMapping</span>(value=<span class="string">"/test"</span>, produces=<span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//有该注解便可将字符串返回给页面</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"测试字符串"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Json格式乱码"><a href="#Json格式乱码" class="headerlink" title="Json格式乱码"></a>Json格式乱码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该方式走了jackson，jackson把乱码问题解决了</span></span><br><span class="line"><span class="meta">@GetMapping</span>(value=<span class="string">"/student"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//有该注解便可通过jackson将Student对象转成json字符串返给前端</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">testString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student stu = <span class="keyword">new</span> Student(<span class="number">11</span>, <span class="string">"张三"</span>);</span><br><span class="line">    <span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-REST风格的URL地址约束"><a href="#7-REST风格的URL地址约束" class="headerlink" title="7. REST风格的URL地址约束"></a>7. REST风格的URL地址约束</h2><p>表述性状态传递（Representational State Transfer，简称REST）。以简洁的URL提交请求，以请求方式区分对资源的操作</p>
<p>GET请求：获取数据；POST请求：登录和添加数据；DELETE请求：删除操作；PUT请求：修改操作。</p>
<p>浏览器可以发送GET和POST请求。DELETE和PUT请求需要转换</p>
<h3 id="转换步骤"><a href="#转换步骤" class="headerlink" title="转换步骤"></a>转换步骤</h3><h4 id="1-web-xml中配置过滤器"><a href="#1-web-xml中配置过滤器" class="headerlink" title="1. web.xml中配置过滤器"></a>1. web.xml中配置过滤器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-前端代码"><a href="#2-前端代码" class="headerlink" title="2. 前端代码"></a>2. 前端代码</h4><p>需满足几个条件：</p>
<p>1、前端请求必须为POST；</p>
<p>2、请求时必须要携带一个隐藏域，其参数名称为_method；参数值必须为PUT或DELETE(不区分大小写)</p>
<p>注意点：8.0版本tomcat会在jsp页面报405异常</p>
<p>解决方式：需在jsp页面中头标签中添加 isErrorpage=”true”属性；<code>&lt;%@ …… page isErrorPage=&quot;true&quot;%&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以PUT请求为例，测试 REST风格 PUT 请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"springmvc/testRESTPut/1"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"PUT"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"13"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"restPath"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-后端代码"><a href="#3-后端代码" class="headerlink" title="3. 后端代码"></a>3. 后端代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(value=<span class="string">"/restPath/&#123;name&#125;/&#123;age&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testREST</span><span class="params">(@PathVarible(<span class="string">"name"</span>)</span>sname, @<span class="title">PathVarible</span><span class="params">(<span class="string">"age"</span>)</span>sage) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"sanme="</span> + sname + <span class="string">";sage"</span> + sage);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-视图和视图解析器"><a href="#8-视图和视图解析器" class="headerlink" title="8. 视图和视图解析器"></a>8. 视图和视图解析器</h2><h3 id="8-0-视图"><a href="#8-0-视图" class="headerlink" title="8.0. 视图"></a>8.0. 视图</h3><p>视图对象由视图解析器负责实例化。由于视图是无状态的，所以不会有线程安全的问题</p>
<p>视图的顶级接口为View</p>
<h4 id="8-0-0-常用视图实现类图示"><a href="#8-0-0-常用视图实现类图示" class="headerlink" title="8.0.0. 常用视图实现类图示"></a>8.0.0. 常用视图实现类图示</h4><p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-SpringMVC/%E8%A7%86%E5%9B%BEView%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" alt="View实现类"></p>
<h3 id="8-1-视图解析器"><a href="#8-1-视图解析器" class="headerlink" title="8.1. 视图解析器"></a>8.1. 视图解析器</h3><p>视图解析器根据方法的返回值得到视图对象。ViewResolver 是其顶级接口</p>
<h4 id="8-1-0-常用视图解析器图示"><a href="#8-1-0-常用视图解析器图示" class="headerlink" title="8.1.0. 常用视图解析器图示"></a>8.1.0. 常用视图解析器图示</h4><p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-SpringMVC/%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8ViewResolver%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" alt="ViewResolver实现类"></p>
<h3 id="8-2-其它"><a href="#8-2-其它" class="headerlink" title="8.2. 其它"></a>8.2. 其它</h3><p>若想直接响应通过 SpringMVC 渲染的页面，而不经过Controller来执行结果，可在SpringMVC的配置文件中添加<strong>&lt;mvc:view-controller/&gt;</strong>标签。</p>
<h4 id="8-2-0-示例："><a href="#8-2-0-示例：" class="headerlink" title="8.2.0. 示例："></a>8.2.0. 示例：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/success"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-2-1-注意点"><a href="#8-2-1-注意点" class="headerlink" title="8.2.1. 注意点"></a>8.2.1. 注意点</h4><p>配置<strong>&lt;mvc:view-controller/&gt;</strong>会导致其他请求路径失效。解决方式：再配一个<strong>&lt;mvc:annotation-driven/&gt;</strong>标签</p>
<h2 id="9-国际化"><a href="#9-国际化" class="headerlink" title="9. 国际化"></a>9. 国际化</h2><p>针对不同的国家进行不同的视图显示，JstlView可以解析Jstl语言进行国际化操作</p>
<h3 id="9-0-实现步骤"><a href="#9-0-实现步骤" class="headerlink" title="9.0. 实现步骤"></a>9.0. 实现步骤</h3><h4 id="9-0-0-创建资源文件"><a href="#9-0-0-创建资源文件" class="headerlink" title="9.0.0. 创建资源文件"></a>9.0.0. 创建资源文件</h4><p>资源文件的命名规范：基名_语言_国家.properties</p>
<p>例：base_zh_CN.properties；i18n_zh_CN.properties</p>
<h4 id="9-0-1-springmvc-xml中配置特定-lt-bean-gt-标签"><a href="#9-0-1-springmvc-xml中配置特定-lt-bean-gt-标签" class="headerlink" title="9.0.1. springmvc.xml中配置特定&lt;bean/&gt;标签"></a>9.0.1. springmvc.xml中配置特定&lt;bean/&gt;标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载国际化资源文件 bean的id="messageSource",是固定的，因为springMVC在启动时会自动查询这个bean并加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span><span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"i18n"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="9-0-2-导包，配fmt标签"><a href="#9-0-2-导包，配fmt标签" class="headerlink" title="9.0.2. 导包，配fmt标签"></a>9.0.2. 导包，配fmt标签</h4><p>要导的包：jstl.jar和standard.jar</p>
<p>在具体的jsp页面里导入jstl下的fmt名称空间，并书写相应的标签。</p>
<p>&lt;fmt:message key=”resource.welcome”/&gt;</p>
<h2 id="10-文件上传"><a href="#10-文件上传" class="headerlink" title="10. 文件上传"></a>10. 文件上传</h2><p>流行的文件上传方式：提交表单（包括异步）的方式；Base64的方式</p>
<h3 id="10-0-文件上传之提交表单"><a href="#10-0-文件上传之提交表单" class="headerlink" title="10.0. 文件上传之提交表单"></a>10.0. 文件上传之提交表单</h3><p>提交表单的三要素：</p>
<ul>
<li>前端请求必须为POST</li>
<li>前端必须要有<strong>&lt;input tupe=”file”/&gt;</strong></li>
<li>form标签里必须要有enctype属性，且<code>enctype=&quot;mutlipart/form-data&quot;</code>。</li>
</ul>
<h4 id="10-0-0-文件上传之Part的方式"><a href="#10-0-0-文件上传之Part的方式" class="headerlink" title="10.0.0. 文件上传之Part的方式"></a>10.0.0. 文件上传之Part的方式</h4><p>该方式只导个servlet-api.jar，不需配置任何视图解析器</p>
<h5 id="单文件Part上传"><a href="#单文件Part上传" class="headerlink" title="单文件Part上传"></a>单文件Part上传</h5><h6 id="1-编写前端页面"><a href="#1-编写前端页面" class="headerlink" title="1. 编写前端页面"></a>1. 编写前端页面</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传图片"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="2-添加配置信息"><a href="#2-添加配置信息" class="headerlink" title="2. 添加配置信息"></a>2. 添加配置信息</h6><p>在<strong>web.xml中</strong>的DispatcherServlet中添加一个<strong>&lt;multipart-config/&gt;</strong>标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	......</span><br><span class="line">    <span class="comment">&lt;!-- 单位Byte --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">max-file-size</span>&gt;</span>20848820<span class="tag">&lt;/<span class="name">max-file-size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">max-request-size</span>&gt;</span>418018841<span class="tag">&lt;/<span class="name">max-request-size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file-size-threshold</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">file-size-threshold</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="3-编写Controller类"><a href="#3-编写Controller类" class="headerlink" title="3.编写Controller类"></a>3.编写Controller类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123; </span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    	Part file = request.getPart(<span class="string">"image"</span>);</span><br><span class="line">        String realPath = request.getServletContext().getRealPath(<span class="string">"/WEB-INF/"</span>);</span><br><span class="line">        file.write(realPath + file.getSubmittedFileName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="多文件Part上传"><a href="#多文件Part上传" class="headerlink" title="多文件Part上传"></a>多文件Part上传</h5><h6 id="1-编写前端页面-1"><a href="#1-编写前端页面-1" class="headerlink" title="1. 编写前端页面"></a>1. 编写前端页面</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 相比单文件上传该标签里多了一个multiple属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">multiple</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传图片"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="2-添加配置信息-1"><a href="#2-添加配置信息-1" class="headerlink" title="2. 添加配置信息"></a>2. 添加配置信息</h6><p>在<strong>web.xml中</strong>的DispatcherServlet中添加一个<strong>&lt;multipart-config/&gt;</strong>标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	......</span><br><span class="line">    <span class="comment">&lt;!-- 单位Byte --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">max-file-size</span>&gt;</span>20848820<span class="tag">&lt;/<span class="name">max-file-size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">max-request-size</span>&gt;</span>418018841<span class="tag">&lt;/<span class="name">max-request-size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file-size-threshold</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">file-size-threshold</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="3-编写Controller类-1"><a href="#3-编写Controller类-1" class="headerlink" title="3. 编写Controller类"></a>3. 编写Controller类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    	Collection&lt;Part&gt; parts = request.getParts();</span><br><span class="line">        String realPath = request.getServletContext().getRealPath(<span class="string">"/WEB-INF/"</span>);</span><br><span class="line">        parts.forEach(part -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                part.write(realPath + file.getSubmittedFileName());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="10-0-1-多文件上传之SpringMVC"><a href="#10-0-1-多文件上传之SpringMVC" class="headerlink" title="10.0.1. 多文件上传之SpringMVC"></a>10.0.1. 多文件上传之SpringMVC</h4><p>该方式也是以表单的方式上传的，单文件上传和多文件上传差不多，就不写了。</p>
<p>需要导jar包，配多媒体视图解析器</p>
<h5 id="1-导jar包"><a href="#1-导jar包" class="headerlink" title="1. 导jar包"></a>1. 导jar包</h5><p>commons-io-1.4.jar和commons-fileupload-1.2.1.jar</p>
<h5 id="2-配置多媒体视图解析器"><a href="#2-配置多媒体视图解析器" class="headerlink" title="2. 配置多媒体视图解析器"></a>2. 配置多媒体视图解析器</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 其id值固定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 上传文件的最大值，单位Byte;如果-1，表示无限制 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span>  <span class="attr">value</span>=<span class="string">"102400"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-前端页面"><a href="#3-前端页面" class="headerlink" title="3. 前端页面"></a>3. 前端页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"files"</span> <span class="attr">multiple</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-编写Controller类"><a href="#4-编写Controller类" class="headerlink" title="4. 编写Controller类"></a>4. 编写Controller类</h5><p>注：<strong>MultipartFile数组的名字需要和前端页面的&lt;input type=”file”&gt;标签的name值一致</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(HttpServletRequest request, MultipartFile[] files)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    	String realPath = request.getServletContext().getRealPath(<span class="string">"/WEB-INF/images/"</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">            String fileName = files[i].getOriginalFilename();</span><br><span class="line">            files[i].transferTo(<span class="keyword">new</span> File(file, fileName));</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-文件下载"><a href="#11-文件下载" class="headerlink" title="11. 文件下载"></a>11. 文件下载</h2><h3 id="11-0-下载方式一"><a href="#11-0-下载方式一" class="headerlink" title="11.0. 下载方式一"></a>11.0. 下载方式一</h3><p>直接在前端给出下载链接</p>
<h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/download/测试.xlsx"</span>&gt;</span>下载表格<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="springmvc-xml添加配置"><a href="#springmvc-xml添加配置" class="headerlink" title="springmvc.xml添加配置"></a>springmvc.xml添加配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="11-1-下载方式二"><a href="#11-1-下载方式二" class="headerlink" title="11.1. 下载方式二"></a>11.1. 下载方式二</h3><h4 id="前端页面-1"><a href="#前端页面-1" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此链接请求的是后端的Controlelr --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/download"</span>&gt;</span>点此下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; testDownload(HttpServletRequest request)</span><br><span class="line">    <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    String realPath = request.getServletContext().getRealPath(<span class="string">"/download/测试.docx"</span>);</span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">    String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">"\\"</span>) + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    <span class="comment">// 第一个参数，固定值attachment；第二个参数为文件名，会出现乱码问题，用URLEncoder.encode(fileName, "utf-8")处理一下</span></span><br><span class="line">    headers.setContentDispositionFormData(<span class="string">"attachment"</span>, URLEncoder.encode(fileName, <span class="string">"utf-8"</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用ResponseEntity返给前端一个字节数组</span></span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; entity = <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(buffer, headers, HttpStatus.OK);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="12-类型转换"><a href="#12-类型转换" class="headerlink" title="12. 类型转换"></a>12. 类型转换</h2><h3 id="12-0-key-value格式转Date"><a href="#12-0-key-value格式转Date" class="headerlink" title="12.0. key-value格式转Date"></a>12.0. key-value格式转Date</h3><h4 id="解决方式一（局部配置）"><a href="#解决方式一（局部配置）" class="headerlink" title="解决方式一（局部配置）"></a>解决方式一（局部配置）</h4><p>在实体类的Date属性上添加@DateTimeFormat注解。</p>
<p>例：@DateTimeFormat(pattern=”yyyy-MM-dd”)</p>
<p>​    或@DateTimeFormat(pattern=”<strong>yyyy-MM-ddTHH:mm:ss</strong>“)</p>
<p>缺点：需要转换的属性都要加注解，做不到统一维护</p>
<h4 id="解决方式二-全局配置"><a href="#解决方式二-全局配置" class="headerlink" title="解决方式二(全局配置)"></a>解决方式二(全局配置)</h4><h5 id="1-新建类型转换器"><a href="#1-新建类型转换器" class="headerlink" title="1. 新建类型转换器"></a>1. 新建类型转换器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Converter ，下面的泛型表示将String转换成Date类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConvert</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>,<span class="title">Date</span>&gt; </span>&#123;     </span><br><span class="line">    <span class="meta">@Override</span>   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;       </span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy‐MM‐dd"</span>);       </span><br><span class="line">        <span class="keyword">try</span> &#123;           </span><br><span class="line">            Date parse = sdf.parse(s);           </span><br><span class="line">            <span class="keyword">return</span> parse;       </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123; </span><br><span class="line">            SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd"</span>);           </span><br><span class="line">         	<span class="keyword">try</span> &#123; </span><br><span class="line">                <span class="keyword">return</span> sdf1.parse(s);           </span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e1) &#123;</span><br><span class="line">              e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-SpringMVC配置文件中配置转换器"><a href="#2-SpringMVC配置文件中配置转换器" class="headerlink" title="2. SpringMVC配置文件中配置转换器"></a>2. SpringMVC配置文件中配置转换器</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"conventers"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xxx.cn.MyConvert"</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将conversionService注册到annotation-driven中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation‐driven</span> <span class="attr">conversion</span>‐<span class="attr">service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="12-1-Json格式转Date"><a href="#12-1-Json格式转Date" class="headerlink" title="12.1. Json格式转Date"></a>12.1. Json格式转Date</h3><h4 id="解决方式一（局部配置）-1"><a href="#解决方式一（局部配置）-1" class="headerlink" title="解决方式一（局部配置）"></a>解决方式一（局部配置）</h4><h5 id="1-导包"><a href="#1-导包" class="headerlink" title="1. 导包"></a>1. 导包</h5><p>jackson-annotations-2.9.8.jar；jackson-core-2.9.8.jar；jackson-databind-2.9.8.jar</p>
<h5 id="2-加注解"><a href="#2-加注解" class="headerlink" title="2. 加注解"></a>2. 加注解</h5><p>在相应的Date属性上加@JsonFormat注解，且能在注解的值内自定义日期格式。</p>
<p><strong>不加注解的话</strong>，也能通过jackson转换，默认支持yyyy-MM-dd<strong>T</strong>HH:mm:ss和yyyy-MM-dd 格式的转换</p>
<h4 id="解决方式二-全局配置-1"><a href="#解决方式二-全局配置-1" class="headerlink" title="解决方式二(全局配置)"></a>解决方式二(全局配置)</h4><p>使用该种配置，不仅支持Json参数转Date类型，也支持Date类型转Json。</p>
<h5 id="1-导包-1"><a href="#1-导包-1" class="headerlink" title="1. 导包"></a>1. 导包</h5><p>jackson-annotations-2.9.8.jar；jackson-core-2.9.8.jar；jackson-databind-2.9.8.jar</p>
<h5 id="2-springmvc的配置文件"><a href="#2-springmvc的配置文件" class="headerlink" title="2. springmvc的配置文件"></a>2. springmvc的配置文件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation‐driven</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message‐converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span> <span class="attr">ref</span>=<span class="string">"objectMapper"</span>/&gt;</span>             </span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message‐converters</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation‐driven</span>&gt;</span>       </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"objectMapper"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:indentOutput</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">p:simpleDateFormat</span>=<span class="string">"yyyy‐MM‐dd HH:mm:ss"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="12-2-key-value格式转LocalDate-amp-LocalDateTime"><a href="#12-2-key-value格式转LocalDate-amp-LocalDateTime" class="headerlink" title="12.2. key-value格式转LocalDate&amp;LocalDateTime"></a>12.2. key-value格式转LocalDate&amp;LocalDateTime</h3><h4 id="解决方式一-局部配置"><a href="#解决方式一-局部配置" class="headerlink" title="解决方式一(局部配置)"></a>解决方式一(局部配置)</h4><p>在实体类的Date属性上添加@DateTimeFormat注解。</p>
<p>例：@DateTimeFormat(pattern=”yyyy-MM-dd”)(不能加在LocalDateTime上)</p>
<p>​    @DateTimeFormat(pattern=”<strong>yyyy-MM-dd HH:mm:ss</strong>“)(两种类型都可加)</p>
<p>缺点：需要转换的属性都要加注解，做不到统一维护</p>
<h4 id="解决方式二-全局配置-2"><a href="#解决方式二-全局配置-2" class="headerlink" title="解决方式二(全局配置)"></a>解决方式二(全局配置)</h4><h5 id="1-定义两个类型转换器-Convert"><a href="#1-定义两个类型转换器-Convert" class="headerlink" title="1. 定义两个类型转换器(Convert)"></a>1. 定义两个类型转换器(Convert)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConvert1</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>,<span class="title">LocalDateTime</span>&gt; </span>&#123;     </span><br><span class="line">    <span class="meta">@Override</span>     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.parse(s,DateTimeFormatter.ofPattern(<span class="string">"yyyy‐MM‐dd  HH:mm:ss"</span>));     </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConvert2</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>,<span class="title">LocalDate</span>&gt; </span>&#123;     </span><br><span class="line">    <span class="meta">@Override</span>     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDate.parse(s,DateTimeFormatter.ofPattern(<span class="string">"yyyy‐MM‐dd"</span>));     </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-配置转换器"><a href="#2-配置转换器" class="headerlink" title="2.配置转换器"></a>2.配置转换器</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span>               </span><br><span class="line">    	<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处放置的为内部bean。也可在外部定义，内部来引用 --&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.shangma.cn.MyConvert1"</span>/&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.shangma.cn.MyConvert2"</span>/&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">set</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将conversionService注册到annotation-driven中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation‐driven</span> <span class="attr">conversion</span>‐<span class="attr">service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="12-3-Json格式转LocalDate-amp-LocalDateTime"><a href="#12-3-Json格式转LocalDate-amp-LocalDateTime" class="headerlink" title="12.3. Json格式转LocalDate&amp;LocalDateTime"></a>12.3. Json格式转LocalDate&amp;LocalDateTime</h3><h4 id="解决方式一"><a href="#解决方式一" class="headerlink" title="解决方式一"></a>解决方式一</h4><h5 id="1-导包-2"><a href="#1-导包-2" class="headerlink" title="1. 导包"></a>1. 导包</h5><p>jackson-annotations-2.9.8.jar；jackson-core-2.9.8.jar</p>
<p>jackson-databind-2.9.8.jar；<strong>jackson-datatype-jsr310-2.9.8.jar</strong></p>
<h5 id="2-加注解-1"><a href="#2-加注解-1" class="headerlink" title="2. 加注解"></a>2. 加注解</h5><p>@JsonFormat(pattern=”yyyy-MM-dd”)(不能加在LocalDateTime上)</p>
<p>@JsonFormat(pattern=”<strong>yyyy-MM-dd HH:mm:ss</strong>“)(两种类型都可加)</p>
<p><strong>不加注解的话</strong>，也能通过jackson转换，默认支持yyyy-MM-dd HH:mm:ss和yyyy-MM-dd 格式的转换</p>
<h4 id="解决方式二"><a href="#解决方式二" class="headerlink" title="解决方式二"></a>解决方式二</h4><h5 id="1-导包-3"><a href="#1-导包-3" class="headerlink" title="1. 导包"></a>1. 导包</h5><p>jackson-annotations-2.9.8.jar；jackson-core-2.9.8.jar</p>
<p>jackson-databind-2.9.8.jar；<strong>jackson-datatype-jsr310-2.9.8.jar</strong></p>
<h5 id="2-SpringMVC配置文件"><a href="#2-SpringMVC配置文件" class="headerlink" title="2. SpringMVC配置文件"></a>2. SpringMVC配置文件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation‐driven</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message‐converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span>                 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span> <span class="attr">ref</span>=<span class="string">"objectMapper"</span>/&gt;</span>             </span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message‐converters</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation‐driven</span>&gt;</span>       </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"objectMapper"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:indentOutput</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">p:modules-ref</span>=<span class="string">"module"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"module"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.fastxml.jackson.datatype.jsr310.JavaTimeModule"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="12-4-Date-amp-LocalDate-amp-LocalDateTime转Json"><a href="#12-4-Date-amp-LocalDate-amp-LocalDateTime转Json" class="headerlink" title="12.4. Date&amp;LocalDate&amp;LocalDateTime转Json"></a>12.4. Date&amp;LocalDate&amp;LocalDateTime转Json</h3><p>局部解决方式</p>
<h4 id="1-导包-4"><a href="#1-导包-4" class="headerlink" title="1. 导包"></a>1. 导包</h4><p>jackson-annotations-2.9.8.jar；jackson-core-2.9.8.jar</p>
<p>jackson-databind-2.9.8.jar；<strong>jackson-datatype-jsr310-2.9.8.jar</strong></p>
<h4 id="2-加注解-2"><a href="#2-加注解-2" class="headerlink" title="2. 加注解"></a>2. 加注解</h4><p>@JsonFormat(pattern=”yyyy-MM-dd”)(不能加在LocalDateTime上)</p>
<p>@JsonFormat(pattern=”<strong>yyyy-MM-dd HH:mm:ss</strong>“)(两种类型都可加)</p>
<p><strong>不加注解的话</strong>，时间类型会转成<strong>Json格式的时间辍</strong></p>
<h2 id="13-拦截器"><a href="#13-拦截器" class="headerlink" title="13. 拦截器"></a>13. 拦截器</h2><h3 id="13-0-使用步骤"><a href="#13-0-使用步骤" class="headerlink" title="13.0. 使用步骤"></a>13.0. 使用步骤</h3><h4 id="1-创建自定义拦截器"><a href="#1-创建自定义拦截器" class="headerlink" title="1. 创建自定义拦截器"></a>1. 创建自定义拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstInteceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;       </span><br><span class="line">    <span class="comment">// Controller方法执行前执行       </span></span><br><span class="line">    <span class="comment">//返回false  程序不往下执行     </span></span><br><span class="line">    <span class="comment">// 返回true  程序继续往下执行 类似放行的意思     </span></span><br><span class="line">    <span class="meta">@Override</span>     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                             HttpServletResponse response,  Object handler)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle执行了"</span>);         </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Controller 方法执行完成后 还没有返回视图时执行   </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                           HttpServletResponse response, </span></span></span><br><span class="line"><span class="function"><span class="params">                           Object  handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postHandle执行了"</span>);   </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="comment">//请求和响应都完成了才执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                               	HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Object handler,Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion执行了"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-配置springmvc-xml文件"><a href="#2-配置springmvc-xml文件" class="headerlink" title="2. 配置springmvc.xml文件"></a>2. 配置springmvc.xml文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置具体的拦截路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定拦截的路径,基于ant风格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 指定不拦截的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/handler/testUpload"</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"org.lanqiao.interceptor.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置具体的拦截路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定拦截的路径,基于ant风格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定不拦截的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/handler/testUpload"</span>/&gt;</span> </span><br><span class="line">        	<span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"org.lanqiao.interceptor.MySecondInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="14-异常处理"><a href="#14-异常处理" class="headerlink" title="14. 异常处理"></a>14. 异常处理</h2><h3 id="14-0-处理方式一"><a href="#14-0-处理方式一" class="headerlink" title="14.0. 处理方式一"></a>14.0. 处理方式一</h3><h5 id="1-指定错误页面"><a href="#1-指定错误页面" class="headerlink" title="1. 指定错误页面"></a>1. 指定错误页面</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;error-page&gt;</span><br><span class="line">	&lt;location&gt;/WEB-INF/pages/error.jsp&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-异常时会跳转到该页面"><a href="#2-异常时会跳转到该页面" class="headerlink" title="2. 异常时会跳转到该页面"></a>2. 异常时会跳转到该页面</h5><p>缺点：页面固定，传值麻烦</p>
<h3 id="14-1-处理方式二"><a href="#14-1-处理方式二" class="headerlink" title="14.1. 处理方式二"></a>14.1. 处理方式二</h3><p>缺点：虽然可以动态显示错误信息 但是只能返回jsp页面 想要返回html页面 需要依赖模板引擎 </p>
<h5 id="1-创建异常处理类"><a href="#1-创建异常处理类" class="headerlink" title="1. 创建异常处理类"></a>1. 创建异常处理类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">// 使用注解加入到容器当中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHander</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolverException</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletRequest httpServletRequest, </span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletResponse httpServletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">        Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>, e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-修改error-jsp"><a href="#2-修改error-jsp" class="headerlink" title="2. 修改error.jsp"></a>2. 修改error.jsp</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	$&#123;msg&#125;<span class="comment">&lt;!-- EL表达式取值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-编写Controller类-2"><a href="#3-编写Controller类-2" class="headerlink" title="3. 编写Controller类"></a>3. 编写Controller类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"error"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"抛出异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14-2-处理方式三"><a href="#14-2-处理方式三" class="headerlink" title="14.2. 处理方式三"></a>14.2. 处理方式三</h3><p>必须掌握，该方式是通过<strong>AOP通知功能</strong>进行的自定义异常处理</p>
<h4 id="1-自定义状态信息的枚举类"><a href="#1-自定义状态信息的枚举类" class="headerlink" title="1. 自定义状态信息的枚举类"></a>1. 自定义状态信息的枚举类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.cn.common.http.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> StatusEnum &#123;</span><br><span class="line">	ERROR(<span class="number">40001</span>, <span class="string">"操作失败"</span>),</span><br><span class="line">	OK(<span class="number">20000</span>, <span class="string">"操作成功"</span>),</span><br><span class="line">	PHONE_specification_ERROR(<span class="number">40002</span>, <span class="string">"手机号格式错误"</span>),</span><br><span class="line">	PHONE_NUMBER_ERROR(<span class="number">40003</span>, <span class="string">"手机号位数错误"</span>),</span><br><span class="line">	PHONE_EMPTY(<span class="number">40004</span>, <span class="string">"手机号为空"</span>),</span><br><span class="line">	ADMIN_NOT_FOUND(<span class="number">40005</span>, <span class="string">"用户未查到"</span>),</span><br><span class="line">	CODE_SENT(<span class="number">20001</span>, <span class="string">"验证码已发送"</span>),</span><br><span class="line">	LOGIN_ERROR(<span class="number">40006</span>, <span class="string">"验证码错误，登录失败"</span>),</span><br><span class="line">	LOGIN_SUCCESS(<span class="number">20002</span>, <span class="string">"登录成功"</span>),</span><br><span class="line">	;</span><br><span class="line">	<span class="keyword">private</span> Integer status;</span><br><span class="line">	<span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">	StatusEnum(Integer status, String message) &#123;</span><br><span class="line">		<span class="keyword">this</span>.status = status;</span><br><span class="line">		<span class="keyword">this</span>.message = message;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// getter、setter和toStirng方法，略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-自定义异常类"><a href="#2-自定义异常类" class="headerlink" title="2. 自定义异常类"></a>2. 自定义异常类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> StatusEnum statusEnum;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyException</span> <span class="params">(StatusEnum statusEnum)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.statusEnum = statusEnum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> StatusEnum <span class="title">getStatusEnum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> statusEnum;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatusEnum</span><span class="params">(StatusEnum statusEnum)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.statusEnum = statusEnum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-自定义异常响应Bean"><a href="#3-自定义异常响应Bean" class="headerlink" title="3. 自定义异常响应Bean"></a>3. 自定义异常响应Bean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseBean</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer status;</span><br><span class="line">	<span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ResponseBean</span><span class="params">(StatusEnum statusEnum)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.status = statusEnum.getStatus();</span><br><span class="line">		<span class="keyword">this</span>.message = statusEnum.getMessage();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// getter、setter和toStirng方法，略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataResponseBean</span> <span class="keyword">extends</span> <span class="title">ResponseBean</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Object data;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DataResponseBean</span><span class="params">(StatusEnum statusEnum, Object data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(statusEnum);</span><br><span class="line">		<span class="keyword">this</span>.data = data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// getter、setter和toStirng方法，略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-在Controller类里抛出异常"><a href="#4-在Controller类里抛出异常" class="headerlink" title="4. 在Controller类里抛出异常"></a>4. 在Controller类里抛出异常</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/error"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(StatusEnum.ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-自定义异常处理类"><a href="#5-自定义异常处理类" class="headerlink" title="5. 自定义异常处理类"></a>5. 自定义异常处理类</h4><p>此类要想能捕获到异常需要加入到容器中。<strong>或者说在配置文件中配包扫描的时候要能扫到它</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">// 或 @RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line">	<span class="meta">@ExceptionHandler</span>(MyException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">EmployeeExceptionHandler</span> (<span class="title">MyException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> ResponseBean(e.getStatusEnum()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-thymeleaf常用语法</title>
    <url>/2020/04/24/%E7%AC%94%E8%AE%B0-thymeleaf%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>了解下thymeleaf的常用语法</p>
<a id="more"></a>

<h1 id="thymeleaf的常用语法"><a href="#thymeleaf的常用语法" class="headerlink" title="thymeleaf的常用语法"></a>thymeleaf的常用语法</h1><p>该文参照<a href="https://www.cnblogs.com/msi-chen/p/10974009.html" target="_blank" rel="noopener">https://www.cnblogs.com/msi-chen/p/10974009.html</a></p>
<h2 id="0-变量"><a href="#0-变量" class="headerlink" title="0. 变量"></a>0. 变量</h2><h3 id="0-0-变量示例"><a href="#0-0-变量示例" class="headerlink" title="0.0. 变量示例"></a>0.0. 变量示例</h3><h4 id="0-0-0-编写实体类"><a href="#0-0-0-编写实体类" class="headerlink" title="0.0.0. 编写实体类"></a>0.0.0. 编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    User friend;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0-0-1-在模型中添加数据"><a href="#0-0-1-在模型中添加数据" class="headerlink" title="0.0.1. 在模型中添加数据"></a>0.0.1. 在模型中添加数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"test2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setName(<span class="string">"Jackson"</span>);</span><br><span class="line">    user.setFriend(<span class="keyword">new</span> User(<span class="string">"李小龙"</span>, <span class="number">30</span>));</span><br><span class="line">    </span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello2"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0-0-2-前端页面的编写"><a href="#0-0-2-前端页面的编写" class="headerlink" title="0.0.2. 前端页面的编写"></a>0.0.2. 前端页面的编写</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    你好,<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>请跟我来<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    thymeleaf通过<code>${}</code>来获取model中的变量，该形式的表达式写在<code>th:text</code>的标签属性中。</p>
<h3 id="0-1-变量之动静结合"><a href="#0-1-变量之动静结合" class="headerlink" title="0.1. 变量之动静结合"></a>0.1. 变量之动静结合</h3><p>​    thymeleaf中所有的表达式都需要写在<strong>“指令</strong>“中，指令是HTML5中的自定义属性。在thymeleaf中所有指令都是以<code>th:</code>开头。在静态环境下，表达式的内容会被当做是普通字符串，浏览器会自动忽略这些指令，这样就不会报错了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    你好,<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>请跟我来<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    例如上面写的示例，不经过SpringMVC，直接放在静态环境中，会显示缺省值：“请跟我来”。</p>
<p>​    假如浏览器不支持Html5，可以把<code>th:text</code>换成<code>data-th-text</code>。</p>
<h3 id="0-2-自定义变量"><a href="#0-2-自定义变量" class="headerlink" title="0.2. 自定义变量"></a>0.2. 自定义变量</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>friend: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.friend.name&#125;"</span>&gt;</span>Rose<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    当需要获取的数据量比较多的时候，会很麻烦。而thymeleaf提供了<strong>自定义的变量</strong>来解决该问题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;name&#125;"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;age&#125;"</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>friend: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;friend.name&#125;"</span>&gt;</span>Rose<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    上述例子，首先在h2标签上使用了<code>th:object=&quot;${user}&quot;</code>获取user的值，并且保存。然后，在h2标签内部的任意元素上，通过<code>*{属性名}</code>的方式，获取user中的属性，这样便省去了大量的user前缀。</p>
<h2 id="1-方法调用"><a href="#1-方法调用" class="headerlink" title="1. 方法调用"></a>1. 方法调用</h2><p>​    thymeleaf中提供了一些内置对象，并且在这些对象中提供了一些方法，来方便调用。而获取这些对象，需要使用<code>#对象名</code>来引用。</p>
<h3 id="一些环境相关对象"><a href="#一些环境相关对象" class="headerlink" title="一些环境相关对象"></a>一些环境相关对象</h3><table>
<thead>
<tr>
<th>对象</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>#ctx</code></td>
<td>获取Thymeleaf自己的Context对象</td>
</tr>
<tr>
<td><code>#requset</code></td>
<td>如果是web程序，可以获取HttpServletRequest对象</td>
</tr>
<tr>
<td><code>#response</code></td>
<td>如果是web程序，可以获取HttpServletReponse对象</td>
</tr>
<tr>
<td><code>#session</code></td>
<td>如果是web程序，可以获取HttpSession对象</td>
</tr>
<tr>
<td><code>#servletContext</code></td>
<td>如果是web程序，可以获取HttpServletContext对象</td>
</tr>
</tbody></table>
<h3 id="thymeleaf提供的全局对象"><a href="#thymeleaf提供的全局对象" class="headerlink" title="thymeleaf提供的全局对象"></a>thymeleaf提供的全局对象</h3><table>
<thead>
<tr>
<th>对象</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>#dates</code></td>
<td>处理java.util.date的工具对象</td>
</tr>
<tr>
<td><code>#calendars</code></td>
<td>处理java.util.calendar的工具对象</td>
</tr>
<tr>
<td><code>#numbers</code></td>
<td>用来对数字格式化的方法</td>
</tr>
<tr>
<td><code>#strings</code></td>
<td>用来处理字符串的方法</td>
</tr>
<tr>
<td><code>#bools</code></td>
<td>用来判断布尔值的方法</td>
</tr>
<tr>
<td><code>#arrays</code></td>
<td>用来护理数组的方法</td>
</tr>
<tr>
<td><code>#lists</code></td>
<td>用来处理List集合的方法</td>
</tr>
<tr>
<td><code>#sets</code></td>
<td>用来处理set集合的方法</td>
</tr>
<tr>
<td><code>#maps</code></td>
<td>用来处理map集合的方法</td>
</tr>
</tbody></table>
<h3 id="方法调用的示例"><a href="#方法调用的示例" class="headerlink" title="方法调用的示例"></a>方法调用的示例</h3><p>先在model中添加日期类对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"test3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show3</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"today"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello3"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端页面代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    今天是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(today,'yyyy-MM-dd')&#125;"</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-字面值"><a href="#2-字面值" class="headerlink" title="2. 字面值"></a>2. 字面值</h2><p>​    如果我们在<strong>指令</strong>中填写的字面值如：字符串、数值、布尔等，并不希望被Thymeleaf解析为变量，而是原来写什么就出现什么，该怎么办呢？</p>
<h3 id="2-0-字符串字面值"><a href="#2-0-字符串字面值" class="headerlink" title="2.0. 字符串字面值"></a>2.0. 字符串字面值</h3><p>使用<code>&#39;&#39;</code>单引号引用起来的内容，thymeleaf并不会认为是变量，而是一个字符串。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    正在观看<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'thymeleaf'"</span>&gt;</span>template<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的字符串常量值</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-数字字面值"><a href="#2-1-数字字面值" class="headerlink" title="2.1. 数字字面值"></a>2.1. 数字字面值</h3><p>数字不需要任何特殊语法，写什么就是什么，并且可以直接进行算数运算。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>今年是<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"2020"</span>&gt;</span>1222<span class="tag">&lt;/<span class="name">span</span>&gt;</span>年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两年后是<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"2020+2"</span>&gt;</span>1224<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-布尔字面值"><a href="#2-2-布尔字面值" class="headerlink" title="2.2. 布尔字面值"></a>2.2. 布尔字面值</h3><p>布尔类型的字面值是true或false</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    你填的是true</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-拼接"><a href="#3-拼接" class="headerlink" title="3. 拼接"></a>3. 拼接</h2><p>普通字符串与表达式拼接的情况如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'欢迎你:' + $&#123;user.name&#125; + '~'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    可以看出，拼接起来还是比较麻烦的，thymeleaf对此进行了优化，使用<code>||</code>即可。示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"|欢迎你:$&#123;user.name&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-运算"><a href="#4-运算" class="headerlink" title="4. 运算"></a>4. 运算</h2><p>​    <code>${}</code>内部是通过OGNL表达式引擎解析的，外部的才是通过thymeleaf的引擎解析的，因此**运算符尽量放在<code>${}</code>外进行。</p>
<h3 id="4-0-算术运算"><a href="#4-0-算术运算" class="headerlink" title="4.0. 算术运算"></a>4.0. 算术运算</h3><p>支持的算术运算符有：+、-、*、/、%</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125; % 2 == 0"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-1-比较运算"><a href="#4-1-比较运算" class="headerlink" title="4.1. 比较运算"></a>4.1. 比较运算</h3><p>支持的比较运算符有：<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>==</code>和<code>!=</code>。</p>
<p><code>==</code>和<code>!=</code>不仅可以比较数值，还有类似于equals的功能。</p>
<p>还有<code>&gt;</code>和<code>&lt;</code>不能直接使用，因为xml解析标签，需要使用别名。</p>
<p>可以使用的别名有：<code>gt</code>(&gt;)，<code>lt</code>(&lt;)，<code>ge</code>(&gt;=)，<code>le</code>(&lt;=)，<code>not</code>(!)，<code>Also eq</code>(==)，<code>neq/ne</code>(!=)</p>
<h3 id="4-2-三目运算"><a href="#4-2-三目运算" class="headerlink" title="4.2. 三目运算"></a>4.2. 三目运算</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.sex&#125; ? '男' : '女'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>如果取的值为空，需要做非空判断，这时候可以用表达式<code>?:</code>。</p>
<p>当前面的表达式的值为null时，就会使用后面的默认值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125; ?: '二狗'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>?:</code>之间没有空格</p>
<h2 id="5-循环"><a href="#5-循环" class="headerlink" title="5. 循环"></a>5. 循环</h2><p>使用<code>th:each</code>指令完成，用来遍历集合。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>Online<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>${users}是要遍历的集合，可以是以下的类型：<ul>
<li>Iterable，实现了Iterable接口的类</li>
<li>Enumeration，枚举</li>
<li>Interator，迭代器</li>
<li>Map，遍历得到的是Map.Entry</li>
<li>Array，数组及其他一切符合数组结果的对象</li>
</ul>
</li>
</ul>
<p>迭代的同时，还可以获取<strong>迭代的状态对象</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user,stat : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>Online<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>stat对象包含以下属性：<ul>
<li>index，从0开始的角标/下标/索引</li>
<li>count，元素的个数，从1开始</li>
<li>size，总元素的个数</li>
<li>current，当前遍历到的元素</li>
<li>even/odd，返回是否为奇偶，返回的是布尔值</li>
<li>first/last，返回是否为开始或最后，返回的是布尔值</li>
</ul>
</li>
</ul>
<h2 id="6-逻辑判断"><a href="#6-逻辑判断" class="headerlink" title="6. 逻辑判断"></a>6. 逻辑判断</h2><p>thymeleaf中使用<code>th:if</code>和<code>th:unless</code>替代<code>if</code>和<code>else</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.age&#125; &gt; 22"</span>&gt;</span>年轻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果表达式的值为true，则标签则会渲染到页面，<strong>否则不进行渲染</strong>。</p>
<p>下列属性在<code>th:if</code>指令中会被认定为true：</p>
<ul>
<li>表达式值为true</li>
<li>表达式值为非0数值</li>
<li>表达式值为非0字符</li>
<li>表达式值为字符串，但不是”false“，”no“，”off“</li>
<li>表达式不是布尔」字符串」数字、字符中的任何一种</li>
</ul>
<p>其他情况包括null都会被认定为false</p>
<h2 id="7-分支控制switch"><a href="#7-分支控制switch" class="headerlink" title="7. 分支控制switch"></a>7. 分支控制switch</h2><p>使用到<code>th:switch</code>和<code>th:case</code>指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>用户是管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'manager'"</span>&gt;</span>用户是经理<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>用户是别的玩意<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一旦有一个<code>th:case</code>成立，其它的则不再判断。</p>
<p><code>th:case=&quot;*&quot;</code>表示默认，即java中switch语句中的default。</p>
<h2 id="8-JS模板"><a href="#8-JS模板" class="headerlink" title="8. JS模板"></a>8. JS模板</h2><p>​    模板引擎不仅可以渲染html，也可以对JS中的进行预处理。而且为了在纯静态环境下可以运行，其thymeleaf代码可以被注释起来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script th:inline&#x3D;&quot;javascript&quot;&gt;</span><br><span class="line">    const user &#x3D; &#x2F;*[[$&#123;user&#125;]]*&#x2F; &#123;&#125;;</span><br><span class="line">    const age &#x3D; &#x2F;*[[$&#123;user.age&#125;]]*&#x2F; 20;</span><br><span class="line">    console.log(user);</span><br><span class="line">    console.log(age)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在script标签中通过<code>th:inline=&quot;javascript&quot;</code>来声明这是要特殊处理的js脚本</p>
</li>
<li><p>语法结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const user &#x3D; &#x2F;*[[Thymeleaf表达式]]*&#x2F; &quot;静态环境下的默认值&quot;;</span><br></pre></td></tr></table></figure>

<p>因为Thymeleaf被注释起来，因此即便是静态环境下， js代码也不会报错，而是采用表达式后面跟着的默认值。且User对象会被直接处理为json格式。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>thymeleaf</tag>
        <tag>模板引擎</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-ajax和json</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-ajax%E5%92%8Cjson/</url>
    <content><![CDATA[<p>暂时就整理成这样了。ajax和json的简单学习</p>
<a id="more"></a>

<h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>AJAX 即“Asynchronous Javascript And XML”（<strong>异步 JavaScript 和 XML</strong>），是指一种创建交互式网页应用的网页开发技术。ajax 是一种浏览器<strong>通过 js 异步发起请求</strong>，局部更新页面的技术。<br>Ajax 请求的局部更新，<strong>浏览器地址栏不会发生变化</strong>。局部更新不会舍弃原来页面的内容。</p>
<h2 id="原生ajax请求示例"><a href="#原生ajax请求示例" class="headerlink" title="原生ajax请求示例"></a>原生ajax请求示例</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ul>
<li><p><strong>创建对象</strong>：<strong>var xmlhttprequest= new XMLHttpRequest()</strong></p>
</li>
<li><p><strong>open连接</strong></p>
<ul>
<li><strong>xmlhttprequest.open(a,b,c)</strong></li>
<li>a:表示<strong>请求方式</strong>，b:<strong>请求地址</strong>；c:<strong>是否异步</strong>，true/false，默认是true</li>
<li>请求地址后面可拼接键值对，例：/ajax?username=xxx&amp;password=xxx</li>
</ul>
</li>
<li><p><strong>send发送请求</strong></p>
</li>
<li><ul>
<li><p><strong>xmlhttprequest.send(null)</strong>；参数是请求时给Servlet传递的参数，如没有,为null。</p>
</li>
<li><p>可为<strong>post</strong>传递参数，但需要设置一下，<strong>xmlhttprequest.setRequestHeader(“content-type”, “application/xxx-www-form-urlencoded”);</strong></p>
</li>
<li><p><strong>此处待视频验证</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttprequest.setRequestHeader(<span class="string">"content-type"</span>, <span class="string">"application/xxx-www-form-urlencoded"</span>);</span><br><span class="line">xmlhttprequest.send(<span class="string">"userName="</span> + userName + <span class="string">"&amp;password="</span> + password);<span class="comment">// 不能加？</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="meta-string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Expires"</span> <span class="attr">content</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 在这里使用 javaScript 语言发起 Ajax 请求，访问服务器 AjaxServlet 中 javaScriptAjax</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">ajaxRequest</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                <span class="comment">// 1、我们首先要创建 XMLHttpRequest</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> xmlhttprequest = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 2、调用 open 方法设置请求参数</span></span></span><br><span class="line"><span class="actionscript">                xmlhttprequest.open(<span class="string">"GET"</span>,<span class="string">"http://localhost:8080/16_json_ajax_i18n/ajaxServlet?action=javaScriptAjax"</span>,<span class="literal">true</span>)</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 4、在 send 方法前绑定 onreadystatechange 事件，处理请求完成后的操作。</span></span></span><br><span class="line"><span class="actionscript">                xmlhttprequest.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">                    if (xmlhttprequest.readyState == 4 &amp;&amp; xmlhttprequest.status == 200) &#123;</span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> jsonObj = <span class="built_in">JSON</span>.parse(xmlhttprequest.responseText);</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 把响应的数据显示在页面上</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">"div01"</span>).innerHTML = <span class="string">"编号："</span> + jsonObj.id + <span class="string">" , 姓名："</span> + jsonObj.name;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 3、调用 send 方法发送请求</span></span></span><br><span class="line">                xmlhttprequest.send();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"ajaxRequest()"</span>&gt;</span>ajax request<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="XMLHttpRequest对象的属性"><a href="#XMLHttpRequest对象的属性" class="headerlink" title="XMLHttpRequest对象的属性"></a>XMLHttpRequest对象的属性</h4><ul>
<li><strong>onreadystatechange</strong>：回调函数</li>
<li><strong>responseText</strong>：响应格式为String</li>
<li><strong>responseXML</strong>：响应格式为XML</li>
<li><strong>status</strong>：响应状态，只有<strong>200</strong>才表示响应正常</li>
<li><strong>readyState</strong>：请求状态，只有<strong>4</strong>才代表请求完毕<ul>
<li>readystate的五种状态<ul>
<li>0，表示XMLHttpRequest对象创建，open方法还没调用</li>
<li>1，open方法调用，send方法未调用</li>
<li>2，send方法调用，获得了响应头，未获得了响应体</li>
<li>3，获取了响应体</li>
<li>4，响应结束</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="jQuery-中的ajax请求"><a href="#jQuery-中的ajax请求" class="headerlink" title="jQuery 中的ajax请求"></a>jQuery 中的ajax请求</h2><h3 id="ajax-方法"><a href="#ajax-方法" class="headerlink" title="$.ajax 方法"></a>$.ajax 方法</h3><ul>
<li><strong>url</strong> 表示请求的地址</li>
<li><strong>type</strong> 表示请求的类型 GET 或 POST 请求</li>
<li><strong>data</strong> 表示发送给服务器的数据<ul>
<li>格式有两种：</li>
<li>一：name=value&amp;name=value</li>
<li>二：{key:value}</li>
</ul>
</li>
<li><strong>success</strong> 请求成功，<strong>响应的回调函数</strong></li>
<li><strong>dataType</strong> 响应的数据类型<ul>
<li>常用的数据类型有：<ul>
<li>text 表示纯文本</li>
<li>xml 表示 xml 数据</li>
<li>json 表示 json 对象</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#ajaxBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"http://localhost:8080/16_json_ajax_i18n/ajaxServlet"</span>,</span><br><span class="line">        <span class="comment">// data:"action=jQueryAjax",</span></span><br><span class="line">        data:&#123;<span class="attr">action</span>:<span class="string">"jQueryAjax"</span>&#125;,</span><br><span class="line">        type:<span class="string">"GET"</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// alert("服务器返回的数据是：" + data);</span></span><br><span class="line">            <span class="comment">// var jsonObj = JSON.parse(data);</span></span><br><span class="line">            $(<span class="string">"#msg"</span>).html(<span class="string">"编号："</span> + data.id + <span class="string">" , 姓名："</span> + data.name);</span><br><span class="line">        &#125;,</span><br><span class="line">        dataType : <span class="string">"json"</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="get-方法和-post-方法"><a href="#get-方法和-post-方法" class="headerlink" title="$.get 方法和$.post 方法"></a>$.get 方法和$.post 方法</h3><ul>
<li><strong>url</strong> 请求的 url 地址</li>
<li><strong>data</strong> 发送的数据</li>
<li><strong>callback</strong> 成功的<strong>回调函数</strong></li>
<li><strong>type</strong> 返回的数据类型</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ajax--get 请求</span></span><br><span class="line">$(<span class="string">"#getBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.<span class="keyword">get</span>("http://localhost:8080/16_json_ajax_i18n/ajaxServlet", "action=jQueryGet", function (data) &#123;</span><br><span class="line">        $(<span class="string">"#msg"</span>).html(<span class="string">" get 编号："</span> + data.id + <span class="string">" , 姓名："</span> + data.name);</span><br><span class="line">    &#125;, <span class="string">"json"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ajax--post 请求</span></span><br><span class="line">$(<span class="string">"#postBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.post(<span class="string">"http://localhost:8080/16_json_ajax_i18n/ajaxServlet"</span>, <span class="string">"action=jQueryPost"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#msg"</span>).html(<span class="string">" post 编号："</span> + data.id + <span class="string">" , 姓名："</span> + data.name);</span><br><span class="line">    &#125;, <span class="string">"json"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><p>JSON (<strong>JavaScript Object Notation</strong>) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON采用完全独立于语言的文本格式，而且很多语言都提供了对 json 的支持（包括 C, C++, C#, Java, JavaScript, Perl, Python等）。 这样就使得 JSON 成为理想的数据交换格式。</p>
<h3 id="JSON-在-JavaScript-中的使用"><a href="#JSON-在-JavaScript-中的使用" class="headerlink" title="JSON 在 JavaScript 中的使用"></a>JSON 在 JavaScript 中的使用</h3><h4 id="json-的定义"><a href="#json-的定义" class="headerlink" title="json 的定义"></a>json 的定义</h4><p>json 是由<strong>键值对组成</strong>，并且由<strong>大括号包围</strong>。每个<strong>键由引号引起来</strong>，键和值之间使用冒号进行分隔，<br>多组键值对之间进行逗号进行分隔。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObj = &#123;</span><br><span class="line"><span class="string">"key1"</span>:<span class="number">12</span>,</span><br><span class="line"><span class="string">"key2"</span>:<span class="string">"abc"</span>,</span><br><span class="line"><span class="string">"key3"</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="string">"key4"</span>:[<span class="number">11</span>,<span class="string">"arr"</span>,<span class="literal">false</span>],</span><br><span class="line">    </span><br><span class="line"><span class="string">"key5"</span>:&#123;</span><br><span class="line"><span class="string">"key5_1"</span> : <span class="number">551</span>,</span><br><span class="line"><span class="string">"key5_2"</span> : <span class="string">"key5_2_value"</span></span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line"><span class="string">"key6"</span>:[&#123;</span><br><span class="line"><span class="string">"key6_1_1"</span>:<span class="number">6611</span>,</span><br><span class="line"><span class="string">"key6_1_2"</span>:<span class="string">"key6_1_2_value"</span>&#125;,&#123;</span><br><span class="line"><span class="string">"key6_2_1"</span>:<span class="number">6621</span>,</span><br><span class="line"><span class="string">"key6_2_2"</span>:<span class="string">"key6_2_2_value"</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="json-的访问"><a href="#json-的访问" class="headerlink" title="json 的访问"></a>json 的访问</h4><p>json 本身是一个对象。json 中的 key 我们可以理解为是对象中的一个属性。<br>json 中的 key 访问就跟访问对象的属性一样： <strong>json 对象.key</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="keyword">typeof</span>(jsonObj));<span class="comment">// object json 就是一个对象</span></span><br><span class="line">alert(jsonObj.key1); <span class="comment">//12</span></span><br><span class="line">alert(jsonObj.key2); <span class="comment">// abc</span></span><br><span class="line">alert(jsonObj.key3); <span class="comment">// true</span></span><br><span class="line">alert(jsonObj.key4);<span class="comment">// 得到数组[11,"arr",false]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// json 中 数组值的遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; jsonObj.key4.length; i++) &#123;</span><br><span class="line">alert(jsonObj.key4[i]);</span><br><span class="line">&#125;</span><br><span class="line">alert(jsonObj.key5.key5_1);<span class="comment">//551</span></span><br><span class="line">alert(jsonObj.key5.key5_2);<span class="comment">//key5_2_value</span></span><br><span class="line">alert( jsonObj.key6 );<span class="comment">// 得到 json 数组</span></span><br><span class="line"><span class="comment">// json数组中取出来的每一个元素都是 json 对象</span></span><br><span class="line"><span class="keyword">var</span> jsonItem = jsonObj.key6[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// alert( jsonItem.key6_1_1 ); //6611</span></span><br><span class="line">alert( jsonItem.key6_1_2 ); <span class="comment">//key6_1_2_value</span></span><br></pre></td></tr></table></figure>

<h4 id="json的两个常用方法"><a href="#json的两个常用方法" class="headerlink" title="json的两个常用方法"></a>json的两个常用方法</h4><ul>
<li><strong>JSON.stringify()</strong> 把 json 对象转换成为 json 字符串</li>
<li><strong>JSON.parse()</strong> 把 json 字符串转换成为 json 对象</li>
</ul>
<p>json 的存在有两种形式。对象的形式存在，我们叫它 <strong>json 对象</strong>；字符串的形式存在，我们叫它 <strong>json 字符串</strong>。</p>
<ul>
<li>一般我们要操作 json 中的数据的时候，需要 json 对象的格式。</li>
<li>一般我们要在客户端和服务器之间进行数据交换的时候，使用 json 字符串。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把 json 对象转换成为 json 字符串</span></span><br><span class="line"><span class="keyword">var</span> jsonObjString = <span class="built_in">JSON</span>.stringify(jsonObj); <span class="comment">// 特别像 Java 中对象的 toString</span></span><br><span class="line">alert(jsonObjString)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 json 字符串。转换成为 json 对象</span></span><br><span class="line"><span class="keyword">var</span> jsonObj2 = <span class="built_in">JSON</span>.parse(jsonObjString);</span><br><span class="line">alert(jsonObj2.key1);<span class="comment">// 12</span></span><br><span class="line">alert(jsonObj2.key2);<span class="comment">// abc</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON-在-java-中的使用"><a href="#JSON-在-java-中的使用" class="headerlink" title="JSON 在 java 中的使用"></a>JSON 在 java 中的使用</h3><h4 id="javaBean-和-json-的互转"><a href="#javaBean-和-json-的互转" class="headerlink" title="javaBean 和 json 的互转"></a>javaBean 和 json 的互转</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"国哥好帅!"</span>);</span><br><span class="line">    <span class="comment">// 创建 Gson 对象实例</span></span><br><span class="line">    Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    <span class="comment">// toJson 方法可以把 java 对象转换成为 json 字符串</span></span><br><span class="line">    String personJsonString = gson.toJson(person);</span><br><span class="line">    System.out.println(personJsonString);</span><br><span class="line">    <span class="comment">// fromJson 把 json 字符串转换回 Java 对象</span></span><br><span class="line">    <span class="comment">// 第一个参数是 json 字符串</span></span><br><span class="line">    <span class="comment">// 第二个参数是转换回去的 Java 对象类型</span></span><br><span class="line">    Person person1 = gson.fromJson(personJsonString, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(person1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="List-和-json-的互转"><a href="#List-和-json-的互转" class="headerlink" title="List 和 json 的互转"></a>List 和 json 的互转</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    personList.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"国哥"</span>));</span><br><span class="line">    personList.add(<span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">"师傅"</span>));</span><br><span class="line">    Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    <span class="comment">// 把 List 转换为 json 字符串</span></span><br><span class="line">    String personListJsonString = gson.toJson(personList);</span><br><span class="line">    System.out.println(personListJsonString);</span><br><span class="line">    List&lt;Person&gt; list = gson.fromJson(personListJsonString, <span class="keyword">new</span> PersonListType().getType());</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    Person person = list.get(<span class="number">0</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="map-和-json-的互转"><a href="#map-和-json-的互转" class="headerlink" title="map 和 json 的互转"></a>map 和 json 的互转</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;Integer,Person&gt; personMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    personMap.put(<span class="number">1</span>, <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"国哥好帅"</span>));</span><br><span class="line">    personMap.put(<span class="number">2</span>, <span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">"康师傅也好帅"</span>));</span><br><span class="line">    Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    <span class="comment">// 把 map 集合转换成为 json 字符串</span></span><br><span class="line">    String personMapJsonString = gson.toJson(personMap);</span><br><span class="line">    System.out.println(personMapJsonString);</span><br><span class="line">    <span class="comment">// Map&lt;Integer,Person&gt; personMap2 = gson.fromJson(personMapJsonString, new PersonMapType().getType());</span></span><br><span class="line">    Map&lt;Integer,Person&gt; personMap2 = gson.fromJson(personMapJsonString, <span class="keyword">new</span></span><br><span class="line">    TypeToken&lt;HashMap&lt;Integer,Person&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">    System.out.println(personMap2);</span><br><span class="line">    Person p = personMap2.get(<span class="number">1</span>);</span><br><span class="line">    System.out.println(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-《恋·数·算》之动态数组</title>
    <url>/2020/05/07/%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%81%8B%C2%B7%E6%95%B0%C2%B7%E7%AE%97%E3%80%8B%E4%B9%8B%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>《恋·数·算》笔记 二 动态数组的实现</p>
<a id="more"></a>

<h1 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h1><p>感谢<a href="https://m.ke.qq.com/course/421398?course_id=421398&_bid=167&_wv=1" target="_blank" rel="noopener">小码哥</a>的《恋上数据结构和算法》，笔记呢，大多照搬<a href="https://blog.csdn.net/weixin_43734095/article/details/105116064" target="_blank" rel="noopener">萌宅鹿</a>君的笔记，感谢大佬们的分享，省得我一字一字的扣了。</p>
<h2 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h2><p>数据结构是计算机存储、组织数据的方式。<br><img src="https://img-blog.csdnimg.cn/20200430235657856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczNDA5NQ==,size_16,color_FFFFFF,t_70" alt="数据结构的分类图"><br>在实际应用中，根据使用场景来选择最合适的数据结构。</p>
<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表是具有 n 个相同类型元素的有限序列（ n ≥ 0 ）。<br><img src="https://img-blog.csdnimg.cn/20200501000311746.png" alt="线性表图示"></p>
<ul>
<li>a1 是首节点（首元素）， an 是尾结点（尾元素）</li>
<li>a1 是 a2 的前驱， a2 是 a1 的后继<br>常见的线性表有：</li>
<li>数组</li>
<li>链表</li>
<li>栈</li>
<li>队列</li>
<li>哈希表（散列表）</li>
</ul>
<h2 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h2><p>数组是一种顺序存储的线性表，所有元素的内存地址是连续的。<br><img src="https://img-blog.csdnimg.cn/20200501000639767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczNDA5NQ==,size_16,color_FFFFFF,t_70" alt="数组在内存中的存储示意图"><br>在很多编程语言中，数组都有个致命的缺点 ：<br>无法动态修改容量。<br>所以实际开发中，我们更希望数组的容量是可以动态改变的。</p>
<h2 id="动态数组（Dynamic-Array）"><a href="#动态数组（Dynamic-Array）" class="headerlink" title="动态数组（Dynamic Array）"></a>动态数组（Dynamic Array）</h2><p>动态数组接口设计</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 元素的数量</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span> <span class="params">(E element)</span></span>; <span class="comment">// 是否包含某个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(E element)</span></span>; <span class="comment">// 添加元素到最后面</span></span><br><span class="line"><span class="function">E <span class="title">get</span> <span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 返回index位置对应的元素</span></span><br><span class="line"><span class="function">E <span class="title">set</span> <span class="params">(<span class="keyword">int</span> index, E element)</span></span>; <span class="comment">// 设置index位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> index, E element)</span></span>; <span class="comment">// 往index位置添加元素</span></span><br><span class="line"><span class="function">E <span class="title">remove</span> <span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 删除index位置对应的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span> <span class="params">(E element)</span></span>; <span class="comment">// 查看元素的位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span> <span class="params">()</span></span>; <span class="comment">// 清除所有元素</span></span><br></pre></td></tr></table></figure>

<h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>add(E element)、add(int index, E element)<br><code>add(E element)</code>：默认往数组最后添加元素<br><img src="https://img-blog.csdnimg.cn/20200501001049471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczNDA5NQ==,size_16,color_FFFFFF,t_70" alt="往数组末尾添加元素示意图"><br><code>add(int index, E element)</code>：在 index 位置插入一个元素。比如要往 index = 2 的地方添加元素：</p>
<ul>
<li>正确的顺序应当是：从后往前开始将 index = 2 以后的元素依次后移，然后赋值：<br><img src="https://img-blog.csdnimg.cn/20200501002100629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczNDA5NQ==,size_16,color_FFFFFF,t_70" alt="从后往前挪示意图"></li>
<li>如果从前往后开始移动元素，会造成如下错误的后果：<br><img src="https://img-blog.csdnimg.cn/20200501002247829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczNDA5NQ==,size_16,color_FFFFFF,t_70" alt="从前往后示意图"><br>代码实现:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>&#123; </span><br><span class="line">	rangeCheckForAdd(index); <span class="comment">// 检查下标越界</span></span><br><span class="line">	ensureCapacity(size + <span class="number">1</span>); <span class="comment">// 确保容量够大</span></span><br><span class="line">	<span class="comment">// 0 1 2 3 4 5 6 7 8 9	(index)</span></span><br><span class="line">	<span class="comment">// 1 2 3 4 5 6 x x x x	(原数组)</span></span><br><span class="line">	<span class="comment">// 在index=2处，插入9，元素全部后移</span></span><br><span class="line">	<span class="comment">// 1 2 9 3 4 5 6 x x x	(add后数组)</span></span><br><span class="line">	<span class="comment">// 先从后往前开始, 将每个元素往后移一位, 然后再赋值</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">		elements[i + <span class="number">1</span>] = elements[i];</span><br><span class="line">	&#125;</span><br><span class="line">	elements[index] = element; <span class="comment">// 复制</span></span><br><span class="line">	size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素到数组最后</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>&#123;</span><br><span class="line">	add(size, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除元素-remove-int-index-、清空数组-clear"><a href="#删除元素-remove-int-index-、清空数组-clear" class="headerlink" title="删除元素 - remove(int index)、清空数组 clear()"></a>删除元素 - remove(int index)、清空数组 clear()</h3><p>例如，删除 index = 3 的数组元素，应当从前往后开始移动，用后面的元素覆盖前面的元素。<br><img src="https://img-blog.csdnimg.cn/20200501012503193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczNDA5NQ==,size_16,color_FFFFFF,t_70" alt="删除元素示意图"></p>
<h4 id="思考：最后一个元素如何处理？"><a href="#思考：最后一个元素如何处理？" class="headerlink" title="思考：最后一个元素如何处理？"></a>思考：最后一个元素如何处理？</h4><ul>
<li>如果存放 <code>int</code> 类型，<code>size--</code> 后，最后一个元素便已经无法访问了。</li>
<li>如果使用<strong>泛型</strong>，数组要注意内存管理（将元素置 <code>null</code>）。而且使用泛型技术可以让动态数组更加通用，可以存放任何数据类型</li>
</ul>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除index位置的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">	rangeCheck(index);</span><br><span class="line">	<span class="comment">// 0 1 2 3 4 5 &lt;== index</span></span><br><span class="line">	<span class="comment">// 1 2 3 4 5 6 &lt;== 原数组</span></span><br><span class="line">	<span class="comment">// 删除index为2的元素，元素前移</span></span><br><span class="line">	<span class="comment">// 1 2 4 5 6	(remove后的数组)</span></span><br><span class="line">	<span class="comment">// 从前往后开始移, 用后面的元素覆盖前面的元素</span></span><br><span class="line">	E old = elements[index];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		elements[i] = elements[i + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 下面是使用泛型后需要写的(如果存储的是int型数据, 则不需要)</span></span><br><span class="line">	elements[--size] = <span class="keyword">null</span>; <span class="comment">// 删除元素后, 将最后一位设置为null</span></span><br><span class="line">	<span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清除所有元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 使用泛型数组后要注意内存管理(将元素置null)</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">		elements[i] = <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="是否包含某个元素-contains-E-element"><a href="#是否包含某个元素-contains-E-element" class="headerlink" title="是否包含某个元素 - contains(E element)"></a>是否包含某个元素 - contains(E element)</h3><p>关于 null 的处理主要看业务需求是否可以存储 null 数据</p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否包含某个元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND; <span class="comment">// 找的到该元素则返回True</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查看元素的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	// 不对 null 进行处理也可以，但是健壮性不够</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; size; i++) &#123;</span></span><br><span class="line"><span class="comment">		if(elements[i].equals(element)) return i;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span>(element == <span class="keyword">null</span>)&#123; <span class="comment">// 对 null 进行处理</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(elements[i] == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(elements[i].equals(element)) <span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="扩容-ensureCapacity-int-capacity"><a href="#扩容-ensureCapacity-int-capacity" class="headerlink" title="扩容 - ensureCapacity(int capacity)"></a>扩容 - ensureCapacity(int capacity)</h3><p><img src="https://img-blog.csdnimg.cn/20200501002350334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczNDA5NQ==,size_16,color_FFFFFF,t_70" alt="扩容图示"></p>
<h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩容操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">	<span class="keyword">if</span>(oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">// 新容量为旧容量的1.5倍</span></span><br><span class="line">	<span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	E[] newElements = (E[])<span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">		newElements[i] = elements[i]; <span class="comment">// 拷贝原数组元素到新数组</span></span><br><span class="line">	&#125;</span><br><span class="line">	elements = newElements;</span><br><span class="line">	System.out.println(<span class="string">"size="</span>+oldCapacity+<span class="string">", 扩容到了"</span>+newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打印数组（toString）"><a href="#打印数组（toString）" class="headerlink" title="打印数组（toString）"></a>打印数组（toString）</h3><ul>
<li>重写 <code>toString</code> 方法</li>
<li>在 <code>toString</code> 方法中将元素拼接成字符串</li>
<li>字符串拼接建议使用 <code>StringBuilder</code></li>
</ul>
<h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 打印形式为: size=5, [99, 88, 77, 66, 55]</span></span><br><span class="line">	StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">	stringBuilder.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">0</span> != i) stringBuilder.append(<span class="string">", "</span>);</span><br><span class="line">		stringBuilder.append(elements[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	stringBuilder.append(<span class="string">"]"</span>);</span><br><span class="line">	<span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="自定义int型动态数组源码"><a href="#自定义int型动态数组源码" class="headerlink" title="自定义int型动态数组源码"></a>自定义int型动态数组源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size;		<span class="comment">// 元素数量	</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] elements; <span class="comment">// 所有的元素</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>; <span class="comment">// 初始容量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123; <span class="comment">// 容量小于10一律扩充为10</span></span><br><span class="line">		capacity = (capacity &lt; DEFAULT_CAPACITY) ? DEFAULT_CAPACITY : capacity;</span><br><span class="line">		elements = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 元素的数量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否为空</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否包含某个元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND; <span class="comment">//找的到该元素则返回True</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">		rangeCheckForAdd(index); <span class="comment">// 检查下标越界</span></span><br><span class="line">		ensureCapacity(size + <span class="number">1</span>); <span class="comment">// 确保容量够大</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 0 1 2 3 4 5 6 7 8 9	(index)</span></span><br><span class="line">		<span class="comment">// 1 2 3 4 5 6 x x x x	(原数组)</span></span><br><span class="line">		<span class="comment">// 在index=2处，插入9，元素全部后移</span></span><br><span class="line">		<span class="comment">// 1 2 9 3 4 5 6 x x x	(add后数组)</span></span><br><span class="line">		<span class="comment">// 先从后往前开始, 将每个元素往后移一位, 然后再赋值</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">			elements[i + <span class="number">1</span>] = elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		elements[index] = element; <span class="comment">// 赋值</span></span><br><span class="line">		size++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加元素到最后面</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">		add(size, element);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		<span class="keyword">return</span> elements[index];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		<span class="keyword">int</span> old = elements[index];</span><br><span class="line">		elements[index] = element;</span><br><span class="line">		<span class="keyword">return</span> old;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 0 1 2 3 4 5 	(index)</span></span><br><span class="line">		<span class="comment">// 1 2 3 4 5 6 	(原数组)</span></span><br><span class="line">		<span class="comment">// 删除index为2的元素，元素前移</span></span><br><span class="line">		<span class="comment">// 1 2 4 5 6	(remove后的数组)</span></span><br><span class="line">		<span class="keyword">int</span> old = elements[index];</span><br><span class="line">		<span class="comment">// 从前往后开始移, 用后面的元素覆盖前面的元素</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; size-<span class="number">1</span>; i++) &#123;</span><br><span class="line">			elements[i] = elements[i + <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		size--;</span><br><span class="line">		<span class="keyword">return</span> old;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查看元素的索引</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(elements[i] == element) <span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 清除所有元素</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">		size = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 扩容操作</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">		<span class="keyword">if</span>(oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line">		<span class="comment">// 新容量为旧容量的1.5倍</span></span><br><span class="line">		<span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">// 1.5</span></span><br><span class="line">		<span class="keyword">int</span>[] newElements = <span class="keyword">new</span> <span class="keyword">int</span>[newCapacity];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			newElements[i] = elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		elements = newElements;</span><br><span class="line">		System.out.println(<span class="string">"size="</span>+oldCapacity+<span class="string">", 扩容到了"</span>+newCapacity);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/****************封装好的功能函数*******************************/</span></span><br><span class="line">	<span class="comment">// 下标越界抛出的异常</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 检查下标越界(不可访问或删除size位置)</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)&#123;</span><br><span class="line">			outOfBounds(index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 检查add()的下标越界(可以在size位置添加)</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">			outOfBounds(index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/****************封装好的功能函数*******************************/</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 打印形式为: size=5, [99, 88, 77, 66, 55]</span></span><br><span class="line">		StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="number">0</span> != i) string.append(<span class="string">", "</span>);</span><br><span class="line">			string.append(elements[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		string.append(<span class="string">"]"</span>);</span><br><span class="line">		<span class="keyword">return</span> string.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="自定义泛型动态数组源码"><a href="#自定义泛型动态数组源码" class="headerlink" title="自定义泛型动态数组源码"></a>自定义泛型动态数组源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size;		<span class="comment">// 元素的数量	</span></span><br><span class="line">	<span class="keyword">private</span> E[] elements; 	<span class="comment">// 所有的元素</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>; <span class="comment">// 初始容量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123; <span class="comment">// 容量小于10一律扩充为10</span></span><br><span class="line">		capacity = (capacity &lt; DEFAULT_CAPACITY) ? DEFAULT_CAPACITY : capacity;</span><br><span class="line">		elements = (E[])<span class="keyword">new</span> Object[capacity];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 元素的数量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否为空</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否包含某个元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND; <span class="comment">// 找的到该元素则返回True</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>&#123; </span><br><span class="line">		rangeCheckForAdd(index); <span class="comment">// 检查下标越界</span></span><br><span class="line">		ensureCapacity(size + <span class="number">1</span>); <span class="comment">// 确保容量够大</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 0 1 2 3 4 5 6 7 8 9	(index)</span></span><br><span class="line">		<span class="comment">// 1 2 3 4 5 6 x x x x	(原数组)</span></span><br><span class="line">		<span class="comment">// 在index=2处，插入9，元素全部后移</span></span><br><span class="line">		<span class="comment">// 1 2 9 3 4 5 6 x x x	(add后数组)</span></span><br><span class="line">		<span class="comment">// 先从后往前开始, 将每个元素往后移一位, 然后再赋值</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">			elements[i + <span class="number">1</span>] = elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		elements[index] = element; <span class="comment">// 复制</span></span><br><span class="line">		size++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加元素到最后面</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>&#123;</span><br><span class="line">		add(size, element);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		<span class="keyword">return</span> elements[index];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		E old = elements[index];</span><br><span class="line">		elements[index] = element;</span><br><span class="line">		<span class="keyword">return</span> old;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		<span class="comment">// 0 1 2 3 4 5 	(index)</span></span><br><span class="line">		<span class="comment">// 1 2 3 4 5 6 	(原数组)</span></span><br><span class="line">		<span class="comment">// 删除index为2的元素，元素前移</span></span><br><span class="line">		<span class="comment">// 1 2 4 5 6	(remove后的数组)</span></span><br><span class="line">		<span class="comment">// 从前往后开始移, 用后面的元素覆盖前面的元素</span></span><br><span class="line">		E old = elements[index];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			elements[i] = elements[i + <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		elements[--size] = <span class="keyword">null</span>; <span class="comment">// 删除元素后, 将最后一位设置为null</span></span><br><span class="line">		<span class="keyword">return</span> old;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查看元素的索引</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		// 不对 null 进行处理也可以，但是健壮性不够</span></span><br><span class="line"><span class="comment">		for (int i = 0; i &lt; size; i++) &#123;</span></span><br><span class="line"><span class="comment">			if(elements[i].equals(element)) return i;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span>(element == <span class="keyword">null</span>)&#123; <span class="comment">// 对 null 进行处理</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(elements[i] == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(elements[i].equals(element)) <span class="keyword">return</span> i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 清除所有元素</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">// 使用泛型数组后要注意内存管理(将元素置null)</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			elements[i] = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		size = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 扩容操作</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">		<span class="keyword">if</span>(oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line">		<span class="comment">// 新容量为旧容量的1.5倍</span></span><br><span class="line">		<span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		E[] newElements = (E[])<span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			newElements[i] = elements[i]; <span class="comment">// 拷贝原数组元素到新数组</span></span><br><span class="line">		&#125;</span><br><span class="line">		elements = newElements;</span><br><span class="line">		System.out.println(<span class="string">"size="</span>+oldCapacity+<span class="string">", 扩容到了"</span>+newCapacity);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/****************封装好的功能函数**************************/</span></span><br><span class="line">	<span class="comment">// 下标越界抛出的异常</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 检查下标越界(不可访问或删除size位置)</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)&#123;</span><br><span class="line">			outOfBounds(index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 检查add()的下标越界(可以在size位置添加元素)</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">			outOfBounds(index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/****************封装好的功能函数***************************/</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 打印形式为: size=5, [99, 88, 77, 66, 55]</span></span><br><span class="line">		StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="number">0</span> != i) string.append(<span class="string">", "</span>);</span><br><span class="line">			string.append(elements[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		string.append(<span class="string">"]"</span>);</span><br><span class="line">		<span class="keyword">return</span> string.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">	list.add(<span class="keyword">new</span> Person(<span class="number">10</span>, <span class="string">"jack"</span>));</span><br><span class="line">	list.add(<span class="keyword">new</span> Person(<span class="number">20</span>, <span class="string">"rose"</span>));</span><br><span class="line">	list.add(<span class="keyword">null</span>);</span><br><span class="line">	list.add(<span class="keyword">null</span>);</span><br><span class="line">	</span><br><span class="line">	System.out.println(<span class="string">"add()添加元素: "</span> + list);</span><br><span class="line">	</span><br><span class="line">	System.out.println(<span class="string">"get()获取元素: "</span> + list.get(<span class="number">0</span>));</span><br><span class="line">	</span><br><span class="line">	list.set(<span class="number">0</span>, <span class="keyword">new</span> Person(<span class="number">99</span>, <span class="string">"ghost"</span>));</span><br><span class="line">	System.out.println(<span class="string">"set()设置元素值: "</span> + list);</span><br><span class="line">	</span><br><span class="line">	list.remove(<span class="number">0</span>);</span><br><span class="line">	System.out.println(<span class="string">"remove()删除元素: "</span> + list);</span><br><span class="line">	</span><br><span class="line">	list.clear();</span><br><span class="line">	System.out.println(<span class="string">"clear()清空数组: "</span> + list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-《恋·数·算》笔记之初识算法</title>
    <url>/2020/05/06/%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%81%8B%C2%B7%E6%95%B0%C2%B7%E7%AE%97%E3%80%8B%E4%B9%8B%E5%88%9D%E8%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>《恋·数·算》笔记 一</p>
<a id="more"></a>

<h1 id="初识算法"><a href="#初识算法" class="headerlink" title="初识算法"></a>初识算法</h1><p>感谢<a href="https://m.ke.qq.com/course/421398?course_id=421398&_bid=167&_wv=1" target="_blank" rel="noopener">小码哥</a>的《恋上数据结构和算法》，笔记呢，大多照搬<a href="https://blog.csdn.net/weixin_43734095/article/details/105116064" target="_blank" rel="noopener">萌宅鹿</a>君的笔记，感谢大佬们的分享，省得我一字一字的扣了。</p>
<h2 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">算法是用于解决特定问题的一系列的执行步骤。</span><br><span class="line">使用不同算法，解决同一个问题，效率可能相差非常大。比如：求第 n 个斐波那契数（fibonacci number）</span><br></pre></td></tr></table></figure>

<h2 id="如何评判一个算法的好坏？"><a href="#如何评判一个算法的好坏？" class="headerlink" title="如何评判一个算法的好坏？"></a>如何评判一个算法的好坏？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一般从以下维度来评估算法的优劣：</span><br></pre></td></tr></table></figure>

<ul>
<li>正确性、可读性、健壮性（对不合理输入的反应能力和处理能力）</li>
<li>时间复杂度（time complexity）<br>估算程序指令的执行次数（执行时间）</li>
<li>空间复杂度（space complexity）<br>估算所需占用的存储空间<br>  由于现在硬件发展的较好，一般情况下我们更侧重于时间复杂度。</li>
</ul>
<h2 id="大O表示法（Big-O）"><a href="#大O表示法（Big-O）" class="headerlink" title="大O表示法（Big O）"></a>大O表示法（Big O）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一般用大O表示法来描述复杂度，它表示的是数据规模 n 对应的复杂度。</span><br></pre></td></tr></table></figure>

<p>忽略常数、系数、低阶：</p>
<p>9 &gt;&gt; O(1)</p>
<p>2n + 3 &gt;&gt; O(n)</p>
<p>n<sup>2</sup> + 2n + 6 &gt;&gt; O(n<sup>2</sup>)</p>
<p>4n<sup>3</sup> + 3n<sup>2</sup> + 22n + 100 &gt;&gt; O(n<sup>3</sup>)</p>
<p>写法上，n3 等价于 n<sup>3</sup></p>
<p>注：大O表示法仅仅是一种粗略的分析模型，是一种估算，能帮助我们短时间内了解一个算法的执行效率。</p>
<p>对数阶的细节<br>对数阶一般省略底数</p>
<p>log<sub>2</sub>9 ∗ log<sub>9</sub>n &gt;&gt; log<sub>9</sub>n</p>
<p>所以 O(log<sub>2</sub>n) 、O(log<sub>9</sub>n) 统称为 O(logn)</p>
<p>常见的复杂度<br><img src="https://img-blog.csdnimg.cn/20200326125216195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczNDA5NQ==,size_16,color_FFFFFF,t_70" alt="常见时间复杂度"><br><img src="https://img-blog.csdnimg.cn/20200326125254163.png" alt="时间复杂度排序"><br><img src="https://img-blog.csdnimg.cn/20200326125550303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczNDA5NQ==,size_16,color_FFFFFF,t_70" alt="数据规模较小时的图表"><br><img src="https://img-blog.csdnimg.cn/20200326125519876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczNDA5NQ==,size_16,color_FFFFFF,t_70" alt="数据规模较大时的图表"></p>
<h3 id="多个数据规模的情况"><a href="#多个数据规模的情况" class="headerlink" title="多个数据规模的情况"></a>多个数据规模的情况</h3><p>时间复杂度：O(n + k)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">		System.out.println(<span class="string">"test"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">		System.out.println(<span class="string">"test"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="斐波那契数列复杂度分析"><a href="#斐波那契数列复杂度分析" class="headerlink" title="斐波那契数列复杂度分析"></a>斐波那契数列复杂度分析</h2><h3 id="斐波那契数列-递归解法"><a href="#斐波那契数列-递归解法" class="headerlink" title="斐波那契数列-递归解法"></a>斐波那契数列-递归解法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// O(2^n)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">	<span class="keyword">return</span> fib1(n - <span class="number">1</span>) + fib1(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复杂度分析:<br><img src="https://img-blog.csdnimg.cn/20200326130304764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczNDA5NQ==,size_16,color_FFFFFF,t_70" alt="斐波那契_递归解法_复杂度分析"></p>
<h3 id="斐波那契数列-循环解法"><a href="#斐波那契数列-循环解法" class="headerlink" title="斐波那契数列-循环解法"></a>斐波那契数列-循环解法</h3><p>不开辟任何空间，只使用循环完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> second = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> sum = first + second;</span><br><span class="line">		first = second;</span><br><span class="line">		second = sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	// 也可以使用while循环</span></span><br><span class="line"><span class="comment">	while (n-- &gt; 1) &#123;</span></span><br><span class="line"><span class="comment">		second += first;</span></span><br><span class="line"><span class="comment">		first = second - first;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">return</span> second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="斐波那契数列-开辟数组解法"><a href="#斐波那契数列-开辟数组解法" class="headerlink" title="斐波那契数列-开辟数组解法"></a>斐波那契数列-开辟数组解法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib3</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span>[] fib = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">	fib[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	fib[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; fib.length; i++)&#123;</span><br><span class="line">		fib[i] = fib[i-<span class="number">1</span>] + fib[i-<span class="number">2</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fib[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="算法的优化方向"><a href="#算法的优化方向" class="headerlink" title="算法的优化方向"></a>算法的优化方向</h2><p>用尽量少的存储空间<br>用尽量少的执行步骤（执行时间）</p>
<p>根据情况，可以<br>空间换时间<br>时间换空间</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-Vue基本语法</title>
    <url>/2020/04/24/%E7%AC%94%E8%AE%B0-Vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>Vue基础语法的使用了解</p>
<a id="more"></a>

<h1 id="Vue基本语法"><a href="#Vue基本语法" class="headerlink" title="Vue基本语法"></a>Vue基本语法</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p><strong>Vue.js</strong>也称为Vue，读音/vju:/，类似view。</p>
<ul>
<li>是一个构建用户界面的框架</li>
<li>是一个轻量级MVVM（Model-View-ViewModel）框架</li>
<li><strong>数据驱动</strong>+<strong>组件化</strong>的前端开发（核心思想）</li>
<li>通过简单的API实现<strong>响应式的数据绑定</strong>和<strong>组合的视图组件</strong></li>
<li>本身只关注UI，可轻松引入vue插件和其他第三方库开发项目 </li>
</ul>
<h2 id="命令式编程和指令式编程"><a href="#命令式编程和指令式编程" class="headerlink" title="命令式编程和指令式编程"></a>命令式编程和指令式编程</h2><h3 id="命令式编程"><a href="#命令式编程" class="headerlink" title="命令式编程"></a>命令式编程</h3><p> 原生js做法</p>
<ol>
<li>创建div元素，设置id属性</li>
<li>定义一个变量叫message</li>
<li>将message变量放在div元素中显示</li>
<li>修改message数据</li>
<li>将修改的元素替换到div</li>
</ol>
<h3 id="声明式编程"><a href="#声明式编程" class="headerlink" title="声明式编程"></a>声明式编程</h3><p> vue写法</p>
<ol>
<li>创建一个div元素，设置id属性</li>
<li><strong>定义一个vue对象，将div挂载在vue对象上</strong></li>
<li>在vue对象内定义变量message，并<strong>绑定数据</strong></li>
<li>将message变量放在div元素上显示</li>
<li>修改vue对象中的变量message，div元素数据自动改变</li>
</ol>
<p>语法注意：<code>new Vue</code>时，<strong>Vue需首字母大写</strong></p>
<p>语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue_det"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#vue_det'</span>,<span class="comment">// 用于要挂载管理的元素，'vue_detDOM'为元素中的 id</span></span></span><br><span class="line"><span class="actionscript">        data: &#123;<span class="comment">// 用来定义属性</span></span></span><br><span class="line"><span class="actionscript">            site: <span class="string">"菜鸟教程"</span>,</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"www.runoob.com"</span>,</span></span><br><span class="line"><span class="actionscript">            alexa: <span class="string">"10000"</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        methods: &#123;<span class="comment">// 用来定义函数，可以通过 return 来返回函数值。</span></span></span><br><span class="line"><span class="actionscript">            details: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span>  <span class="keyword">this</span>.site + <span class="string">" - 学的不仅是技术，更是梦想！"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue相关插件"><a href="#Vue相关插件" class="headerlink" title="Vue相关插件"></a>Vue相关插件</h2><ul>
<li><strong>vue-cli</strong>:vue 脚手架 </li>
<li><strong>vue-resource(axios)</strong>:ajax 请求 </li>
<li><strong>vue-router</strong>: 路由 </li>
<li><strong>vuex</strong>: 状态管理 </li>
<li><strong>vue-lazyload</strong>: 图片懒加载 </li>
<li><strong>vue-scroller</strong>: 页面滑动相关 </li>
<li><strong>mint-ui</strong>: 基于 vue 的 UI 组件库(移动端)</li>
<li><strong>element-ui</strong>: 基于 vue 的 UI 组件库(PC 端)</li>
</ul>
<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="模板的理解"><a href="#模板的理解" class="headerlink" title="模板的理解"></a>模板的理解</h3><p>动态的html页面，包含了一些JS语法代码。例如：Mustache语法和指令(以v开头的标签属性)</p>
<h3 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h3><h4 id="Mustache语法"><a href="#Mustache语法" class="headerlink" title="Mustache语法"></a>Mustache语法</h4><p>mustache是胡须的意思，因为{&#123; &#125;}像胡须，又叫大括号语法。</p>
<p>在vue对象挂载的dom元素中，{&#123; &#125;}不仅可以<strong>直接写变量</strong>，还可以<strong>写简单表达式</strong>，并且对标签不敏感。</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;,啧啧啧<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mustache的语法不仅可以直接写变量，还可以写简单表达式，函数，三目运算符... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName + lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName + " " + lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125;&#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;count * 2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el:<span class="string">"#app"</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line"><span class="actionscript">        message:<span class="string">"你好啊"</span>,</span></span><br><span class="line"><span class="actionscript">        firstName:<span class="string">"aaa"</span>,</span></span><br><span class="line"><span class="actionscript">        lastName:<span class="string">"bbb"</span>,</span></span><br><span class="line">        count:100</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>在某些时候我们不希望直接输出<code>&lt;a href=&#39;http://www.baidu.com&#39;&gt;百度一下&lt;/a&gt;</code>这样的字符串，而输出被html自己转化的超链接。此时可以使用<strong>v-html</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>不使用v-html<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用v-html，直接插入html<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">"你好啊"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">      url:"<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'http://www.baidu.com'</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>v-text会覆盖DOM元素中的数据，相当于JS的<strong>innerHtml</strong>方法</p>
<p>使用{&#123;message&#125;}是拼接变量和字符串，而是用v-text是<strong>直接覆盖字符串内容</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>不使用v-text<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;，啧啧啧<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用v-text，以文本形式显示,会覆盖下面的 "，啧啧啧" <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span>，啧啧啧<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">"你好啊"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><p>有时候我们期望直接输出{&#123;message&#125;}这样的字符串，而不是被{&#123;&#125;}语法转化的message的变量值，此时可以使用<code>v-pre</code>标签。</p>
<p>使用v-pre修饰的dom会直接输出字符串。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>不使用v-pre<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用v-pre,不会解析<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">"你好啊"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><p>有时因为加载延时问题，数据没有及时刷新，就造成了页面显示从{&#123;message&#125;}到message变量“你好啊”的变化，这样闪动的变化，会造成用户体验不好。此时需要使用到<code>v-cloak</code>的这个标签。可与 css 配合: [v-cloak] { display: none }<br>在vue<strong>解析之前</strong>，div属性中有<code>v-cloak</code>这个标签，在vue<strong>解析完成之后</strong>，v-cloak标签被移除。<br>类似于div开始有一个css属性<code>display:none;</code>，加载完成之后，css属性变成<code>display:block</code>，元素才显示出来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-cloak指令的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//在vue解析前，div中有一个属性v-cloak</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//在vue解析之后，div中没有一个属性v-cloak</span></span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">          message: <span class="string">"你好啊"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>作用：<strong>动态绑定语法属性</strong></p>
<h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><h5 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgUrl"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="语法糖写法"><a href="#语法糖写法" class="headerlink" title="语法糖写法"></a>语法糖写法</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即v-bind：的写法可省略成 : --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgUrl"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="v-bind动态绑定class"><a href="#v-bind动态绑定class" class="headerlink" title="v-bind动态绑定class"></a>v-bind动态绑定class</h5><ul>
<li>绑定方式：对象语法。对象语法的含义是<strong>class后面跟的是一个对象</strong>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对象里冒号左边是类选择器的名字，右边是data里的具体属性名，且右边的值需为boolean类型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用法一:直接通过绑定一个类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class-</span>"&#123;<span class="attr">active:</span> <span class="attr">isActive</span>&#125;"&gt;</span>Hello World /h2&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用法二:也可以通过判断，传入多个值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"&#123;active: isActive,line: isLine&#125;"</span>&gt;</span>Hello World/h2&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用法三:和普通的类同时存在，并不冲突。注:如果isActive和isLine都为true，那么会有tit1e/active/line三个类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"[active： isActive, line： istine]"</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用法四:如果过于复杂，可以放在一个methods或者.computed中注:classes是一个计算属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"classes"</span>&gt;</span>Hello bor ld<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>绑定方式：数组语法。数组语法的含义是<strong>class后面跟的是一个数组</strong>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数组里的各项值是data里的属性名，且对应着类选择器的名字--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用法一:直接通过绑定一个类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class-</span>"[<span class="attr">active</span>]"&gt;</span>Hello World /h2&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用法二:也可以直接传入多个值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"[active, line]"</span>&gt;</span>Hello World/h2&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用法三:和普通的类同时存在，并不冲突。注:会有tit1e/active/line三个类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"[active, line]"</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用法四:如果过于复杂，可以放在一个methods或者.computed中注:classes是一个计算属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"classes"</span>&gt;</span>Hello bor ld<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="v-bind动态绑定class-1"><a href="#v-bind动态绑定class-1" class="headerlink" title="v-bind动态绑定class"></a>v-bind动态绑定class</h5><ul>
<li>绑定方式：对象语法。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">      font-size: 50px;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 写CSS的属性名的时候，可以使用驼峰式(fontSize)或短横线分隔，且用单引号括起来('font-size') --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;h2 :style="&#123;key(属性名): value(属性值)&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--'50px'必须加上单引号, 否则是当做一个变量去解析--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;h2 :style="&#123;fontSize: '50px'&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--finalSize当成一个变量使用--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;h2 :style="&#123;fontSize: finalSize&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"&#123;fontSize: finalSize + 'px', backgroundColor: finalColor&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"getStyles()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'你好啊'</span>,</span></span><br><span class="line">      finalSize: 100,</span><br><span class="line"><span class="actionscript">      finalColor: <span class="string">'red'</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      getStyles: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;fontSize: <span class="keyword">this</span>.finalSize + <span class="string">'px'</span>, backgroundColor: <span class="keyword">this</span>.finalColor&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>绑定方式：数组语法。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"[baseStyle, baseStyle1]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'你好啊'</span>,</span></span><br><span class="line"><span class="actionscript">      baseStyle: &#123;backgroundColor: <span class="string">'red'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">      baseStyle1: &#123;fontSize: <span class="string">'100px'</span>&#125;,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p><strong>Vue中使用v-model指令来实现表单元素和数据的双向绑定</strong>。当然，我们也可以将v-model用于textarea元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">  &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'你好啊'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h4><p><code>v-mode</code>其实是一个语法糖，它的背后本质上是包含两个操作：</p>
<ol>
<li><code>v-bind</code>绑定一个value属性</li>
<li><code>v-on</code>指令给当前元素绑定input事件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;input type="text" v-model="message"&gt; 等同于 </span></span><br><span class="line"><span class="comment">	  &lt;input type="text" :value="message" @input="valueChange"&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"message"</span> @<span class="attr">input</span>=<span class="string">"message = $event.target.value"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'你好啊'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      valueChange(event) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.message = event.target.value;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-model结合radio"><a href="#v-model结合radio" class="headerlink" title="v-model结合radio"></a>v-model结合radio</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>女</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的性别是: &#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'你好啊'</span>,</span></span><br><span class="line"><span class="actionscript">      sex: <span class="string">'女'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-model结合checkbox"><a href="#v-model结合checkbox" class="headerlink" title="v-model结合checkbox"></a>v-model结合checkbox</h4><p>复选框分为两种情况：单个勾选框和多个勾选框</p>
<ul>
<li>单个勾选框，v-model即为布尔值。此时input的value并不影响v-model的值。</li>
<li>多个复选框<ul>
<li>当是多个复选框时，因为可以选中多个，所以对应的data中的属性是一个数组</li>
<li>当选中某一个时，就会将input的value添加到数组中</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的爱好是: &#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">"item in originHobbies"</span> <span class="attr">:for</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">:value</span>=<span class="string">"item"</span> <span class="attr">:id</span>=<span class="string">"item"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'你好啊'</span>,</span></span><br><span class="line"><span class="actionscript">      isAgree: <span class="literal">false</span>, <span class="comment">// 单选框</span></span></span><br><span class="line"><span class="actionscript">      hobbies: [], <span class="comment">// 多选框,</span></span></span><br><span class="line"><span class="actionscript">      originHobbies: [<span class="string">'篮球'</span>, <span class="string">'足球'</span>, <span class="string">'乒乓球'</span>, <span class="string">'羽毛球'</span>, <span class="string">'台球'</span>, <span class="string">'高尔夫球'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="model结合select"><a href="#model结合select" class="headerlink" title="model结合select"></a>model结合select</h4><p>和checkbox一样，select也分单选和多选两种情况。</p>
<ul>
<li>单选<ul>
<li>只能选中一个值。v-model绑定的是一个值</li>
<li>当我们选中option中的一个时，会将它对应的value赋值到mySelect中</li>
</ul>
</li>
<li>多选：可以选中多个值<ul>
<li>v-model绑定的是一个数组</li>
<li>当选中多个值时，就会将选中的option对应的value添加到数组mySelects中</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1.选择一个--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"abc"</span> <span class="attr">v-model</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"榴莲"</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"葡萄"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是: &#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--2.选择多个--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"abc"</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"榴莲"</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"葡萄"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是: &#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'你好啊'</span>,</span></span><br><span class="line"><span class="actionscript">      fruit: <span class="string">'香蕉'</span>,</span></span><br><span class="line">      fruits: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h4><h5 id="lazy修饰符"><a href="#lazy修饰符" class="headerlink" title="lazy修饰符"></a>lazy修饰符</h5><p>默认情况下，<code>v-model</code>默认是在input事件中同步输入框的数据的。也就是说，一旦有数据发生改变对应的data中的数据就会自动发生改变。<strong>lazy修饰符可以让数据在失去焦点或者回车时才会更新</strong>。</p>
<h5 id="number修饰符"><a href="#number修饰符" class="headerlink" title="number修饰符"></a>number修饰符</h5><p>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理。但是如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理。number修饰符可以让在输入框中输入的内容自动转成数字类型。</p>
<h5 id="trim修饰符"><a href="#trim修饰符" class="headerlink" title="trim修饰符"></a>trim修饰符</h5><p>如果输入的内容首尾有很多空格，通常我们希望将其去除的话，<strong>trim修饰符可以过滤内容左右两边的空格</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--2.修饰符: number--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;-&#123;&#123;typeof age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--3.修饰符: trim--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您输入的名字:&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'你好啊'</span>,</span></span><br><span class="line">      age: 0,</span><br><span class="line"><span class="actionscript">      name: <span class="string">''</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> age = <span class="number">0</span></span></span><br><span class="line"><span class="actionscript">  age = <span class="string">'1111'</span></span></span><br><span class="line"><span class="actionscript">  age = <span class="string">'222'</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>功能: 绑定指定事件名的回调函数<br>完整写法: v-on:keyup=’xxx’<br>​         v-on:keyup=’xxx(参数)’<br>​         v-on:keyup.enter=’xxx’<br>简洁写法: @keyup=’xxx’ ==&gt;@是<code>v-on</code>的语法糖，方法名的<code>()</code>在    <code>@事件</code>中可以省略<br>​         @keyup.enter=’xxx’</p>
<h4 id="v-on的基本使用"><a href="#v-on的基本使用" class="headerlink" title="v-on的基本使用"></a>v-on的基本使用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>绑定事件监听<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"handleClick"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>点我 2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span> </span><br><span class="line"><span class="actionscript">		<span class="keyword">new</span> Vue(&#123; </span></span><br><span class="line"><span class="actionscript">			el: <span class="string">'#app'</span>,  </span></span><br><span class="line">			methods: &#123; </span><br><span class="line">				handleClick () &#123; </span><br><span class="line"><span class="actionscript">					alert(<span class="string">'处理点击'</span>) </span></span><br><span class="line">					&#125; </span><br><span class="line">				&#125; </span><br><span class="line">		&#125;) </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-on的参数传递"><a href="#v-on的参数传递" class="headerlink" title="v-on的参数传递"></a>v-on的参数传递</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 事件没传参 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick()"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 事件调用方法传参，写函数时候省略小括号，但是函数本身需要传递一个参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick2(123)"</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick2()"</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick2"</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 事件调用时候需要传入event还需要传入其他参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick3($event,123)"</span>&gt;</span>按钮6<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line">    methods:&#123;</span><br><span class="line">      btnClick()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"点击XXX"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      btnClick2(value)&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(value+<span class="string">"----------"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      btnClick3(event,value)&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event+<span class="string">"----------"</span>+value);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按钮4调用<code>btnClick2(value){}</code>，此时为<code>undefined</code>。<br>按钮5调用时省略了()，会自动传入原生event事件。<br>按钮6调用时需要传入<strong>某个参数</strong>和<strong>event事件</strong>，可以通过<code>$event</code>传入事件</p>
<h4 id="v-on的修饰符"><a href="#v-on的修饰符" class="headerlink" title="v-on的修饰符"></a>v-on的修饰符</h4><p><code>.stop</code>修饰的事件不会传播，不会冒泡到上层，调用了<code>event.stopPropagation()</code>。<br><code>.prevent</code> 修饰的事件会调用<code>event.preeventDefault</code><strong>阻止默认行为</strong>。<br><code>.enter</code>修饰的事件会监听键盘的<code>enter</code>事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1. .stop的使用，btn的click事件不会传播，不会冒泡到上层，调用event.stopPropagation() --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"divClick"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"btnClick"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2. .prevent 调用event.preeventDefault阻止默认行为  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"www.baidu.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> @<span class="attr">click.prevent</span>=<span class="string">"submitClick"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--3. 监听键盘的事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keydown.enter</span>=<span class="string">"keyup"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line">    methods:&#123;</span><br><span class="line">      btnClick()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"点击button"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      divClick()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"点击div"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      submitClick()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"提交被阻止了"</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      keyup()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"keyup点击"</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h3><p>在 computed 属性对象中定义<strong>计算属性</strong>的方法。然后在<strong>标签属性中</strong>使用<code>方法名</code>或在<strong>页面中</strong>使用{&#123;方法名&#125;}来显示计算的结果。</p>
<p>性能上<code>computed</code>明显比<code>methods</code>好。而methods，即使数据没有改变，也需要再次执行。<strong>计算属性有缓存</strong>，只有关联属性改变才会再次计算。</p>
<h4 id="计算属性的基本使用"><a href="#计算属性的基本使用" class="headerlink" title="计算属性的基本使用"></a>计算属性的基本使用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"First Name"</span> <span class="attr">v-model</span>=<span class="string">"firstName"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">placeholder</span>=<span class="string">"Last Name"</span> <span class="attr">v-model</span>=<span class="string">"lastName"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 计算属性 --&gt;</span></span><br><span class="line">	姓名 1(单向): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Full Name"</span> <span class="attr">v-model</span>=<span class="string">"fullName1"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 方法 --&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span> </span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123; </span></span><br><span class="line"><span class="actionscript">	el: <span class="string">'#app'</span>,  </span></span><br><span class="line">	data: &#123;</span><br><span class="line"><span class="actionscript">		firstName: <span class="string">'A'</span>,</span></span><br><span class="line"><span class="actionscript">		lastName: <span class="string">'B'</span></span></span><br><span class="line">	&#125;,</span><br><span class="line">	computed: &#123;</span><br><span class="line"><span class="actionscript">		fullName1: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; </span></span><br><span class="line"><span class="actionscript">			<span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">      		getFullName()&#123;</span><br><span class="line"><span class="actionscript">        		<span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">      	&#125;</span><br><span class="line">&#125;) </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="计算属性的复杂使用"><a href="#计算属性的复杂使用" class="headerlink" title="计算属性的复杂使用"></a>计算属性的复杂使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;h2&gt;总价格：&#123;&#123;totalPrice&#125;&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  const app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el:"#app",</span></span><br><span class="line"><span class="regexp">    data:&#123;</span></span><br><span class="line"><span class="regexp">      books:[</span></span><br><span class="line"><span class="regexp">        &#123;id:110,name:"JavaScript从入门到入土",price:119&#125;,</span></span><br><span class="line"><span class="regexp">        &#123;id:111,name:"Java从入门到放弃",price:80&#125;,</span></span><br><span class="line"><span class="regexp">        &#123;id:112,name:"编码艺术",price:99&#125;,</span></span><br><span class="line"><span class="regexp">        &#123;id:113,name:"代码大全",price:150&#125;,</span></span><br><span class="line"><span class="regexp">      ]</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    computed: &#123;</span></span><br><span class="line"><span class="regexp">  totalPrice() &#123;</span></span><br><span class="line"><span class="regexp">	  let total = 0;</span></span><br><span class="line"><span class="regexp">	  for (let i = 0; i &lt; this.books.length; i ++) &#123;</span></span><br><span class="line"><span class="regexp">		  total += this.books[i].price;</span></span><br><span class="line"><span class="regexp">	  &#125;</span></span><br><span class="line"><span class="regexp">	  return total;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的setter和getter</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>计算属性：computed的getter/setter<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>fullName<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	&#123;&#123;fullName&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>firstName<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	&#123;&#123;firstName&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	&#123;&#123;lastName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el:<span class="string">"#app"</span>,</span></span><br><span class="line">		data:&#123;</span><br><span class="line"><span class="actionscript">			firstName:<span class="string">"zhang"</span>,</span></span><br><span class="line"><span class="actionscript">		    lastName:<span class="string">"san"</span>,</span></span><br><span class="line">		    &#125;,</span><br><span class="line">		computed: &#123;</span><br><span class="line">			fullName: &#123;</span><br><span class="line"><span class="actionscript">				<span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="comment">&lt;!-- set方法可以设置值，但一般不用 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">var</span> list = value.split(<span class="string">' '</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.firstName = list[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.lastName = list[<span class="number">1</span>];</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="计算属性之侦听器watch"><a href="#计算属性之侦听器watch" class="headerlink" title="计算属性之侦听器watch"></a>计算属性之侦听器watch</h4><p><code>computed</code>范围在vue实例内，修改vue实例外部对象，不会重新计算渲染。<br>但是如果先修改了vue实例外对象，再修改vue的<code>computed</code>，那么vue实例外部对象的值也会重新渲染。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>侦听器：watch<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          &#123;&#123;watchFullName&#125;&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          &#123;&#123;age&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> other = <span class="string">'This is other'</span>;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">              el:<span class="string">"#app"</span>,</span></span><br><span class="line">              data:&#123;</span><br><span class="line"><span class="actionscript">              firstName:<span class="string">"zhang"</span>,</span></span><br><span class="line"><span class="actionscript">              lastName:<span class="string">"san"</span>,</span></span><br><span class="line"><span class="actionscript">              watchFullName:<span class="string">"zhangsan"</span>,</span></span><br><span class="line">              age:18,</span><br><span class="line">              &#125;,</span><br><span class="line">              watch: &#123;</span><br><span class="line"><span class="actionscript">                  firstName:<span class="function"><span class="keyword">function</span><span class="params">(newFirstName, oldFirstName)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                      <span class="built_in">console</span>.log(<span class="string">"firstName触发了watch,newFirstName="</span>+newFirstName+<span class="string">",oldFirstName="</span>+oldFirstName)</span></span><br><span class="line"><span class="actionscript">                      <span class="keyword">this</span>.watchFullName = <span class="keyword">this</span>.firstName+<span class="keyword">this</span>.lastName+<span class="string">","</span>+other</span></span><br><span class="line">                  &#125;,</span><br><span class="line"><span class="actionscript">                  lastName:<span class="function"><span class="keyword">function</span><span class="params">(newLastName, oldLastName)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                      <span class="built_in">console</span>.log(<span class="string">"lastName触发了watch,newLastName="</span>+newLastName+<span class="string">",oldLastName="</span>+oldLastName)</span></span><br><span class="line"><span class="actionscript">                      <span class="keyword">this</span>.watchFullName = <span class="keyword">this</span>.firstName+<span class="keyword">this</span>.lastName+<span class="string">","</span>+other</span></span><br><span class="line">                  &#125;  </span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>computed</code>通常监听多个变量，watch监听数据变化，一般只监听一个变量或数组。<br>watch(<code>异步场景</code>)，computed(<code>数据联动</code>)</p>
<h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><h4 id="v-if、v-else、v-else-if"><a href="#v-if、v-else、v-else-if" class="headerlink" title="v-if、v-else、v-else-if"></a>v-if、v-else、v-else-if</h4><p>v-if用于条件判断，判断DOM元素是否显示。<br>v-if的变量值为<strong>布尔值</strong>，为true才渲染DOM<br>v-if、v-else、v-else-if联合使用相当于if、elseif、else，但是在条件比较多的时候建议使用计算属性。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"isFlag"</span>&gt;</span>isFlag为true显示这个<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>isShow为true是显示这个<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"age&lt;18"</span>&gt;</span>小于18岁未成年<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"age&lt;60"</span>&gt;</span>大于18岁小于60岁正值壮年<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>=<span class="string">""</span>&gt;</span>大于60岁,暮年<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      isFlag:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      isShow:<span class="literal">false</span>,</span></span><br><span class="line">      age:66</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-if的示例"><a href="#v-if的示例" class="headerlink" title="v-if的示例"></a>v-if的示例</h4><p>点击按钮切换登录方式的示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isUser"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>=<span class="string">"isUser"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户邮箱"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"isUser=!isUser"</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el:<span class="string">"#app"</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line"><span class="actionscript">        isUser:<span class="literal">true</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>该示例使用<code>v-if</code>和<code>v-else</code>选择渲染指定的Dom，点击按钮对<code>isUser</code>变量取反。<br>存在的问题：切换输入框后，输入框未自动清空</p>
<p>解决方式：给对应的dom元素加上<code>key</code>值，并保证<code>key</code>不同。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户邮箱"</span> <span class="attr">key</span>=<span class="string">"email"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>出现问题的原因：<code>input</code>输入框被复用了</p>
<ol>
<li>vue在进行DOM渲染是，处于性能考虑，会复用已经存在的元素，而不是每次都创建新的DOM元素。</li>
<li>在上面demo中，Vue内部发现原来的input元素不再使用，所以直接将其映射对应虚拟DOM，用来复用。</li>
</ol>
<h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p><code>v-show</code>的变量也是布尔值，为true才显示内容，类似CSS的<code>display</code><br><code>v-show</code>看似和<code>v-if</code>实现一样的效果，但是内部<code>v-show</code>只是用css将操作的元素<strong>隐藏显示</strong>，而<code>v-if</code>是新增和删除元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">"isFlag"</span>&gt;</span>v-show只是操作元素的style属性display，不管怎样都会被创建<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"isFlag"</span>&gt;</span>v-if是新增和删除dom元素<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      isFlag:<span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历循环"><a href="#遍历循环" class="headerlink" title="遍历循环"></a>遍历循环</h3><h4 id="v-for遍历数组"><a href="#v-for遍历数组" class="headerlink" title="v-for遍历数组"></a>v-for遍历数组</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 没有使用索引的v-for --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'item in names'</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 使用了索引的v-for --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'(item,index) in names'</span>&gt;</span>&#123;&#123;index +':' + item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">'#app'</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			names: [<span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>]</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一般情况下，需要使用索引值。<br><code>&lt;li v-for=&quot;(item,index) in names&quot; &gt;{&amp;#123;index+&quot;:&quot;+item&amp;#125;}&lt;/li&gt;</code>index表示<strong>索引</strong>，item表示当前遍<strong>历的元素</strong>。</p>
<h4 id="v-for遍历对象"><a href="#v-for遍历对象" class="headerlink" title="v-for遍历对象"></a>v-for遍历对象</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 1.遍历过程没有使用index索引--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 格式为：key-value --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'(item,key) in user'</span>&gt;</span>&#123;&#123;key + ':' + item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 2.遍历过程使用了ndex索引--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 格式为：key-value-index --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'(item,key,index) in user'</span>&gt;</span>&#123;&#123;key + ':' + index + ':' + item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">'#app'</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line">			user: &#123;</span><br><span class="line"><span class="actionscript">				name: <span class="string">"张三"</span>,</span></span><br><span class="line">				age: 18,</span><br><span class="line"><span class="actionscript">				identity: <span class="string">"法外狂徒"</span></span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>item</code>是当前对象的属性值，<code>index</code>是索引(下标)，<code>key</code>是当前对象的属性名</p>
<h4 id="组件的key属性"><a href="#组件的key属性" class="headerlink" title="组件的key属性"></a>组件的key属性</h4><p>官方推荐我们在使用v-for时，给对应的元素或组件添加上一个<code>:key</code>属性。</p>
<ul>
<li>我们需要使用key来<strong>给每个节点做一个唯一标识</strong></li>
<li>Diff算法就可以正确的识别此节点口找到正确的位置区插入新的节点。</li>
<li>key的作用主要是为了<strong>高效的更新虚拟DOM</strong></li>
</ul>
<h4 id="检测数组更新的响应式方法"><a href="#检测数组更新的响应式方法" class="headerlink" title="检测数组更新的响应式方法"></a>检测数组更新的响应式方法</h4><p>因为Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，使视图会发生对应的更新。Vue中包含了一组<strong>观察数组编译的方法</strong>，使用它们<strong>改变数组也会触发视图的更新</strong>。</p>
<ol>
<li>btn2按钮是通过索引值修改数组的值，这种情况，数组letters变化，<strong>DOM不会变化</strong>。</li>
<li>而数组的方法，例如<code>push()</code>、<code>pop()</code>、<code>shift()</code>、<code>unshift()</code>、<code>splice()</code>、<code>sort()</code>、<code>reverse()</code>等方法修改数组的数据，<strong>DOM元素会随之修改</strong>。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 数组的响应式方法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in letters"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btn1"</span>&gt;</span>push<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btn2"</span>&gt;</span>通过索引值修改数组<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      letters:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      btn1()&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//1.push</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// this.letters.push('f')</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//2.pop()删除最后一个元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.pop()</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//3.shift()删除第一个</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//this.letters.shift()</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//4.unshift()添加在最前面,可以添加多个</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//this.letters.unshift('aaa','bbb','ccc')</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//5.splice():删除元素/插入元素/替换元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//splice(1,1)在索引为1的地方删除一个元素,第二个元素不传，直接删除后面所有元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//splice(index,0,'aaa')在索引index后面删除0个元素，加上'aaa',</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//splice(1,1,'aaa')替换索引为1的后一个元素为'aaa'</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// this.letters.splice(2,0,'aaa')</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//6.sort()排序可以传入一个函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//this.letters.sort()</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//7.reverse()反转</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// this.letters.reverse()</span></span></span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      btn2()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters[<span class="number">0</span>]=<span class="string">'f'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-多线程</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>多线程的学习</p>
<a id="more"></a>

<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="0-基本概念"><a href="#0-基本概念" class="headerlink" title="0. 基本概念"></a>0. 基本概念</h2><h3 id="0-0-程序-program"><a href="#0-0-程序-program" class="headerlink" title="0.0. 程序(program)"></a>0.0. 程序(program)</h3><p>是为完成特定任务、用某种语言编写的一组指令的集合。指一段<strong>静态的代码</strong>，静态对象。</p>
<h3 id="0-1-进程-process"><a href="#0-1-进程-process" class="headerlink" title="0.1. 进程(process)"></a>0.1. 进程(process)</h3><p>是程序的一次执行过程，或是正在运行的一个程序。是一个<strong>动态的过程</strong>，有它自身的产生、存在和消亡的过程。是操作系统管理和调度的最小单位。每个进程之间的内存相互独立。</p>
<h3 id="0-2-线程-thread"><a href="#0-2-线程-thread" class="headerlink" title="0.2. 线程(thread)"></a>0.2. 线程(thread)</h3><p>线程是程序内部的一条执行路径。是CPU调度任务的最小单位。线程共享同一个进程的内存。</p>
<h3 id="0-3-并行"><a href="#0-3-并行" class="headerlink" title="0.3. 并行"></a>0.3. 并行</h3><p>并行：<strong>多个CPU同时执行多个任务</strong>。例：多个人同时做不同的事。</p>
<h3 id="0-4-并发"><a href="#0-4-并发" class="headerlink" title="0.4. 并发"></a>0.4. 并发</h3><p>并发：一个CPU(采用时间片)同时执行多个任务。例：秒杀、多个人做同一件事。</p>
<h3 id="0-5-何时需要多线程"><a href="#0-5-何时需要多线程" class="headerlink" title="0.5. 何时需要多线程"></a>0.5. 何时需要多线程</h3><ul>
<li>程序需要执行<strong>两个或多个任务</strong></li>
<li>程序需要<strong>实现一些需要等待的任务</strong>时，如用户输入、文件读写操作、网络操作、搜索等</li>
<li>需要一些<strong>后台运行的程序</strong>时</li>
</ul>
<h2 id="1-线程的创建和使用"><a href="#1-线程的创建和使用" class="headerlink" title="1. 线程的创建和使用"></a>1. 线程的创建和使用</h2><h3 id="1-0-JDK1-5之前"><a href="#1-0-JDK1-5之前" class="headerlink" title="1.0. JDK1.5之前"></a>1.0. JDK1.5之前</h3><ul>
<li>继承Thread类的方式</li>
<li>实现Runnable接口的方式</li>
</ul>
<h3 id="1-1-JDK1-5之后"><a href="#1-1-JDK1-5之后" class="headerlink" title="1.1. JDK1.5之后"></a>1.1. JDK1.5之后</h3><ul>
<li>继承Thread类的方式</li>
<li>实现Runnable接口的方式</li>
<li>实现Callable接口的方式</li>
<li>使用线程池</li>
</ul>
<h4 id="1-1-0-方式一：继承Thread类"><a href="#1-1-0-方式一：继承Thread类" class="headerlink" title="1.1.0. 方式一：继承Thread类"></a>1.1.0. 方式一：继承Thread类</h4><ul>
<li>继承Thread类</li>
<li>重写<code>public void run()</code>方法</li>
<li>创建线程对象</li>
<li>启动线程：<code>线程对象.start();</code></li>
</ul>
<h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ul>
<li>手动调用<code>run()</code>方法，是启动不了线程的，要想启动线程，得调用<code>start()</code>方法。</li>
<li>一个线程对象只能调用一次<code>start()</code>方法，否则抛出<strong>IllegalThreadStateException</strong>异常</li>
</ul>
<h4 id="1-1-1-方式二：实现Runnable接口"><a href="#1-1-1-方式二：实现Runnable接口" class="headerlink" title="1.1.1. 方式二：实现Runnable接口"></a>1.1.1. 方式二：实现Runnable接口</h4><ul>
<li>实现Runnable接口</li>
<li>实现<code>public void run ()</code>方法</li>
<li>创建线程对象</li>
<li>启动线程：借助Thread类的对象，<code>new Thread (自定义的线程对象).start()</code></li>
</ul>
<h4 id="1-1-2-上面二者的区别"><a href="#1-1-2-上面二者的区别" class="headerlink" title="1.1.2. 上面二者的区别"></a>1.1.2. 上面二者的区别</h4><ul>
<li><strong>继承限制</strong>：<ul>
<li>继承Thread类<strong>会有单继承的限制</strong>；</li>
<li>实现Runnable接口则<strong>不会有单继承的限制</strong>。</li>
</ul>
</li>
<li><strong>共享数据</strong>：<ul>
<li>继承Thread类的方式，<strong>共享数据方面比较麻烦</strong>；</li>
<li>而实现Runnable接口的方式，共享数据时，只需要<strong>共用同一个Runnable接口的实现类对象</strong>即可。</li>
</ul>
</li>
<li><strong>同步锁选择</strong>：<ul>
<li>继承Thread类的方式，<strong>同步的锁要么选static对象，要么选当前类Class的对象，即类名.class</strong>；</li>
<li>实现Runnable接口的方式，同步锁可<strong>直接选this.对象</strong>。</li>
</ul>
</li>
<li><strong>线程代码存放位置</strong>：<ul>
<li>继承Thread类的方式，线程代码存放在Thread子类的<code>run()</code>方法中；</li>
<li>实现Runnable接口的方式，线程代码存放在接口的实现类的<code>run()</code>方法中。</li>
</ul>
</li>
</ul>
<h4 id="1-1-3-方式三：实现Callable接口"><a href="#1-1-3-方式三：实现Callable接口" class="headerlink" title="1.1.3. 方式三：实现Callable接口"></a>1.1.3. 方式三：实现Callable接口</h4><ul>
<li><p>实现Callable接口</p>
</li>
<li><p>重写call()方法</p>
</li>
<li><p>创建Callable实现类对象</p>
</li>
<li><p>将此对象传到FutrueTask构造器中，创建FutrueTask对象 </p>
</li>
<li><p>将此对象传到Thread构造器中，创建Thread对象，并调用<code>start()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 3. 创建Callable接口实现类的对象 </span></span><br><span class="line">        NumThread numThread = <span class="keyword">new</span> NumThread();</span><br><span class="line">        <span class="comment">// 4. 将此Callable接口实现类的对象传递到FutureTask构造器中，创建FutureTask的对象</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(numThread);</span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        <span class="comment">// 5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread的对象，并start()</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// get方法返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值</span></span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">"总和为："</span> + sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建一个实现Callable的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2. 实现call方法，将此线程需要执行的操作声明在call方法中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-1-4-Callable方式与Runnable方式的区别"><a href="#1-1-4-Callable方式与Runnable方式的区别" class="headerlink" title="1.1.4. Callable方式与Runnable方式的区别"></a>1.1.4. Callable方式与Runnable方式的区别</h4><p>相比于Runnable方式，Callable方式创建线程功能更强大。</p>
<ul>
<li>Callable方式，<code>run()</code>方法可以有返回值</li>
<li>方法可以抛出异常</li>
<li>支持泛型的返回值</li>
<li>需要借助FutureTask类(Future接口的实现类)，来<strong>获取返回结果</strong>，<strong>对Callable任务执行结果进行取消、查询是否完成等</strong>。</li>
</ul>
<h4 id="1-1-5-使用线程池"><a href="#1-1-5-使用线程池" class="headerlink" title="1.1.5. 使用线程池"></a>1.1.5. 使用线程池</h4><p>提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。</p>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>提高响应速度(减少创建新线程的时间)</li>
<li>降低资源消耗(重复利用线程池中的线程，不需要每次都创建)</li>
<li>便于线程管理</li>
</ul>
<h5 id="线程池相关API"><a href="#线程池相关API" class="headerlink" title="线程池相关API"></a>线程池相关API</h5><p>JDK5.0起提供了线程相关的API：<strong>ExecutorService</strong> 和 <strong>Executors</strong> </p>
<h6 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h6><p>ExecutorService，真正的线程池接口。常见子类<strong>ThreadPoolExecutor</strong></p>
<ul>
<li><strong>void execute (Runnable command)</strong>：执行任务，没有返回值，一般用来执行Runnable</li>
<li><strong><T> Future <T> submit (Callable <T> task)</T></T></T></strong>：执行任务，有返回值，一般用来执行Callable</li>
<li><strong>void shutdown()</strong>：关闭连接池</li>
</ul>
<h6 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h6><p>Executors ，工具类、线程池的工厂类。用于创建并返回不同类型的线程池。</p>
<ul>
<li><strong>Executors.newCachedThreadPool()</strong>：创建一个可根据需要创建新线程的线程池 </li>
<li><strong>Executors.newFixedThreadPool(n)</strong>：创建一个可重用固定线程数的线程池 </li>
<li><strong>Executors.newSingleThreadExecutor()</strong> ：创建一个只有一个线程的线程池</li>
<li><strong>Executors.newScheduledThreadPool(n)</strong>：创建一个线程池，它可安排在给定延迟后运 行命令或者定期地执行。</li>
</ul>
<h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;    System.out.println(Thread.currentThread().getName() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 提供指定线程数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;</span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line"><span class="comment">//        System.out.println(service.getClass());</span></span><br><span class="line"><span class="comment">//        service1.setCorePoolSize(15);</span></span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread());<span class="comment">//适合适用于Runnable</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread1());<span class="comment">//适合适用于Runnable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        service.submit(Callable callable);//适合使用于Callable</span></span><br><span class="line">        <span class="comment">//3.关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Thread类的相关方法"><a href="#2-Thread类的相关方法" class="headerlink" title="2. Thread类的相关方法"></a>2. Thread类的相关方法</h2><ul>
<li><strong>void start()</strong>:  启动线程，并执行对象的run()方法 </li>
<li><strong>run()</strong>:  线程在被调度时执行的操作 </li>
<li><strong>String getName()</strong>:  返回线程的名称 </li>
<li><strong>void setName(String name)</strong>:设置该线程名称 </li>
<li><strong>static Thread currentThread()</strong>: 返回当前线程。在Thread子类中就 是this，通常用于主线程和Runnable实现类</li>
<li><strong>static  void  yield()</strong>：线程让步 <ul>
<li>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程 </li>
<li>若队列中没有同优先级的线程，忽略此方法 </li>
</ul>
</li>
<li><strong>join()</strong> ：当某个程序执行流中调用其他线程的 join() 方法时，调用线程将 被阻塞，直到 join() 方法加入的 join 线程执行完为止<ul>
<li>低优先级的线程也可以获得执行</li>
</ul>
</li>
<li><strong>static  void  sleep(long millis)</strong>：(指定时间:毫秒)<ul>
<li>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后 重排队。 </li>
<li>抛出InterruptedException异</li>
</ul>
</li>
<li><strong>stop()</strong>: 强制线程生命期结束，不推荐使用</li>
<li><strong>boolean isAlive()</strong>：返回boolean，判断线程是否还活着</li>
</ul>
<h2 id="3-线程的优先级"><a href="#3-线程的优先级" class="headerlink" title="3. 线程的优先级"></a>3. 线程的优先级</h2><p><strong>优先级指的是被调用概率的大小</strong>；<strong>线程创建时继承父线程的优先级</strong>。</p>
<h3 id="优先级设置"><a href="#优先级设置" class="headerlink" title="优先级设置"></a>优先级设置</h3><p><strong>MAX_PRIORITY</strong>:10</p>
<p><strong>MIN_PRIORITY</strong>:1</p>
<p><strong>NORM_PRIORITY</strong>:5</p>
<h3 id="涉及方法"><a href="#涉及方法" class="headerlink" title="涉及方法"></a>涉及方法</h3><ul>
<li><strong>getPriority()</strong>:返回线程优先值</li>
<li><strong>setPriority(int newPriority)</strong>:改变线程的优先级</li>
</ul>
<h2 id="4-线程的分类"><a href="#4-线程的分类" class="headerlink" title="4. 线程的分类"></a>4. 线程的分类</h2><p>Java中的线程分为两类：一种是<strong>守护线程</strong>，一种是<strong>用户线程</strong>。</p>
<ul>
<li>它们在几乎每个方面都是相同的，唯一的区别是判断<strong>JVM何时离开</strong>。 </li>
<li>守护线程是用来服务用户线程的，通过在<code>start()</code>方法前调用 <code>thread.setDaemon(true)</code>可以把一个用户线程变成一个守护线程。 </li>
<li>Java垃圾回收就是一个典型的守护线程。 </li>
<li>若JVM中都是守护线程，当前JVM将退出。</li>
</ul>
<h2 id="5-线程的生命周期"><a href="#5-线程的生命周期" class="headerlink" title="5. 线程的生命周期"></a>5. 线程的生命周期</h2><ul>
<li><strong>新建</strong>： 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态 </li>
<li><strong>就绪</strong>：处于新建状态的线程被<code>start()</code>后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源 </li>
<li><strong>运行</strong>：当就绪的线程被调度并获得CPU资源时,便进入运行状态， <code>run()</code>方法定义了线程的操作和功能 </li>
<li><strong>阻塞</strong>：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出CPU 并临时中止自己的执行，进入阻塞状态 </li>
<li><strong>死亡</strong>：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li>
</ul>
<h4 id="线程生命周期图"><a href="#线程生命周期图" class="headerlink" title="线程生命周期图"></a>线程生命周期图</h4><p><img src="/2020/04/20/%E7%AC%94%E8%AE%B0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="线程生命周期"></p>
<h2 id="6-线程的同步"><a href="#6-线程的同步" class="headerlink" title="6. 线程的同步"></a>6. 线程的同步</h2><p>多线程会出现安全问题。问题的原因是当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行，导致共享数据的错误。 </p>
<p>解决办法： 对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。即Java的<strong>同步锁机制</strong>。</p>
<p>使用<strong>锁</strong>时，必须<strong>确保使用同一个资源的多个线程共用一把锁</strong>，这个非常重要，否则就无法保证共享资源的安全。</p>
<h3 id="6-0-Synchronized"><a href="#6-0-Synchronized" class="headerlink" title="6.0. Synchronized"></a>6.0. Synchronized</h3><p><strong>Synchronized</strong>既可以修饰代码块，又可以修饰方法。</p>
<h4 id="6-0-0-Synchronized的锁"><a href="#6-0-0-Synchronized的锁" class="headerlink" title="6.0.0. Synchronized的锁"></a>6.0.0. Synchronized的锁</h4><ul>
<li><strong>任意对象</strong>都可以作为同步锁。所有对象都自动含有单一的锁（监视器）。 </li>
<li>同步方法的锁：静态方法（<strong>类名.class</strong>）、非静态方法（<strong>this</strong>）</li>
<li>同步代码块：自己指定，很多时候也是指定为<strong>this</strong>或<strong>类名.class</strong> </li>
</ul>
<h3 id="6-1-Lock"><a href="#6-1-Lock" class="headerlink" title="6.1. Lock"></a>6.1. Lock</h3><p>JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同 步锁对象来实现同步。同步锁使用<strong>Lock对象</strong>充当。</p>
<h4 id="6-1-0-接口Lock"><a href="#6-1-0-接口Lock" class="headerlink" title="6.1.0. 接口Lock"></a>6.1.0. 接口Lock</h4><p>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象 加锁，<strong>线程开始访问共享资源之前应先获得Lock对象</strong>。</p>
<h4 id="6-1-1-ReentrantLock"><a href="#6-1-1-ReentrantLock" class="headerlink" title="6.1.1. ReentrantLock"></a>6.1.1. ReentrantLock</h4><p>ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和 内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以 显式加锁、释放锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReenTrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock(); </span><br><span class="line">        <span class="keyword">try</span>&#123; </span><br><span class="line">            <span class="comment">//保证线程安全的代码; </span></span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123; </span><br><span class="line">            lock.unlock();  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-Synchronized和Lock的区别"><a href="#6-3-Synchronized和Lock的区别" class="headerlink" title="6.3. Synchronized和Lock的区别"></a>6.3. Synchronized和Lock的区别</h3><ul>
<li>Lock是<strong>显式锁</strong>（手动开关），synchronized是<strong>隐式锁</strong>（出了作用域自动释放）</li>
<li>Lock只有<strong>代码锁</strong>，synchronized两者都有</li>
<li>Lock性能更好，具有更好的扩展性（提供更多的子类）</li>
</ul>
<h3 id="6-4-使用顺序"><a href="#6-4-使用顺序" class="headerlink" title="6.4. 使用顺序"></a>6.4. 使用顺序</h3><p>Lock–&gt;同步代码块（已经进入了方法体，分配了相应资源）–&gt; 同步方法 （在方法体之外）</p>
<h3 id="6-5-锁的释放"><a href="#6-5-锁的释放" class="headerlink" title="6.5. 锁的释放"></a>6.5. 锁的释放</h3><h4 id="6-5-0-释放锁的操作"><a href="#6-5-0-释放锁的操作" class="headerlink" title="6.5.0. 释放锁的操作"></a>6.5.0. 释放锁的操作</h4><ul>
<li>当前线程的同步方法、同步代码块<strong>执行结束</strong>。 </li>
<li>当前线程在同步代码块或同步方法中遇到<strong>break、return</strong>终止了该代码块或该方法的继续执行。 </li>
<li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致<strong>异常结束</strong>。 </li>
<li>当前线程在同步代码块、同步方法中执行了线程对象的<code>wait()</code>方法，当前线程暂停，并释放锁。</li>
</ul>
<h4 id="6-5-1-不释放锁的操作"><a href="#6-5-1-不释放锁的操作" class="headerlink" title="6.5.1. 不释放锁的操作"></a>6.5.1. 不释放锁的操作</h4><ul>
<li>线程执行同步代码块或同步方法时，程序调用<code>Thread.sleep()</code>、 <code>Thread.yield()</code>方法暂停当前线程的执行。</li>
<li>线程执行同步代码块时，其他线程调用了该线程的<code>suspend()</code>方法将该线程 挂起，该线程不会释放锁。<ul>
<li>应尽量避免使用<code>suspend()</code>和<code>resume()</code>来控制线程</li>
</ul>
</li>
</ul>
<h3 id="6-6-线程的死锁"><a href="#6-6-线程的死锁" class="headerlink" title="6.6. 线程的死锁"></a>6.6. 线程的死锁</h3><p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。</p>
<p>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。</p>
<h4 id="6-6-0-解决方法"><a href="#6-6-0-解决方法" class="headerlink" title="6.6.0. 解决方法"></a>6.6.0. 解决方法</h4><ul>
<li>专门的算法、原则</li>
<li>尽量减少同步资源的定义</li>
<li>尽量避免嵌套同步</li>
</ul>
<h4 id="6-6-1-死锁示例"><a href="#6-6-1-死锁示例" class="headerlink" title="6.6.1. 死锁示例"></a>6.6.1. 死锁示例</h4><p>施工中</p>
<h3 id="6-7-线程安全的懒汉式"><a href="#6-7-线程安全的懒汉式" class="headerlink" title="6.7. 线程安全的懒汉式"></a>6.7. 线程安全的懒汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123; </span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123; </span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123; </span><br><span class="line">                    instance=<span class="keyword">new</span> Singleton(); </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> instance; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">        Singleton s1=Singleton.getInstance(); </span><br><span class="line">        Singleton s2=Singleton.getInstance();</span><br><span class="line">        System.out.println(s1==s2); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-线程的通信"><a href="#7-线程的通信" class="headerlink" title="7. 线程的通信"></a>7. 线程的通信</h2><h3 id="7-0-线程通信相关方法"><a href="#7-0-线程通信相关方法" class="headerlink" title="7.0. 线程通信相关方法"></a>7.0. 线程通信相关方法</h3><p>以下方法只有在<strong>synchronized方法</strong>或<strong>synchronized代码块</strong>中才能使用，否则会报 java.lang.IllegalMonitorStateException异常。调用者必须是同步代码块或同步方法中的<strong>同步监视器</strong>(锁对象)。</p>
<ul>
<li><strong>wait()/wait(毫秒)</strong> : 使当前线程进入阻塞状态，并释放锁。</li>
<li><strong>notify()</strong> :唤醒等待的一个线程</li>
<li><strong>notifyAll()</strong> :唤醒全部等待的线程</li>
</ul>
<h3 id="7-1-Sleep-和wait-的异同"><a href="#7-1-Sleep-和wait-的异同" class="headerlink" title="7.1. Sleep()和wait()的异同"></a>7.1. Sleep()和wait()的异同</h3><p>相同点：使线程进入阻塞状态 </p>
<p>不同点：<strong>两方法声明位置不同</strong>，Thread类中声明sleep(),Object类中声明wait() </p>
<p>     <strong>调用要求不同</strong>：sleep()可以在任何场景下使用，wait()必须在同步代码或同步方法中 </p>
<h3 id="7-2-生产者，消费者例题"><a href="#7-2-生产者，消费者例题" class="headerlink" title="7.2. 生产者，消费者例题"></a>7.2. 生产者，消费者例题</h3><p>​生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p>
<p>这里可能出现两个问题：</p>
<p>  生产者比消费者快时，消费者会漏掉一些数据没有取到。   </p>
<p>​    消费者比生产者快时，消费者会取相同的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clerk clerk = <span class="keyword">new</span> Clerk();</span><br><span class="line"></span><br><span class="line">        Producer p1 = <span class="keyword">new</span> Producer(clerk);</span><br><span class="line">        p1.setName(<span class="string">"生产者1"</span>);</span><br><span class="line">        Consumer c1 = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        c1.setName(<span class="string">"消费者1"</span>);</span><br><span class="line">        Consumer c2 = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        c2.setName(<span class="string">"消费者2"</span>);</span><br><span class="line">        </span><br><span class="line">        p1.start();</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> productCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 生产产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produceProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (productCount &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            productCount ++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":开始生产第"</span> + productCount + <span class="string">"个产品。"</span>);</span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consumProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (productCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"：开始消费第"</span> + productCount + <span class="string">"个产品。"</span>);</span><br><span class="line">            productCount --;</span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;<span class="comment">// 生产者</span></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        System.out.println(getName() + <span class="string">":开始生产产品......"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.produceProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;<span class="comment">// 消费者</span></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        System.out.println(getName() + <span class="string">":开始消费产品......"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.consumProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-反射</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<p>反射调用方法、属性的操作……</p>
<a id="more"></a>

<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于反射相关的API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p>
<h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>在Object类中定义了以下的方法，此方法将被所有子类继承。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title">getClass</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p>以上的方法返回值的类型是一个Class类，此类是Java反射的源头。</p>
<h3 id="Class类的特点"><a href="#Class类的特点" class="headerlink" title="Class类的特点"></a>Class类的特点</h3><ul>
<li>Class本身也是一个类</li>
<li>Class 对象只能由系统建立对象</li>
<li>一个加载的类在 JVM 中只会有一个Class实例</li>
<li>一个Class对象对应的是一个加载到JVM中的一个<code>.class</code>文件</li>
<li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li>
<li>通过Class可以完整地得到一个类中的所有被加载的结构</li>
<li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象，才能进行后续的操作</li>
</ul>
<h3 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h3><ul>
<li><strong>static Class forName(String name)</strong> ：返回指定类名 name 的 Class 对象</li>
<li><strong>Object newInstance()</strong>： 调用缺省构造函数，返回该Class对象的一个实例</li>
<li><strong>getName()</strong> ：返回此Class对象所表示的实体（类、接口、数组类、基本类型或void）名称</li>
<li><strong>Class getSuperClass()</strong>： 返回当前Class对象的父类的Class对象</li>
<li><strong>Class [] getInterfaces()</strong>：获取当前Class对象的接口</li>
<li><strong>ClassLoader getClassLoader()</strong>：返回该类的类加载器</li>
<li><strong>Constructor[] getConstructors()</strong>：返回一个包含某些Constructor对象的数组</li>
<li><strong>Field[] getDeclaredFields()</strong>：返回Field对象的一个数组</li>
<li><strong>Method getMethod(String name,Class … paramTypes)</strong>：返回一个Method对象，此对象的形参类型为paramType</li>
</ul>
<h3 id="获取Class类的实例"><a href="#获取Class类的实例" class="headerlink" title="获取Class类的实例"></a>获取Class类的实例</h3><ul>
<li>前提：若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = String<span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = “www.xxx.com”.getClass();</span><br></pre></td></tr></table></figure></li>
<li>前提：已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(“java.lang.String”);</span><br></pre></td></tr></table></figure></li>
<li>其他方式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassLoader cl = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line">Class clazz4 = cl.loadClass(“类的全类名”);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="反射调用构造方法"><a href="#反射调用构造方法" class="headerlink" title="反射调用构造方法"></a>反射调用构造方法</h2><h3 id="利用反射调用非私有的构造方法"><a href="#利用反射调用非私有的构造方法" class="headerlink" title="利用反射调用非私有的构造方法"></a>利用反射调用非私有的构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// ***反射调用非私有的构造方法***</span></span><br><span class="line">        <span class="comment">// 1.根据全类名获取对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"reflection.Person"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.调用指定 参数结构 的构造器，生成Constructor的实例</span></span><br><span class="line">        Constructor&lt;?&gt; con = clazz.getConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.通过Constructor的实例创建对应类的对象，并初始化类属性</span></span><br><span class="line">        Person p1 = (Person)con.newInstance(<span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(p1);<span class="comment">// Person [name=张三, age=null]    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// getter、setter、toString省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用反射调用私有构造方法"><a href="#利用反射调用私有构造方法" class="headerlink" title="利用反射调用私有构造方法"></a>利用反射调用私有构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;        </span><br><span class="line">        <span class="comment">// ***反射调用私有的构造方法***</span></span><br><span class="line">        <span class="comment">// 1.根据全类名获取对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"reflection.Person"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.调用指定 参数结构 的构造器，生成Constructor的实例</span></span><br><span class="line">        Constructor&lt;?&gt; con = clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">Integer</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.开启访问权限 con.setAccessible(true);</span></span><br><span class="line">        con.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.通过Constructor的实例创建对应类的对象，并初始化类属性</span></span><br><span class="line">        Person p2 = (Person)con.newInstance(<span class="string">"李四"</span>,<span class="number">33</span>);</span><br><span class="line">        System.out.println(p2);<span class="comment">// Person [name=李四, age=33]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// getter、setter、toString省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射调用普通方法"><a href="#反射调用普通方法" class="headerlink" title="反射调用普通方法"></a>反射调用普通方法</h2><h3 id="反射调用非私有的方法"><a href="#反射调用非私有的方法" class="headerlink" title="反射调用非私有的方法"></a>反射调用非私有的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// ***反射调用非私有的方法***</span></span><br><span class="line">        <span class="comment">// 1.根据全类名获取对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"reflection.Person"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 创建运行时类的对象，此处调用了无参构造方法！！！</span></span><br><span class="line">        Person p1 = (Person)clazz.newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.调用getMethod()方法，生成Method的实例</span></span><br><span class="line">        <span class="comment">// 参数1是方法名，参数2是方法的参数列表(.class)</span></span><br><span class="line">        Method m1 = clazz.getMethod(<span class="string">"eat"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.调用invoke()方法执行所选方法</span></span><br><span class="line">        <span class="comment">// 参数1为类的实例对象,即调用者，参数2为执行方法的实参</span></span><br><span class="line">        <span class="comment">// invoke()的返回值即为对应类中调用的方法的返回值。</span></span><br><span class="line">        m1.invoke(p1, <span class="string">"Person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str + <span class="string">"的默认方法eat()执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 省略getter、setter和toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反射调用静态方法"><a href="#反射调用静态方法" class="headerlink" title="反射调用静态方法"></a>反射调用静态方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exceprion </span>&#123;    </span><br><span class="line">        <span class="comment">// ***反射调用静态方法***</span></span><br><span class="line">        <span class="comment">// 1.根据全类名获取对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"reflection.Person"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 创建运行时类的对象，此处调用无参构造方法！！！</span></span><br><span class="line">        Person p1 = (Person)clazz.newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.调用getMethod()方法，生成Method实例</span></span><br><span class="line">        <span class="comment">// 参数1是方法名，参数2是方法的参数列表(.class)</span></span><br><span class="line">        Method m2 = clazz.getDeclaredMethod(<span class="string">"add"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.调用invoke()方法执行所选方法</span></span><br><span class="line">        <span class="comment">// 参数1为运行时类,即调用者，参数2为执行方法的实参</span></span><br><span class="line">        <span class="comment">// invoke()的返回值即为对应类中调用的方法的返回值。</span></span><br><span class="line">        m2.invoke(Person<span class="class">.<span class="keyword">class</span>, 1,2)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person的静态方法add()执行了，返回值为："</span> + (a+b));</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 省略getter、setter和toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反射调用私有方法"><a href="#反射调用私有方法" class="headerlink" title="反射调用私有方法"></a>反射调用私有方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">// ***反射调用私有方法***</span></span><br><span class="line">        <span class="comment">// 1.根据全类名获取对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"reflection.Person"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 创建运行时类的对象，此处调用无参构造方法！！！</span></span><br><span class="line">        Person p1 = (Person)clazz.newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.调用getDeclaredMethod()方法，生成Method实例</span></span><br><span class="line">        <span class="comment">// 参数1是方法名，参数2是方法的参数列表(.class)</span></span><br><span class="line">        Method m3 = clazz.getDeclaredMethod(<span class="string">"drink"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.开启访问权限 m3.setAccessible(true);</span></span><br><span class="line">        m3.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5.调用invoke()方法执行所选方法</span></span><br><span class="line">        <span class="comment">// 参数1为类的实例对象,即调用者，参数2为执行方法的实参</span></span><br><span class="line">        <span class="comment">// invoke()的返回值即为对应类中调用的方法的返回值。</span></span><br><span class="line">        m3.invoke(p1, <span class="string">"Person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str + <span class="string">"中的私有方法drink()执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 省略getter、setter和toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射设置属性"><a href="#反射设置属性" class="headerlink" title="反射设置属性"></a>反射设置属性</h2><h3 id="反射设置非私有属性"><a href="#反射设置非私有属性" class="headerlink" title="反射设置非私有属性"></a>反射设置非私有属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ***反射设置非私有属性值***</span></span><br><span class="line">        <span class="comment">// 1.根据全类名创建运行时类</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"reflection.Animal"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.创建运行时类的对象,此处暴力反射，调用setAccessible(true)</span></span><br><span class="line">        <span class="comment">// 和getDeclaredConstructor()获取了Animal的私有无参构造方法，</span></span><br><span class="line">        <span class="comment">// 进而创建了运行时类的对象</span></span><br><span class="line">        Constructor&lt;?&gt; d = clazz.getDeclaredConstructor();</span><br><span class="line">        d.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object newInstance = d.newInstance();</span><br><span class="line">        Animal a = (Animal) newInstance;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.调用getField()方法获取Field实例</span></span><br><span class="line">        <span class="comment">// 参数为指定的变量名/属性名</span></span><br><span class="line">        Field f = clazz.getField(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">// 4.设置指定的属性值</span></span><br><span class="line">        <span class="comment">// 参数1为被设置属性的 对象 ，参数2为要设置的属性值</span></span><br><span class="line">        f.set(a, <span class="string">"王五"</span>);</span><br><span class="line">        <span class="comment">// 5.获取**指定对象**的属性值</span></span><br><span class="line">        System.out.println(f.get(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反射设置非私有属性-1"><a href="#反射设置非私有属性-1" class="headerlink" title="反射设置非私有属性"></a>反射设置非私有属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ***反射设置私有属性值***</span></span><br><span class="line">        <span class="comment">// 1.根据全类名创建运行时类</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"reflection.Animal"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.创建运行时类的对象,此处暴力反射，调用setAccessible(true)</span></span><br><span class="line">        <span class="comment">// 和getDeclaredConstructor()获取了Animal的私有无参构造方法，</span></span><br><span class="line">        <span class="comment">// 进而创建了运行时类的对象</span></span><br><span class="line">        Constructor&lt;?&gt; d = clazz.getDeclaredConstructor();</span><br><span class="line">        d.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object newInstance = d.newInstance();</span><br><span class="line">        Animal a = (Animal) newInstance;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 3.调用getDeclaredField()方法获取Field实例</span></span><br><span class="line">        <span class="comment">// 参数为指定的变量名/属性名</span></span><br><span class="line">        Field f = forName.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">        <span class="comment">// 4.开启开启访问权限 f.setAccessible(true);</span></span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 5.设置指定的属性值</span></span><br><span class="line">        <span class="comment">// 参数1为被设置属性的 对象 ，参数2为属性设置值</span></span><br><span class="line">        f.set(a, <span class="number">35</span>);</span><br><span class="line">        <span class="comment">// 6.获取**指定对象**的属性值</span></span><br><span class="line">        System.out.println(f.get(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时<strong>根据需要动态创建目标类的代理对象</strong>。</p>
<h3 id="动态代理相比于静态代理的优点"><a href="#动态代理相比于静态代理的优点" class="headerlink" title="动态代理相比于静态代理的优点"></a>动态代理相比于静态代理的优点</h3><p>抽象角色中（接口）声明的所有方法都被转移到<strong>调用处理器一个集中的方法</strong>中处理，更加灵活和统一的处理众多的方法。</p>
<h3 id="静态代理示例"><a href="#静态代理示例" class="headerlink" title="静态代理示例"></a>静态代理示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyClothFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ClothFactory factory;<span class="comment">//用被代理类对象进行实例化</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyClothFactory</span><span class="params">(ClothFactory factory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理工厂做一些准备工作"</span>);</span><br><span class="line">        factory.produceCloth();</span><br><span class="line">        System.out.println(<span class="string">"代理工厂做一些后续的收尾工作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NikeClothFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Nike工厂生产一批运动服"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建被代理类的对象</span></span><br><span class="line">        ClothFactory nike = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">        <span class="comment">//创建代理类的对象,并把被代理类的对象当参数传进去</span></span><br><span class="line">        ClothFactory proxyClothFactory = <span class="keyword">new</span> ProxyClothFactory(nike);</span><br><span class="line">		<span class="comment">// 调用代理类对象的方法，进而也执行了被代理类的同名方法</span></span><br><span class="line">        proxyClothFactory.produceCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态代理示例"><a href="#动态代理示例" class="headerlink" title="动态代理示例"></a>动态代理示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getBelief</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBelief</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"I believe I can fly!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我喜欢吃"</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要想实现动态代理，需要解决的问题？</span></span><br><span class="line"><span class="comment">问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。</span></span><br><span class="line"><span class="comment">问题二：当通过代理类的对象调用方法a时，如何动态的去调用被代理类中的同名方法a。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用此方法，返回一个代理类的对象。解决问题一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;<span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">        handler.bind(obj);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//需要使用被代理类的对象进行赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：本类的invoke()方法</span></span><br><span class="line">    <span class="comment">// 所以可以把代理类要执行的方法a的功能声明在invoke()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span></span><br><span class="line">        <span class="comment">// obj:被代理类的对象</span></span><br><span class="line">        <span class="comment">// args：被调用方法的参数</span></span><br><span class="line">        Object returnValue = method.invoke(obj,args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperMan superMan = <span class="keyword">new</span> SuperMan();</span><br><span class="line">        <span class="comment">//proxyInstance:代理类的对象</span></span><br><span class="line">        Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);</span><br><span class="line">        <span class="comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span></span><br><span class="line">        String belief = proxyInstance.getBelief();</span><br><span class="line">        System.out.println(belief);</span><br><span class="line">        proxyInstance.eat(<span class="string">"四川麻辣烫"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>反射</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-异常</title>
    <url>/2020/04/09/%E7%AC%94%E8%AE%B0-%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p>简单学习一下异常</p>
<a id="more"></a>

<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="0-异常概述"><a href="#0-异常概述" class="headerlink" title="0. 异常概述"></a>0. 异常概述</h2><p>在Java语言中，将程序执行中发生的不正常情况称为”异常“。<br>(开发过程中的语法错误和逻辑错误不是异常)</p>
<h3 id="0-0-异常事件分类"><a href="#0-0-异常事件分类" class="headerlink" title="0.0. 异常事件分类"></a>0.0. 异常事件分类</h3><ul>
<li><p>java.lang.Error：Java虚拟机无法解决的严重问题。如JVM系统内部错误、资源耗尽等严重情况。</p>
<ul>
<li>VirtualMachineError<ul>
<li>StackOverflowError</li>
<li>OutOfMemoryError：简称OOM</li>
</ul>
</li>
</ul>
</li>
<li><p>java.lang.Exception：其他因编程错误或偶然的因素导致的一般性问题，可以使用针对性代码进行处理。</p>
<ul>
<li><p>RntimeException(运行时异常)</p>
<ul>
<li>NullPointerException(空指针异常)</li>
<li>ArrayIndexOutOfBoundsException(数组下标越界异常)</li>
<li>ClassCastException(类型转换异常)</li>
<li>ArithmeticException(算术异常)</li>
<li>NumberFormatException(数字格式化)</li>
</ul>
</li>
<li><p>编译时异常(受检异常)</p>
<ul>
<li>在编译阶段必须要进行处理，否则编译不通过 </li>
<li>例：SQLException,IOException等</li>
</ul>
<p>​</p>
</li>
</ul>
</li>
</ul>
<h3 id="0-1-异常图解"><a href="#0-1-异常图解" class="headerlink" title="0.1. 异常图解"></a>0.1. 异常图解</h3><p><img src="/2020/04/09/%E7%AC%94%E8%AE%B0-%E5%BC%82%E5%B8%B8/%E5%BC%82%E5%B8%B8%E5%9B%BE%E8%A7%A3.png" alt="异常图解"></p>
<h2 id="1-异常处理机制"><a href="#1-异常处理机制" class="headerlink" title="1. 异常处理机制"></a>1. 异常处理机制</h2><h3 id="1-0-过程描述"><a href="#1-0-过程描述" class="headerlink" title="1.0. 过程描述"></a>1.0. 过程描述</h3><p>Java虚拟机会在发生异常的那句代码的位置，创建一个异常的对象，并且抛出。这时，它会检测有没有try…catch，如果有对应的catch，那么程序正常运行，如果没有合适的catch，会被往上抛出，如果一路上都没有被catch，最终会导致程序终止运行。</p>
<h3 id="1-1-try-catch-finally"><a href="#1-1-try-catch-finally" class="headerlink" title="1.1. try-catch-finally"></a>1.1. try-catch-finally</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可能会发生的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类型 e) &#123;</span><br><span class="line">    <span class="comment">// 捕获该异常后如何处理</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类型 e) &#123;</span><br><span class="line">    <span class="comment">// 捕获该异常后如何处理</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 最后一定会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果try中有异常，try剩下的代码就不执行了。会去找对应的catch，没找到对应的catch块，执行完finally后将异常抛出，抛到上级</li>
<li><code>try-catch-finally</code>，三选二，try必须要有</li>
<li>多个catch异常类型的顺序是“<strong>子上父下</strong>”</li>
<li>如果finally中有return，那么一定是从finally中返回的</li>
<li>如果finally中没有return，会先执行finally中的语句，然后return结束，reutrn返回的值是在执行finally之前就赋好值的</li>
</ul>
<h3 id="1-2-throws"><a href="#1-2-throws" class="headerlink" title="1.2. throws"></a>1.2. throws</h3><p>如果方法可能生成某种异常，但不确定如何处理，则此方法应显示声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者处理</p>
<ul>
<li><p><strong>throws</strong>用在方法处，可以声明抛出异常，抛出的异常可以有多个</p>
</li>
<li><p><strong>throws</strong>抛出的异常类型可以是方法中产生的异常类型，也可以是它的父类</p>
</li>
</ul>
<h3 id="1-3-throw"><a href="#1-3-throw" class="headerlink" title="1.3. throw"></a>1.3. throw</h3><p>Java异常类对象除了由系统自动生成并抛出外，也可用<strong><code>throw</code>手动抛出</strong>。手动抛出的异常必须是Throwable或其子类的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br></pre></td></tr></table></figure>

<h2 id="2-自定义异常类"><a href="#2-自定义异常类" class="headerlink" title="2. 自定义异常类"></a>2. 自定义异常类</h2><ul>
<li>一般来说，自定义异常类都是<strong>RuntimeException</strong>的子类</li>
<li>自定义异常类通常需要编写几个<strong>重载的构造器</strong></li>
<li>自定义异常类通常要序列化，并提供<strong>serialVersionUID</strong></li>
<li>自定义异常类通过<code>throw</code>抛出</li>
</ul>
<h2 id="3-异常的方法"><a href="#3-异常的方法" class="headerlink" title="3. 异常的方法"></a>3. 异常的方法</h2><ul>
<li><p><strong>public String getMessage()</strong>：返回关于发生的异常的详细信息。</p>
</li>
<li><p><strong>public Throwable getCause()</strong>：返回一个Throwable 对象代表异常原因。</p>
</li>
<li><p><strong>public String toString()</strong>：使用getMessage()的结果返回类的串级名字。</p>
</li>
<li><p><strong>public void printStackTrace()</strong>：打印toString()结果和栈层次到System.err，即错误输出流。</p>
<p>……</p>
</li>
</ul>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-泛型</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<p>施工中</p>
<a id="more"></a>]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-SSM整合之Maven版</title>
    <url>/2020/04/21/%E7%AC%94%E8%AE%B0-SSM%E6%95%B4%E5%90%88%E4%B9%8BMaven%E7%89%88/</url>
    <content><![CDATA[<p>Maven下SSM整合的相关配置文件</p>
<a id="more"></a>

<h3 id="聚合工程的父工程的pom-xml"><a href="#聚合工程的父工程的pom-xml" class="headerlink" title="聚合工程的父工程的pom.xml"></a>聚合工程的父工程的pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx.cn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-mapper<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-entity<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--父工程打包方式 pom 聚合工程 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">spring-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">mybatis</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connector</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pageHelper</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">pageHelper</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-spring</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">mybatis-spring</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jackson-version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">jackson-version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-tx --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;connector&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pageHelper&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="聚合工程的子工程ssm-entity的pom-xml"><a href="#聚合工程的子工程ssm-entity的pom-xml" class="headerlink" title="聚合工程的子工程ssm-entity的pom.xml"></a>聚合工程的子工程ssm-entity的pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx.cn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-entity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="聚合工程的子工程ssm-mapper的pom-xml"><a href="#聚合工程的子工程ssm-mapper的pom-xml" class="headerlink" title="聚合工程的子工程ssm-mapper的pom.xml"></a>聚合工程的子工程ssm-mapper的pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx.cn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>        </span><br><span class="line">        <span class="comment">&lt;!--引入实体类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx.cn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-entity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="applicationContext-dao-xml"><a href="#applicationContext-dao-xml" class="headerlink" title="applicationContext-dao.xml"></a>applicationContext-dao.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置mapper相关--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置session工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- config params as the following --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.shangma.cn.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这也是一种解决方式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;import resource="classpath:applicationContext-service.xml"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="聚合工程的子工程ssm-service的pom-xml"><a href="#聚合工程的子工程ssm-service的pom-xml" class="headerlink" title="聚合工程的子工程ssm-service的pom.xml"></a>聚合工程的子工程ssm-service的pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx.cn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx.cn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-tx --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="applicationContext-service-xml"><a href="#applicationContext-service-xml" class="headerlink" title="applicationContext-service.xml"></a>applicationContext-service.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.shangma.cn.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事物管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事物注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="聚合工程的子工程ssm-web的pom-xml"><a href="#聚合工程的子工程ssm-web的pom-xml" class="headerlink" title="聚合工程的子工程ssm-web的pom.xml"></a>聚合工程的子工程ssm-web的pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx.cn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx.cn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 项目访问路径 本例：localhost:9090, 如果配置的aa，则访问路径为localhost:9090/aa --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9090<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span><span class="comment">&lt;!-- 非必需项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="applicationContext-web-xml"><a href="#applicationContext-web-xml" class="headerlink" title="applicationContext-web.xml"></a>applicationContext-web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.shangma.cn.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置静态资源不被拦截--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--视图解析器  可配置 可以不配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Web-xml"><a href="#Web-xml" class="headerlink" title="Web.xml"></a>Web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Dispacher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-web.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Dispacher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--解决乱码问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Character<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Character<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Log4j-properties"><a href="#Log4j-properties" class="headerlink" title="Log4j.properties"></a>Log4j.properties</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Set root category priority to INFO and its only appender to CONSOLE.</span><br><span class="line">#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatal</span><br><span class="line">log4j.rootCategory=debug, CONSOLE, LOGFILE</span><br><span class="line"></span><br><span class="line"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span><br><span class="line">log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE</span><br><span class="line"></span><br><span class="line"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br><span class="line"></span><br><span class="line"># LOGFILE is set to be a File appender using a PatternLayout.</span><br><span class="line">log4j.appender.LOGFILE=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.LOGFILE.File=d:\axis.log</span><br><span class="line">log4j.appender.LOGFILE.Append=true</span><br><span class="line">log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.LOGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>SSM整合</tag>
        <tag>Java笔记</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-流程控制语句</title>
    <url>/2020/03/16/%E7%AC%94%E8%AE%B0-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>流程语句的简单介绍</p>
<a id="more"></a>

<h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><h2 id="0-顺序结构"><a href="#0-顺序结构" class="headerlink" title="0. 顺序结构"></a>0. 顺序结构</h2><p>同一个方法中，从上往下，顺序执行。</p>
<h2 id="1-分支结构"><a href="#1-分支结构" class="headerlink" title="1. 分支结构"></a>1. 分支结构</h2><h3 id="1-0-条件判断"><a href="#1-0-条件判断" class="headerlink" title="1.0. 条件判断"></a>1.0. 条件判断</h3><h4 id="1-0-0-单分支条件判断"><a href="#1-0-0-单分支条件判断" class="headerlink" title="1.0.0. 单分支条件判断"></a>1.0.0. 单分支条件判断</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当执行的语句块只有一句时，&#123;&#125;可以省略</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    当条件表达式为<span class="keyword">true</span>时，要执行的语句块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-0-1-双分支条件判断"><a href="#1-0-1-双分支条件判断" class="headerlink" title="1.0.1. 双分支条件判断"></a>1.0.1. 双分支条件判断</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">	当条件表达式为<span class="keyword">true</span>时，要执行的语句块<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	当条件表达式为<span class="keyword">false</span>时，要执行的语句块<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-0-2-多分支条件判断"><a href="#1-0-2-多分支条件判断" class="headerlink" title="1.0.2. 多分支条件判断"></a>1.0.2. 多分支条件判断</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">	当条件表达式<span class="number">1</span>为<span class="keyword">true</span>时，要执行的语句块<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">	当条件表达式<span class="number">2</span>为<span class="keyword">true</span>时，要执行的语句块<span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>) &#123;</span><br><span class="line">	当条件表达式<span class="number">3</span>为<span class="keyword">true</span>时，要执行的语句块<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">	当以上所有条件表达式都不成立时，要执行的语句块n+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-1-选择结构"><a href="#1-1-选择结构" class="headerlink" title="1.1. 选择结构"></a>1.1. 选择结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">	<span class="keyword">case</span> 常量值:</span><br><span class="line">		语句块;</span><br><span class="line">		[<span class="keyword">break</span>;]</span><br><span class="line">	<span class="keyword">case</span> 常量值:</span><br><span class="line">		语句块;</span><br><span class="line">		[<span class="keyword">break</span>;]</span><br><span class="line">	....</span><br><span class="line">	[</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		语句块;</span><br><span class="line">		[<span class="keyword">break</span>;]</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表达式类型要求：</p>
<p>​        基本数据类型：byte,short,char,int</p>
<p>​        引用数据类型：枚举，String</p>
<p>执行过程：</p>
<p>​        入口：当与某个case匹配，当与所有case都不匹配，如果有default，从default进入</p>
<p>​        出口：switch结束的};break</p>
<p>其他要求：</p>
<ul>
<li>case后面必须是常量或常量表达式</li>
<li>所有case后面的值必须不相同</li>
<li>case后面常量值的类型与表达式的类型要一致</li>
<li>case语句块中要有break语句，否则会出现case穿透现象</li>
</ul>
<h3 id="1-2-条件判断与选择结构的取舍"><a href="#1-2-条件判断与选择结构的取舍" class="headerlink" title="1.2. 条件判断与选择结构的取舍"></a>1.2. 条件判断与选择结构的取舍</h3><ul>
<li>凡是可以使用switch…case一定可以用if..else代替，凡是反过来不一定</li>
<li>当所有的条件判断是“常量的等值判断”，那么建议使用switch…case，可读性更好，效率更高</li>
</ul>
<h2 id="2-循环结构"><a href="#2-循环结构" class="headerlink" title="2. 循环结构"></a>2. 循环结构</h2><h3 id="2-0-for循环"><a href="#2-0-for循环" class="headerlink" title="2.0. for循环"></a>2.0. for循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化表达式; 循环条件; 迭代表达式) &#123;</span><br><span class="line">	循环体语句（要重复的代码）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：</p>
<ul>
<li>for(;;)中<strong>两个分号</strong>不可以省略，但是表达式可以省略</li>
<li>for循环适用于起始条件和终止条件明确，循环次数比较明显的情况</li>
</ul>
<h3 id="2-1-while循环"><a href="#2-1-while循环" class="headerlink" title="2.1. while循环"></a>2.1. while循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：</p>
<ul>
<li>适用于循环条件明显，次数不明显的情况</li>
<li>while (true) 经常和 break 结合使用</li>
</ul>
<h3 id="2-2-do…while循环"><a href="#2-2-do…while循环" class="headerlink" title="2.2. do…while循环"></a>2.2. do…while循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环语句;</span><br><span class="line">&#125; <span class="keyword">while</span> (循环条件);</span><br></pre></td></tr></table></figure>

<p>注：do…while循环执行一次。</p>
<h3 id="2-3-foreach"><a href="#2-3-foreach" class="headerlink" title="2.3. foreach"></a>2.3. foreach</h3><p>待整理</p>
<h3 id="2-4-嵌套"><a href="#2-4-嵌套" class="headerlink" title="2.4. 嵌套"></a>2.4. 嵌套</h3><p>无论哪种循环，循环中都可以嵌套任一种循环结构。</p>
<p>执行过程：外循环循环一次，内循环循环一轮。</p>
<h2 id="3-跳转，中断"><a href="#3-跳转，中断" class="headerlink" title="3. 跳转，中断"></a>3. 跳转，中断</h2><h3 id="3-1-break"><a href="#3-1-break" class="headerlink" title="3.1. break"></a>3.1. break</h3><p>作用：终止当前循环或switch</p>
<h3 id="3-2-continue"><a href="#3-2-continue" class="headerlink" title="3.2. continue"></a>3.2. continue</h3><p>作用：终止本次循环，进入下次循环</p>
<h3 id="3-3-return"><a href="#3-3-return" class="headerlink" title="3.3. return"></a>3.3. return</h3><p>作用：结束当前方法</p>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-数组</title>
    <url>/2020/03/27/%E7%AC%94%E8%AE%B0-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>数组的简单介绍</p>
<a id="more"></a>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="0-基本概念"><a href="#0-基本概念" class="headerlink" title="0. 基本概念"></a>0. 基本概念</h2><p>数组，用来保存、管理一组相同数据类型的数据。</p>
<h2 id="1-数组的特点"><a href="#1-数组的特点" class="headerlink" title="1. 数组的特点"></a>1. 数组的特点</h2><ul>
<li>有序排列</li>
<li>长度一旦确定，不能修改</li>
</ul>
<h2 id="2-数组的初始化"><a href="#2-数组的初始化" class="headerlink" title="2. 数组的初始化"></a>2. 数组的初始化</h2><h3 id="2-0-静态初始化"><a href="#2-0-静态初始化" class="headerlink" title="2.0. 静态初始化"></a>2.0. 静态初始化</h3><p>数组的初始化和数组元素的赋值同时进行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">e.g1: <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">e.g2: <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">e.g3: <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;<span class="comment">//类型推断，简化写法</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-动态初始化"><a href="#2-1-动态初始化" class="headerlink" title="2.1. 动态初始化"></a>2.1. 动态初始化</h3><p>数组的初始化和数组元素的赋值分开进行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据类型[] 变量名 = new 数据类型[长度];</span></span><br><span class="line"><span class="keyword">double</span>[] scores = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<h2 id="3-数组元素的默认初始值"><a href="#3-数组元素的默认初始值" class="headerlink" title="3. 数组元素的默认初始值"></a>3. 数组元素的默认初始值</h2><ul>
<li>数组元素是整型时：0</li>
<li>数组元素是浮点型时：0.0</li>
<li>数组元素是char型时：0或“\u0000”，而非’0’。</li>
<li>数组元素是boolean型时：false</li>
<li>数组元素是引用数据类型时,无默认值，为null（空指向）</li>
</ul>
<h2 id="4-数组的长度"><a href="#4-数组的长度" class="headerlink" title="4. 数组的长度"></a>4. 数组的长度</h2><p>数组名.length</p>
<h2 id="5-二维数组的初始化"><a href="#5-二维数组的初始化" class="headerlink" title="5. 二维数组的初始化"></a>5. 二维数组的初始化</h2><h3 id="5-0-静态初始化"><a href="#5-0-静态初始化" class="headerlink" title="5.0. 静态初始化"></a>5.0. 静态初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">e.g1:<span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">e.g2:<span class="keyword">int</span> arr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">e.g3:<span class="keyword">int</span>[] arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">e.g3:<span class="keyword">int</span>[] arr[] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="5-1-动态初始化"><a href="#5-1-动态初始化" class="headerlink" title="5.1. 动态初始化"></a>5.1. 动态初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">e.g1:String[][] arr = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">e.g2:String[][] arr = <span class="keyword">new</span> String[<span class="number">3</span>][];</span><br></pre></td></tr></table></figure>

<h2 id="6-二维数组的默认初始值"><a href="#6-二维数组的默认初始值" class="headerlink" title="6. 二维数组的默认初始值"></a>6. 二维数组的默认初始值</h2><h3 id="6-0-静态初始化的默认值"><a href="#6-0-静态初始化的默认值" class="headerlink" title="6.0. 静态初始化的默认值"></a>6.0. 静态初始化的默认值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li>外层元素的初始化值为：地址值</li>
<li>内层元素的初始化值为：与一维数组初始化情况相同</li>
</ul>
<h3 id="6-1-动态初始化的默认值"><a href="#6-1-动态初始化的默认值" class="headerlink" title="6.1. 动态初始化的默认值"></a>6.1. 动态初始化的默认值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br></pre></td></tr></table></figure>

<ul>
<li>外层元素的初始化值为：null</li>
<li>内层元素的初始化值为：不能调用，否则报错</li>
</ul>
<h2 id="7-数组的遍历"><a href="#7-数组的遍历" class="headerlink" title="7. 数组的遍历"></a>7. 数组的遍历</h2><h3 id="7-0-一维数组的遍历"><a href="#7-0-一维数组的遍历" class="headerlink" title="7.0. 一维数组的遍历"></a>7.0. 一维数组的遍历</h3><h4 id="7-0-0-普通for循环遍历"><a href="#7-0-0-普通for循环遍历" class="headerlink" title="7.0.0. 普通for循环遍历"></a>7.0.0. 普通for循环遍历</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; names.length;i ++)&#123;</span><br><span class="line">    System.out.println(names[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-0-1-增强for循环遍历"><a href="#7-0-1-增强for循环遍历" class="headerlink" title="7.0.1. 增强for循环遍历"></a>7.0.1. 增强for循环遍历</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *for(数组元素数据类型 变量名称：数组变量名)&#123;</span></span><br><span class="line"><span class="comment"> *	//循环体</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> dou:scores)&#123;<span class="comment">//数组scores里的每一个元素赋值给了dou</span></span><br><span class="line">    System.out.println(dou);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-1-二维数组的遍历"><a href="#7-1-二维数组的遍历" class="headerlink" title="7.1. 二维数组的遍历"></a>7.1. 二维数组的遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i ++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j ++)&#123;</span><br><span class="line">        System.out.prirnt(arr[i][j] + <span class="string">" "</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-数组的算法"><a href="#8-数组的算法" class="headerlink" title="8. 数组的算法"></a>8. 数组的算法</h2><h3 id="8-0-冒泡排序"><a href="#8-0-冒泡排序" class="headerlink" title="8.0. 冒泡排序"></a>8.0. 冒泡排序</h3><p>原理：将相邻两个元素进行比较，最大的放到右端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray03</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">7</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length-<span class="number">1</span>;i ++) &#123;<span class="comment">//控制排序的轮数</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr.length-<span class="number">1</span>-i;j ++) &#123;</span><br><span class="line">                           <span class="comment">//判断相邻两元素</span></span><br><span class="line">				<span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                                    <span class="comment">//真，arr[j]位置交换</span></span><br><span class="line">					<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">					arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">					arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将数组变量转换成字符串常量</span></span><br><span class="line">          System.out.println(Arrays.toString(arr));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-1-选择排序"><a href="#8-1-选择排序" class="headerlink" title="8.1. 选择排序"></a>8.1. 选择排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">7</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length-<span class="number">1</span>;i ++) &#123;</span><br><span class="line">			<span class="keyword">int</span> min = arr[i];</span><br><span class="line">			<span class="keyword">int</span> minIndex = i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; arr.length;j ++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(min &gt; arr[j]) &#123;</span><br><span class="line">					min = arr[j];</span><br><span class="line">					minIndex = j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> temp = arr[i];</span><br><span class="line">			arr[i] = arr[minIndex];</span><br><span class="line">			arr[minIndex] = temp;	</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Arrays.toString(arr));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-2-插入排序"><a href="#8-2-插入排序" class="headerlink" title="8.2. 插入排序"></a>8.2. 插入排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray04</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">7</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i &lt; arr.length;i ++) &#123;</span><br><span class="line">			<span class="keyword">int</span> temp = arr[i];</span><br><span class="line">			<span class="keyword">int</span> leftIndex = i - <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span>(leftIndex &gt;= <span class="number">0</span> &amp;&amp; arr[leftIndex] &gt; temp) &#123;</span><br><span class="line">				arr[leftIndex + <span class="number">1</span>] = arr[leftIndex];</span><br><span class="line">				leftIndex --;</span><br><span class="line">			&#125;</span><br><span class="line">			arr[leftIndex + <span class="number">1</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Arrays.toString(arr));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-3-求数组中的最大值和最小值"><a href="#8-3-求数组中的最大值和最小值" class="headerlink" title="8.3. 求数组中的最大值和最小值"></a>8.3. 求数组中的最大值和最小值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxMin</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            Maximun();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Maximun</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a[]=&#123;<span class="number">12</span>,<span class="number">4</span>,<span class="number">53</span>,<span class="number">51</span>,<span class="number">2</span>,<span class="number">45</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">57</span>,<span class="number">21</span>,<span class="number">31</span>,<span class="number">57</span>&#125;;</span><br><span class="line">            <span class="keyword">int</span> Max=a[<span class="number">0</span>],Min=a[<span class="number">0</span>];  </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Max&lt;a[i])&#123;</span><br><span class="line">                    Max=a[i];</span><br><span class="line">                &#125;   </span><br><span class="line">                <span class="keyword">if</span>(Min&gt;a[i])&#123;</span><br><span class="line">                    Min=a[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                System.out.println(<span class="string">"数组元素的最大值为"</span>+Max);</span><br><span class="line">                System.out.println(<span class="string">"数组元素的最小值为"</span>+Min);</span><br><span class="line"></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-4-数组的复制"><a href="#8-4-数组的复制" class="headerlink" title="8.4. 数组的复制"></a>8.4. 数组的复制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//复制一个数组，从原数组的[0]元素开始复制，新数组的长度由使用者决定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] copy(<span class="keyword">int</span>[] src, <span class="keyword">int</span> newLength)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、创建新数组的对象</span></span><br><span class="line">	<span class="keyword">int</span>[] newArray = <span class="keyword">new</span> <span class="keyword">int</span>[newLength];</span><br><span class="line">       </span><br><span class="line">	<span class="comment">//2、把原数组的元素复制到新数组中</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;newArray.length &amp;&amp; i&lt;src.length; i++)&#123;</span><br><span class="line">		newArray[i] = src[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制一个数组，从原数组的[start]元素开始复制，新数组的长度由使用者决定</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] copy(<span class="keyword">int</span>[] src, <span class="keyword">int</span> start, <span class="keyword">int</span> newLength)&#123;</span><br><span class="line">	<span class="comment">//1、创建新数组</span></span><br><span class="line">	<span class="keyword">int</span>[] newArray = <span class="keyword">new</span> <span class="keyword">int</span>[newLength];</span><br><span class="line">       </span><br><span class="line">	<span class="comment">//2、把原数组的元素从[start]复制到新数组的[0]...</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;newArray.length &amp;&amp; start+i&lt;src.length; i++)&#123;</span><br><span class="line">		newArray[i] = src[start+i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-5-数组的反转"><a href="#8-5-数组的反转" class="headerlink" title="8.5. 数组的反转"></a>8.5. 数组的反转</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Copy</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//数组的反转</span></span><br><span class="line">		<span class="comment">//方法1:</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length/<span class="number">2</span>;i ++) &#123;</span><br><span class="line">			String temp = arr[i];</span><br><span class="line">			arr[i]  = arr[arr.length - i -<span class="number">1</span>];</span><br><span class="line">			arr[arr.length -i -<span class="number">1</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//方法2:</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j = arr.length - <span class="number">1</span>;i &lt; j;i ++,j --) &#123;</span><br><span class="line">			String temp = arr[i];</span><br><span class="line">			arr[i] = arr[j];</span><br><span class="line">			arr[j] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i ++) &#123;</span><br><span class="line">			System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-6-数组的逆序复制"><a href="#8-6-数组的逆序复制" class="headerlink" title="8.6. 数组的逆序复制"></a>8.6. 数组的逆序复制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将旧数组逆序复制到新数组中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework00008</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] oldArr = &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[oldArr.length];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;oldArr.length;i ++) &#123;</span><br><span class="line">            newArr[i] = oldArr[oldArr.length - <span class="number">1</span> - i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(Arrays.toString(newArr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-7-杨辉三角"><a href="#8-7-杨辉三角" class="headerlink" title="8.7. 杨辉三角"></a>8.7. 杨辉三角</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*『提示』</span></span><br><span class="line"><span class="comment">1. 第 1 行有 1 个元素，第 n 行有 n 个元素</span></span><br><span class="line"><span class="comment">2. 第一行的第一个元素和最后一个元素都是  1</span></span><br><span class="line"><span class="comment">3. 从第三行开始，对于     非第一个元素和最后一个元素   的元素，即</span></span><br><span class="line"><span class="comment">yanghui[i][j] = yanghui[i - 1][j - 1] + yanghui[i - 1][j]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YangHui</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//1.声明并初始化二维数组</span></span><br><span class="line">		<span class="keyword">int</span>[][] yangHui = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][];</span><br><span class="line">		<span class="comment">//2.给数组的元素赋值</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; yangHui.length;i ++) &#123;</span><br><span class="line">			yangHui[i] = <span class="keyword">new</span> <span class="keyword">int</span>[i + <span class="number">1</span>];</span><br><span class="line">			<span class="comment">//2.1给首末元素赋值</span></span><br><span class="line">			yangHui[i][<span class="number">0</span>] = yangHui[i][i] = <span class="number">1</span>;</span><br><span class="line">			<span class="comment">//2.2给每行的首末元素赋值</span></span><br><span class="line"><span class="comment">//			if(i &gt; 1) &#123;</span></span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; yangHui[i].length - <span class="number">1</span>;j ++) &#123;</span><br><span class="line">					yangHui[i][j] = yangHui[i - <span class="number">1</span>][j - <span class="number">1</span>] + yangHui[i -<span class="number">1</span>][j];</span><br><span class="line">				&#125;</span><br><span class="line"><span class="comment">//			&#125;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3. 遍历二维数组</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; yangHui.length;i ++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; yangHui[i].length;j ++) &#123;</span><br><span class="line">				System.out.print(yangHui[i][j] + <span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-方法</title>
    <url>/2020/03/16/%E7%AC%94%E8%AE%B0-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>方法的使用及方法重载</p>
<a id="more"></a>

<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="0-基本概念"><a href="#0-基本概念" class="headerlink" title="0. 基本概念"></a>0. 基本概念</h2><p>方法，又称为函数（Function），代表一个独立功能，目的为了代码重用</p>
<h2 id="1-声明格式"><a href="#1-声明格式" class="headerlink" title="1. 声明格式"></a>1. 声明格式</h2><p>[修饰符列表] 返回值类型  方法名 ([形参列表]) [抛出异常列表] {</p>
<p>​        方法体，方法功能的实现代码;</p>
<p>​        [return  [返回值];]</p>
<p>}</p>
<h3 id="1-0-四种形式"><a href="#1-0-四种形式" class="headerlink" title="1.0. 四种形式"></a>1.0. 四种形式</h3><h4 id="1-0-0-无参无返回值"><a href="#1-0-0-无参无返回值" class="headerlink" title="1.0.0. 无参无返回值"></a>1.0.0. 无参无返回值</h4><p>[修饰符列表] void 方法名() [抛出的异常列表] {</p>
<p>​        方法体;</p>
<p>}</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名()&#123;</span><br><span class="line">	方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-0-1-有参无返回值"><a href="#1-0-1-有参无返回值" class="headerlink" title="1.0.1. 有参无返回值"></a>1.0.1. 有参无返回值</h4><p>[修饰符列表] void 方法名(形参列表)[抛出的异常列表]{</p>
<p>​        方法体;</p>
<p>}</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(形参列表)&#123;</span><br><span class="line">	方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-0-2-无参有返回值"><a href="#1-0-2-无参有返回值" class="headerlink" title="1.0.2. 无参有返回值"></a>1.0.2. 无参有返回值</h4><p>[修饰符列表] 返回值类型 方法名()[抛出的异常列表]{</p>
<p>​        方法体;</p>
<p>}</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名()&#123;</span><br><span class="line">	方法体;</span><br><span class="line">	<span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-0-3-有参有返回值"><a href="#1-0-3-有参有返回值" class="headerlink" title="1.0.3. 有参有返回值"></a>1.0.3. 有参有返回值</h4><p>[修饰符列表] 返回值类型 方法名(形参列表) [抛出的异常列表] {</p>
<p>​        方法体;</p>
<p>}</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(形参列表)&#123;</span><br><span class="line">	方法体;</span><br><span class="line">	<span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-调用格式"><a href="#2-调用格式" class="headerlink" title="2. 调用格式"></a>2. 调用格式</h2><ul>
<li>在本类中，不需在方法名前面加前缀</li>
<li>在其他类中，需要在方法名前面加前缀<ul>
<li>调用方法为静态方法(static修饰的方法)时，调用格式为<strong>类名.方法名</strong></li>
<li>调用方法为非静态方法时，调用格式为<strong>对象名.方法名</strong></li>
</ul>
</li>
<li>调用时，需关注一下<strong>有无形参</strong>和<strong>有无返回值</strong><ul>
<li><strong>如果有形参</strong>，调用时必须传实参，而且实参的个数与形参的个数一致，类型兼容</li>
<li><strong>如果没有形参</strong>，调用时也不用传实参</li>
<li><strong>如果有返回值</strong>，调用时就可接受可不接受</li>
<li><strong>如果无返回值</strong>，调用时不能用变量接收，只能单独成一个语句</li>
</ul>
</li>
</ul>
<h2 id="3-方法参数传递机制"><a href="#3-方法参数传递机制" class="headerlink" title="3. 方法参数传递机制"></a>3. 方法参数传递机制</h2><p><strong>Java中只有值传递！！！</strong>(日后需要再深入分析)</p>
<ul>
<li>形参的类型是基本数据类型时，<strong>值传递</strong> ，形参的修改不会影响到实参。</li>
<li>形参的类型是引用数据类型时，<strong>值传递</strong>，传递的是内存地址。</li>
</ul>
<h2 id="4-方法的重载-Overload"><a href="#4-方法的重载-Overload" class="headerlink" title="4. 方法的重载(Overload)"></a>4. 方法的重载(Overload)</h2><h3 id="4-0-概念"><a href="#4-0-概念" class="headerlink" title="4.0. 概念"></a>4.0. 概念</h3><p>在<strong>同一个类</strong>中，方法名相同，形参列表不同的两个或多个方法构成方法的重载。与返回值类型无关</p>
<p><strong>两同一不同</strong>：同一个类中，相同方法名。不同参数(参数列表，参数个数，参数类型)</p>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>Java基础</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-初识Java</title>
    <url>/2020/03/15/%E7%AC%94%E8%AE%B0-%E5%88%9D%E8%AF%86Java/</url>
    <content><![CDATA[<p>Java的简单叙述</p>
<a id="more"></a>

<h1 id="初识Java"><a href="#初识Java" class="headerlink" title="初识Java"></a>初识Java</h1><h2 id="0-Java历史简述"><a href="#0-Java历史简述" class="headerlink" title="0. Java历史简述"></a>0. Java历史简述</h2><ul>
<li>诞生于SUN（Stanford University Network）</li>
<li>Java之父：詹姆斯.高斯林</li>
<li>2009年SUN被Oracle甲骨文公司收购</li>
<li>于1996年发布JDK1.0正式版</li>
<li>比较有有代表性的几个版本：<ul>
<li>JDK1.2（引入了集合框架等）</li>
<li>JDK1.4（引入了NIO）</li>
<li>JDK1.5（枚举、泛型、可变参数、foreach循环、自动装箱拆箱…）</li>
<li>JDK1.7（switch对字符串的支持，try…with…resource）</li>
<li>JDK1.8（接口、日期时间API、Optional类、Lambda表达式和StreamAPI）</li>
</ul>
</li>
</ul>
<h2 id="1-Java特点简述"><a href="#1-Java特点简述" class="headerlink" title="1. Java特点简述"></a>1. Java特点简述</h2><h3 id="1-0-面向对象"><a href="#1-0-面向对象" class="headerlink" title="1.0. 面向对象"></a>1.0. 面向对象</h3><ul>
<li>类与对象，类的成员</li>
<li>三大特性：封装，继承，多态</li>
<li>高级特性：接口、抽象类、枚举、注解</li>
</ul>
<h3 id="1-1-健壮性"><a href="#1-1-健壮性" class="headerlink" title="1.1. 健壮性"></a>1.1. 健壮性</h3><h3 id="1-2-跨平台"><a href="#1-2-跨平台" class="headerlink" title="1.2. 跨平台"></a>1.2. 跨平台</h3><ul>
<li>Write Once ,Run Anywhere.</li>
<li>原理：不同的操作系统使用不同的JVM，而Java程序编译成字节码，运行在JVM上</li>
</ul>
<h3 id="1-3-简单性"><a href="#1-3-简单性" class="headerlink" title="1.3. 简单性"></a>1.3. 简单性</h3><h3 id="1-4-高性能"><a href="#1-4-高性能" class="headerlink" title="1.4. 高性能"></a>1.4. 高性能</h3><h3 id="1-5-多线程"><a href="#1-5-多线程" class="headerlink" title="1.5. 多线程"></a>1.5. 多线程</h3><h3 id="1-6-分布式"><a href="#1-6-分布式" class="headerlink" title="1.6. 分布式"></a>1.6. 分布式</h3><h2 id="2-概念简述"><a href="#2-概念简述" class="headerlink" title="2. 概念简述"></a>2. 概念简述</h2><ul>
<li>JDK：Java Development Kit，Java的开发工具集，包含JRE + 开发工具（javac.exe，java.exe，javadoc.exe，jar.exe）</li>
<li>JRE：Java Runtime Enviroment，Java运行环境，包括JVM + 核心类库</li>
<li>JVM：Java Virtual Machine，Java的虚拟机</li>
</ul>
<h2 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3. 环境搭建"></a>3. 环境搭建</h2><p><strong>待写</strong></p>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-路径的编写方式</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-%E8%B7%AF%E5%BE%84%E7%9A%84%E7%BC%96%E5%86%99%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>关于<code>/</code>在Web中的具体含义，其真实性有待验证</p>
<a id="more"></a>

<h1 id="路径的编写方式"><a href="#路径的编写方式" class="headerlink" title="路径的编写方式"></a>路径的编写方式</h1><h2 id="web-中-斜杠的不同意义"><a href="#web-中-斜杠的不同意义" class="headerlink" title="web 中 / 斜杠的不同意义"></a>web 中 / 斜杠的不同意义</h2><p>在 web 中 <code>/</code> 斜杠 是一种绝对路径。<br><code>/</code>如果被浏览器解析，得到的地址是：<code>http://ip:port/</code>。<br>例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>斜杠<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>/</code>如果被服务器解析，得到的地址是：<code>http://ip:port/工程路径</code>。<br>例:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">servletContext.getRealPath(“/”);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getRequestDispatcher(“/”);</span><br></pre></td></tr></table></figure>

<p>特殊情况：<br><br>response.sendRediect(“/”);<br> <br>把<code>/</code>发送给浏览器解析。得到 <code>http://ip:port/</code></p>
<p><strong>以下写的路径需经试验，不保证全部正确呢</strong></p>
<h2 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h2><p><strong>待试验:要么不加斜杠，要么把路径写全了</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/项目名/资源名"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a>form标签</h2><p><strong>待试验:要么不加斜杠，要么把路径写全了</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/项目名/资源名"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p><strong>待试验:”/资源名”会报错哦</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.sendRedirect(<span class="string">"/项目名/资源名 或 资源名"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**待试验:&quot;&#x2F;项目名&#x2F;资源名&quot;会报错哦**</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">转发：req.getRequestDispatcher(<span class="string">"/资源名 或 资源名"</span>).forward(req, resp);</span><br></pre></td></tr></table></figure>

<h2 id="欢迎页面"><a href="#欢迎页面" class="headerlink" title="欢迎页面"></a>欢迎页面</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>资源名<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Serlvet标签"><a href="#Serlvet标签" class="headerlink" title="Serlvet标签"></a>Serlvet标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.xxxx.xxxx.xxxxServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/资源名<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Cookie设置path"><a href="#Cookie设置path" class="headerlink" title="Cookie设置path"></a>Cookie设置path</h2><p><strong>待验证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cookie.setPath(<span class="string">"/项目名/资源路径"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p><strong>待验证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletContext context = config.getServletContext();</span><br><span class="line">context.getRealPath(<span class="string">"/WEB-INF/classes/xxxx.properties"</span>);</span><br><span class="line">context.getRealPath(<span class="string">"/资源名"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p><strong>待验证:写/项目名/资源名识别不了</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:forward page:<span class="string">"资源名 或 /资源名"</span>&gt;</span><br><span class="line">&lt;jsp:forward&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>路径</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-集合</title>
    <url>/2020/04/10/%E7%AC%94%E8%AE%B0-%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>Java集合概述</p>
<a id="more"></a>

<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="0-集合简述"><a href="#0-集合简述" class="headerlink" title="0. 集合简述"></a>0. 集合简述</h2><p>Java集合就像是一种容器，可以<strong>动态</strong>地把多个对象的引用放入容器中。</p>
<p>Java集合可分为<strong>Collection</strong>和<strong>Map</strong>两种体系</p>
<ul>
<li>Collection接口：存储单列数据，定义了一组对象的方法的集合</li>
<li>Map接口：存储双列数据，保存具有映射关系“key-value对”的集合</li>
</ul>
<h2 id="1-Collection接口"><a href="#1-Collection接口" class="headerlink" title="1. Collection接口"></a>1. Collection接口</h2><p>Collection接口是<strong>List</strong>、<strong>Set</strong>和<strong>Queue</strong>接口的父接口。<br>Java5之前，Java集合会丢失容器中所有对象的数据类型，把所有对象都当成Object类型处理。<strong>Java5之后增加了泛型后</strong>，Java集合可以记住所有容器中对象的数据类型了。</p>
<h3 id="1-0-Collection接口的方法"><a href="#1-0-Collection接口的方法" class="headerlink" title="1.0. Collection接口的方法"></a>1.0. Collection接口的方法</h3><h4 id="1-0-0-增"><a href="#1-0-0-增" class="headerlink" title="1.0.0. 增"></a>1.0.0. 增</h4><ul>
<li><strong>boolean add (E e)</strong></li>
<li><strong>boolean addAll (Collection&lt;? extends E&gt; c)</strong></li>
</ul>
<h4 id="1-0-1-删"><a href="#1-0-1-删" class="headerlink" title="1.0.1. 删"></a>1.0.1. 删</h4><ul>
<li><strong>boolean remove (Object o)</strong>：通过元素的equals方法判断是否是要删除的那个元素。只会删除找到的第一个元素。</li>
<li><strong>boolean removeAll (Collection&lt;?&gt; c)</strong>：删除指定集合中包含的所有此元素。</li>
</ul>
<h4 id="1-0-2-清空集合"><a href="#1-0-2-清空集合" class="headerlink" title="1.0.2. 清空集合"></a>1.0.2. 清空集合</h4><ul>
<li><strong>void clear ()</strong></li>
</ul>
<h4 id="1-0-3-查"><a href="#1-0-3-查" class="headerlink" title="1.0.3. 查"></a>1.0.3. 查</h4><ul>
<li><strong>boolean contains (Object obj)</strong>：在当前集合查找指定元素</li>
<li><strong>boolean containsAll (Collection c)</strong>：判断集合c是否是当前集合的<strong>子集</strong></li>
</ul>
<h4 id="1-0-4-取两个集合交集"><a href="#1-0-4-取两个集合交集" class="headerlink" title="1.0.4. 取两个集合交集"></a>1.0.4. 取两个集合交集</h4><ul>
<li><strong>boolean retainAll (Collection c)</strong>：把两者交集保存在当前集合中，并不影响集合c</li>
</ul>
<h4 id="1-0-5-转成对象数组"><a href="#1-0-5-转成对象数组" class="headerlink" title="1.0.5. 转成对象数组"></a>1.0.5. 转成对象数组</h4><ul>
<li><strong>&lt;T&gt; T[] toArray (T[] a)</strong></li>
</ul>
<h4 id="1-0-6-是否是空集合"><a href="#1-0-6-是否是空集合" class="headerlink" title="1.0.6. 是否是空集合"></a>1.0.6. 是否是空集合</h4><ul>
<li><strong>boolean isEmpty ()</strong></li>
</ul>
<h4 id="1-0-7-遍历"><a href="#1-0-7-遍历" class="headerlink" title="1.0.7. 遍历"></a>1.0.7. 遍历</h4><ul>
<li><strong>Iterator<E> iterator ()</E></strong>：返回迭代器对象，用于集合遍历</li>
</ul>
<h2 id="2-Collection的子接口之List"><a href="#2-Collection的子接口之List" class="headerlink" title="2. Collection的子接口之List"></a>2. Collection的子接口之List</h2><ul>
<li>List集合中的元素有序、且可重复</li>
<li>List集合中的元素都有其对应的顺序索引</li>
</ul>
<h3 id="2-0-List接口中的方法"><a href="#2-0-List接口中的方法" class="headerlink" title="2.0. List接口中的方法"></a>2.0. List接口中的方法</h3><p>List除了从Collection集合继承的放之四海而皆准，List集合里还添加了些根据索引来操作集合元素的方法</p>
<h4 id="2-0-0-增"><a href="#2-0-0-增" class="headerlink" title="2.0.0. 增"></a>2.0.0. 增</h4><ul>
<li><strong>void add (int index, Object ele)</strong>：向指定索引处添加指定元素，集合长度改变</li>
<li><strong>boolean addAll (int index, Collection eles)</strong>：向指定索引处添加指定集合eles</li>
</ul>
<h4 id="2-0-1-删"><a href="#2-0-1-删" class="headerlink" title="2.0.1. 删"></a>2.0.1. 删</h4><ul>
<li><strong>Object remove (int index)</strong>：移除指定索引处的元素，并将该元素返回</li>
</ul>
<h4 id="2-0-2-查"><a href="#2-0-2-查" class="headerlink" title="2.0.2. 查"></a>2.0.2. 查</h4><ul>
<li><strong>int indexOf (Object obj)</strong>：返回元素obj在集合中<strong>首次</strong>出现的索引，如果没有该元素，返回-1</li>
<li><strong>int lastIndexOf (Object obj)</strong>：返回元素obj在集合中<strong>最后一次</strong>出现的索引，如果没有该元素，返回-1</li>
<li><strong>Object get (int index)</strong>：获取指定索引处的元素</li>
</ul>
<h4 id="2-0-3-替换"><a href="#2-0-3-替换" class="headerlink" title="2.0.3. 替换"></a>2.0.3. 替换</h4><ul>
<li><strong>Object set (int index, Object obj)</strong>：替换指定索引处的元素，并将被替换的元素返回</li>
</ul>
<h4 id="2-0-4-截取"><a href="#2-0-4-截取" class="headerlink" title="2.0.4. 截取"></a>2.0.4. 截取</h4><ul>
<li><strong>List subList (int fromIndex, int toIndex)</strong>：返回从<strong>formIndex</strong>到<strong>toIndex</strong>区间内的子集合</li>
</ul>
<h3 id="2-1-List的实现类之ArrayList"><a href="#2-1-List的实现类之ArrayList" class="headerlink" title="2.1. List的实现类之ArrayList"></a>2.1. List的实现类之ArrayList</h3><p><strong>ArrayList</strong>是List接口的典型实现类、主要实现类</p>
<h4 id="2-1-0-ArrayList在JDK1-8之前与之后的实现区别"><a href="#2-1-0-ArrayList在JDK1-8之前与之后的实现区别" class="headerlink" title="2.1.0. ArrayList在JDK1.8之前与之后的实现区别"></a>2.1.0. ArrayList在JDK1.8之前与之后的实现区别</h4><ul>
<li><strong>JDK1.8之前</strong>：ArrayList像饿汉式，直接创建一个初始容量为10的数组</li>
<li><strong>JDK1.8之后</strong>：ArrayList像饿汉式，一开始创建一个长度为0的数组，当添加第一个元素时再创建一个初始容量为10的数组</li>
</ul>
<h4 id="2-1-1-ArrayList的特点"><a href="#2-1-1-ArrayList的特点" class="headerlink" title="2.1.1. ArrayList的特点"></a>2.1.1. ArrayList的特点</h4><ul>
<li>因为底层是动态数组，所以<strong>查找操作快</strong>，<strong>插入、删除操作慢</strong></li>
<li>线程不安全，效率高</li>
<li>存储的数据可重复</li>
<li>存储数据有序(放和取的顺序一致)</li>
<li>有索引</li>
<li>容量动态增长，会扩大到原来的1.5倍</li>
</ul>
<h4 id="2-1-2-其他需要注意的"><a href="#2-1-2-其他需要注意的" class="headerlink" title="2.1.2. 其他需要注意的"></a>2.1.2. 其他需要注意的</h4><p>Arrays.asList(…)方法返回的List集合，既不是ArrayList实例，也不是Vector实例。<strong>ArrayList.asList(…)返回值是一个固定长度的List集合</strong>。该集合不能进行添加，修改，删除的操作。</p>
<h3 id="2-2-List的实现类之LinkedList"><a href="#2-2-List的实现类之LinkedList" class="headerlink" title="2.2. List的实现类之LinkedList"></a>2.2. List的实现类之LinkedList</h3><p>对于频繁<strong>插入</strong>或<strong>删除</strong>元素的操作，建议使用<strong>LinkedList</strong>，效率高</p>
<h4 id="2-2-0-LinkedList新增的方法"><a href="#2-2-0-LinkedList新增的方法" class="headerlink" title="2.2.0. LinkedList新增的方法"></a>2.2.0. LinkedList新增的方法</h4><ul>
<li><strong>void addFirst (Object obj)</strong></li>
<li><strong>void addLast (Object obj)</strong></li>
<li><strong>Object getFirst ()</strong></li>
<li><strong>Object getLast ()</strong></li>
<li><strong>Obejct removeFirst ()</strong></li>
<li><strong>Object removeLast ()</strong></li>
</ul>
<h4 id="2-2-1-LinkedList的特点"><a href="#2-2-1-LinkedList的特点" class="headerlink" title="2.2.1. LinkedList的特点"></a>2.2.1. LinkedList的特点</h4><ul>
<li>底层使用的是双向链表，<strong>插入、删除操作快</strong>，<strong>查找操作慢</strong></li>
<li>线程不安全，效率高</li>
<li>容量可动态增长</li>
<li>有序(存和取的顺序相同)</li>
<li>存储的数据可重复</li>
<li>LinkedList有索引???</li>
</ul>
<h3 id="2-3-List的实现类之Vector"><a href="#2-3-List的实现类之Vector" class="headerlink" title="2.3. List的实现类之Vector"></a>2.3. List的实现类之Vector</h3><p>Vector，古老的集合类，JDK1.0就有了。尽量避免使用</p>
<h4 id="2-3-0-Vector的子类Stack"><a href="#2-3-0-Vector的子类Stack" class="headerlink" title="2.3.0. Vector的子类Stack"></a>2.3.0. Vector的子类Stack</h4><p>底层是个数组，每次添加后，栈顶是数组的[size-1]号元素，栈底是数组的[0]号元素</p>
<h5 id="Stack的方法"><a href="#Stack的方法" class="headerlink" title="Stack的方法"></a>Stack的方法</h5><ul>
<li><strong>public E peek ()</strong>：查看栈顶的元素，但不移除</li>
<li><strong>public E pop ()</strong>：获取栈顶的元素，但不移除</li>
<li><strong>public E push (E item)</strong>：压入栈，添加的位置在栈顶</li>
<li><strong>public int search (Object o)</strong>：返回指定对象在此堆栈是基于1的位置</li>
</ul>
<h2 id="3-Collection的子接口之Set"><a href="#3-Collection的子接口之Set" class="headerlink" title="3. Collection的子接口之Set"></a>3. Collection的子接口之Set</h2><ul>
<li>Set接口没有提供额外的方法</li>
<li>Set集合不允许包含相同的元素</li>
<li>Set判断两个对象是否相同不是使用<code>==</code>，而是根据<code>equals()</code>方法</li>
</ul>
<h3 id="3-0-Set的实现类之HashSet"><a href="#3-0-Set的实现类之HashSet" class="headerlink" title="3.0. Set的实现类之HashSet"></a>3.0. Set的实现类之HashSet</h3><p>HashSet是Set接口的典型实现，大多时候用Set集合时都用这个实现类。<br>底层也是数组，初始容量是16，当使用率超过0.75时，就会扩大为原来的2倍。</p>
<h4 id="3-0-1-HashSet的特点"><a href="#3-0-1-HashSet的特点" class="headerlink" title="3.0.1. HashSet的特点"></a>3.0.1. HashSet的特点</h4><ul>
<li>不能保证元素的排列顺序</li>
<li>没有<code>set()</code>和<code>get()</code>方法</li>
<li>存储的元素不可重复</li>
<li>线程不安全，可存储 null</li>
</ul>
<h4 id="3-0-2-HashSet集合判断两个元素相等的标准"><a href="#3-0-2-HashSet集合判断两个元素相等的标准" class="headerlink" title="3.0.2. HashSet集合判断两个元素相等的标准"></a>3.0.2. HashSet集合判断两个元素相等的标准</h4><p>两个对象通过hashCode()方法比较相等，并且两个对象的equals()方法返回值也相等</p>
<h4 id="3-0-3-不添加重复数据的简单叙述"><a href="#3-0-3-不添加重复数据的简单叙述" class="headerlink" title="3.0.3. 不添加重复数据的简单叙述"></a>3.0.3. 不添加重复数据的简单叙述</h4><p>向HashSet中添加元素a时,首先调用元素a所在类的<code>hashCode()</code>方法，计算出元素a的哈希值。 </p>
<ol>
<li>此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置）， 判断数组此位置上是否已经有元素：    <ul>
<li>如果此位置上没有其他元素，则元素a添加成功。    </li>
<li>如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的 hash值：       <ul>
<li>如果hash值不相同，则元素a添加成功。       </li>
<li>如果hash值相同，进而需要调用元素a所在类的equals()方法：equals()返回true,元素a添加失败; equals()返回false,则元素a添加成功</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="3-2-Set的实现类之LinkedHashSet"><a href="#3-2-Set的实现类之LinkedHashSet" class="headerlink" title="3.2. Set的实现类之LinkedHashSet"></a>3.2. Set的实现类之LinkedHashSet</h3><p>LinkedHashSet是HashSet的子类</p>
<h4 id="3-2-0-LinkedHashSet的特点"><a href="#3-2-0-LinkedHashSet的特点" class="headerlink" title="3.2.0. LinkedHashSet的特点"></a>3.2.0. LinkedHashSet的特点</h4><ul>
<li>LinkedHashSet根据元素的hashCode值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，似的元素看起来是以插入的顺序保存的</li>
<li>不允许元素重复</li>
<li>插入性能略低于HashSet，但在迭代访问Set时有很好的性能</li>
</ul>
<h3 id="3-3-Set的实现类之TreeSet"><a href="#3-3-Set的实现类之TreeSet" class="headerlink" title="3.3. Set的实现类之TreeSet"></a>3.3. Set的实现类之TreeSet</h3><p>TreeSet是SortedSet接口的实现类，SortedSet是Set的实现类。</p>
<h4 id="3-3-0-TreeSet的特点"><a href="#3-3-0-TreeSet的特点" class="headerlink" title="3.3.0. TreeSet的特点"></a>3.3.0. TreeSet的特点</h4><ul>
<li>TreeSet可以确保集合元素处于排序状态</li>
<li>底层使用<strong>红黑树</strong>存储数据</li>
<li>TreeSet有两种排序方法：自然排序和定制排序。默认情况下，TreeSet使用自然排序</li>
</ul>
<h4 id="3-3-1-自然排序"><a href="#3-3-1-自然排序" class="headerlink" title="3.3.1. 自然排序"></a>3.3.1. 自然排序</h4><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>要添加到TreeSet中的对象，其对应的类<strong>必须实现Comparable接口和该接口中的<code>compareTo (Object obj)</code>方法</strong></li>
<li>TreeSet会调用集合元素的<code>compareTo (Object obj)</code>方法来比较元素之间的大小关系，默认情况按<strong>升序</strong>排列</li>
<li>TreeSet中只有一个元素时无须比较<code>compareTo()</code>方法。</li>
<li>TreeSet中添加的是<strong>同类的对象</strong>时，才会比较大小</li>
</ul>
<h5 id="Comparable接口的典型实现"><a href="#Comparable接口的典型实现" class="headerlink" title="Comparable接口的典型实现"></a>Comparable接口的典型实现</h5><ul>
<li>BigDecimal、BigInteger及所有数值型对应的<strong>包装类</strong>：按它们对应的数值大小进行比较</li>
<li>Character：按字符的<strong>unicode</strong>值来进行比较</li>
<li>Boolean：<strong>true</strong>对应的包装类实例<strong>大于**</strong>false**对应的包装类实例</li>
<li>String：按字符串中字符的<strong>unicode</strong>值进行比较</li>
<li>Date、Time：后边的时间、日期比前面的时间、日期大</li>
</ul>
<h4 id="3-3-2-定制排序"><a href="#3-3-2-定制排序" class="headerlink" title="3.3.2 定制排序"></a>3.3.2 定制排序</h4><ul>
<li>添加到TreeSet中的对象要<strong>实现Comparator接口及该接口中的<code>compare (T o1, T o2)</code>方法</strong></li>
<li>比较的是o1和o2的大小。<code>compare (T o1, T o2)</code>方法返回正整数，则o1&gt;o2；返回负整数，表示o1&lt;o2；返回0，表示相等。</li>
<li>要想实现定制排序，需要将实现Comparator接口的实例作为形参传递给TreeSet的构造器</li>
<li>仍然只能向TreeSet中添加类型相同的对象，否则会报ClassCastException异常</li>
</ul>
<h3 id="3-4-Collection相关实现类的遍历"><a href="#3-4-Collection相关实现类的遍历" class="headerlink" title="3.4. Collection相关实现类的遍历"></a>3.4. Collection相关实现类的遍历</h3><h3 id="3-4-0-foreach形式"><a href="#3-4-0-foreach形式" class="headerlink" title="3.4.0. foreach形式"></a>3.4.0. foreach形式</h3><p>底层调用Iterator完成操作</p>
<h5 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (集合的元素类型 element : 集合名) &#123;</span><br><span class="line">    <span class="comment">// 代码块 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><p>遍历时效率高，但不适用于遍历的同时对集合进行修改，特别是影响集合元素个数的操作</p>
<h4 id="3-4-1-转流的方式"><a href="#3-4-1-转流的方式" class="headerlink" title="3.4.1. 转流的方式"></a>3.4.1. 转流的方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xxx.stream().forEach (str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>

<h4 id="3-4-2-Iterator方式"><a href="#3-4-2-Iterator方式" class="headerlink" title="3.4.2. Iterator方式"></a>3.4.2. Iterator方式</h4><ul>
<li><p>Iterator对象<strong>仅用于</strong>来遍历Collection集合中的元素</p>
</li>
<li><p>实现了Collection接口的类都有一个<code>iterator()</code>方法，用来返回一个实现了Iterator接口的对象</p>
</li>
<li><p>集合对象每次调用<code>iterator()</code>方法都得到一个全新的迭代器对象</p>
</li>
<li><p>如果还<strong>未调用<code>next()</code></strong>或在上一次调用<code>next()</code>之后<strong>已经调用了<code>remove()</code></strong>，再调用<code>remove()</code>都会报IllegalStateException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator iter = 集合对象.iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">	Object element = iter.next();</span><br><span class="line">	<span class="comment">//可以使用iter.remove()进行移除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="错误示例1"><a href="#错误示例1" class="headerlink" title="错误示例1"></a>错误示例1</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator iterator = list.iterator();         </span><br><span class="line"><span class="keyword">while</span> (iterator.next() != <span class="keyword">null</span>) &#123;             </span><br><span class="line">    <span class="comment">// 会间隔输出元素             </span></span><br><span class="line">    System.out.println(iterator.next());         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="错误示例2"><a href="#错误示例2" class="headerlink" title="错误示例2"></a>错误示例2</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(list.iterator().hasNext()) &#123;             </span><br><span class="line">    <span class="comment">// 死循环，集合对象每次调iterator()时都会得到一个全新的迭代 器对象  </span></span><br><span class="line">    System.err.println(list.iterator().next());         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="4-Map接口"><a href="#4-Map接口" class="headerlink" title="4. Map接口"></a>4. Map接口</h2><h3 id="4-0-Map接口的特点"><a href="#4-0-Map接口的特点" class="headerlink" title="4.0. Map接口的特点"></a>4.0. Map接口的特点</h3><ul>
<li>Map用于保存具有映射关系的数据，即key-value形式的数据</li>
<li><code>key</code>和<code>value</code>可以是任何引用类型的数据，<code>key</code>中存放数据的类型常是String类</li>
<li>Map的<code>key</code>用Set存放，不允许重复</li>
</ul>
<h3 id="4-1-Map接口的常用方法"><a href="#4-1-Map接口的常用方法" class="headerlink" title="4.1. Map接口的常用方法"></a>4.1. Map接口的常用方法</h3><h3 id="4-1-0-增删改查相关方法"><a href="#4-1-0-增删改查相关方法" class="headerlink" title="4.1.0. 增删改查相关方法"></a>4.1.0. 增删改查相关方法</h3><ul>
<li><strong>Object put (Object key, Object value)</strong>：将指定<code>key-value</code>添加到当前 map对象中</li>
<li><strong>void putAll (Map m)</strong>：将Map m 中所有的<code>key-value</code>存放到当前的Map中</li>
<li><strong>Object remove (Object key)</strong>：移除指定<code>key</code>的<code>key-value</code>，并返回<code>value</code></li>
<li><strong>void clear ()</strong>：清空当前map中的所有数据</li>
</ul>
<h4 id="4-1-1-元素查询的操作"><a href="#4-1-1-元素查询的操作" class="headerlink" title="4.1.1. 元素查询的操作"></a>4.1.1. 元素查询的操作</h4><ul>
<li><strong>Object get (Object key)</strong>：获取指定<code>key</code>对应的value</li>
<li><strong>boolean containsKey (Object key)</strong>：是否包含指定的<code>key</code></li>
<li><strong>boolean containsValue (Object value)</strong>：是否包含指定的<code>value</code></li>
<li><strong>int size ()</strong>：返回map中的<code>key-value</code>的个数</li>
<li><strong>boolean isEmpty ()</strong>：判断当前map是否为空</li>
<li><strong>boolean equals (Object obj)</strong>：判断当前map和obj是否相等</li>
</ul>
<h4 id="4-1-2-和迭代相关"><a href="#4-1-2-和迭代相关" class="headerlink" title="4.1.2. 和迭代相关"></a>4.1.2. 和迭代相关</h4><ul>
<li><strong>Set keySet ()</strong>：返回所有<code>key</code>构成的Set集合</li>
<li><strong>Collection values ()</strong>：返回所有value构成的Collection集合</li>
<li><strong>Set entrySet ()</strong>：返回所有<code>key-value</code>构成的Set集合</li>
</ul>
<h3 id="4-2-Map实现类之HashMap"><a href="#4-2-Map实现类之HashMap" class="headerlink" title="4.2. Map实现类之HashMap"></a>4.2. Map实现类之HashMap</h3><h4 id="4-2-0-HashMap概述及特点"><a href="#4-2-0-HashMap概述及特点" class="headerlink" title="4.2.0. HashMap概述及特点"></a>4.2.0. HashMap概述及特点</h4><p>HashMap是Map接口使用频率最高的实现类</p>
<ul>
<li>HashMap里存的<code>key-value</code>允许存null</li>
<li><code>key</code>里存的类要重写<code>equals()</code>和<code>hashCode()</code></li>
<li><code>value</code>里存的类要重写<code>equals()</code></li>
<li>一个<code>key-value</code>构成一个<code>entry</code></li>
</ul>
<h4 id="4-2-1-HashMap的存储结构"><a href="#4-2-1-HashMap的存储结构" class="headerlink" title="4.2.1. HashMap的存储结构"></a>4.2.1. HashMap的存储结构</h4><h5 id="JDK-7及以前版本"><a href="#JDK-7及以前版本" class="headerlink" title="JDK 7及以前版本"></a>JDK 7及以前版本</h5><p>HashMap是用<code>数组+链表</code>结构(即为链地址法)存储</p>
<h5 id="JDK-8版本后"><a href="#JDK-8版本后" class="headerlink" title="JDK 8版本后"></a>JDK 8版本后</h5><p>HashMap是用<code>数组+链表+红黑树</code>结构存储</p>
<h3 id="4-3-Map实现类之LinkedHashMap"><a href="#4-3-Map实现类之LinkedHashMap" class="headerlink" title="4.3. Map实现类之LinkedHashMap"></a>4.3. Map实现类之LinkedHashMap</h3><h4 id="4-3-0-LinkedHashMap概述及特点"><a href="#4-3-0-LinkedHashMap概述及特点" class="headerlink" title="4.3.0. LinkedHashMap概述及特点"></a>4.3.0. LinkedHashMap概述及特点</h4><ul>
<li>LinkedHashMap是HashMap的子类</li>
<li>在HashMap存储结构的基础上，使用了双向链表来记录添加元素的顺序</li>
<li>可以维护Map的迭代顺序</li>
</ul>
<h3 id="4-4-Map实现类之TreeMap"><a href="#4-4-Map实现类之TreeMap" class="headerlink" title="4.4. Map实现类之TreeMap"></a>4.4. Map实现类之TreeMap</h3><h4 id="4-4-0-TreeMap概述及特点"><a href="#4-4-0-TreeMap概述及特点" class="headerlink" title="4.4.0. TreeMap概述及特点"></a>4.4.0. TreeMap概述及特点</h4><ul>
<li>TreeMap可以保证所有的<code>key-value</code> 处于有序状态</li>
<li>按照key的“大小”顺序进行排列,依据<code>key</code>的<strong>自然排序</strong>Comparable（<code>compareTo()</code>)或<strong>定制排序</strong>Comparator(<code>compare()</code>)规则进行排序</li>
</ul>
<h3 id="4-5-Map实现类之Hashtable"><a href="#4-5-Map实现类之Hashtable" class="headerlink" title="4.5. Map实现类之Hashtable"></a>4.5. Map实现类之Hashtable</h3><h3 id="4-5-0-HashTable概述及特点"><a href="#4-5-0-HashTable概述及特点" class="headerlink" title="4.5.0. HashTable概述及特点"></a>4.5.0. HashTable概述及特点</h3><p>HashTable是个古老的Map实现类，JDK1.0就提供了。</p>
<ul>
<li>HashTable是线程安全的</li>
<li>HashTable不允许使用null作为<code>key</code>和<code>value</code></li>
<li>HashTable不能保证<code>key-value</code>的顺序</li>
</ul>
<h4 id="4-5-1-HashTable的实现类之Properties"><a href="#4-5-1-HashTable的实现类之Properties" class="headerlink" title="4.5.1. HashTable的实现类之Properties"></a>4.5.1. HashTable的实现类之Properties</h4><p>Properties是HashTable的子类，该类的对象用于处理属性文件</p>
<ul>
<li>Properties里的<code>key</code>和<code>value</code>都是字符串类型</li>
<li>存取数据时，建议使用<code>setProperty (String key, String value)</code>方法和<code>getProperty (String key)</code>方法</li>
</ul>
<h2 id="5-Collections工具类"><a href="#5-Collections工具类" class="headerlink" title="5. Collections工具类"></a>5. Collections工具类</h2><p>Collections是操作Set、List和Map等集合的工具类。<br>它提供了一系列静态方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法。</p>
<h3 id="5-0-Collections工具类的方法"><a href="#5-0-Collections工具类的方法" class="headerlink" title="5.0. Collections工具类的方法"></a>5.0. Collections工具类的方法</h3><h4 id="5-0-0-排序操作"><a href="#5-0-0-排序操作" class="headerlink" title="5.0.0. 排序操作"></a>5.0.0. 排序操作</h4><ul>
<li><strong>public static void reverse (List&lt;?&gt; list)</strong>：反转List中元素的顺序</li>
<li><strong>public static void shuffle (List&lt;?&gt; list)</strong>：对List集合元素进行随机排序</li>
<li><strong>public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List<T> list)</T></strong>：根据元素的自然顺序对指定 List 集合元素进行升序排序</li>
<li><strong>public static <T> void sort (List<T> list, Comparator&lt;? super T&gt; c)</T></T></strong>：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序 </li>
<li><strong>public static void swap (List&lt;?&gt; list, int i, int j)</strong>：将指定 list 集合中的 i 处元素和 j 处元素进行交换 </li>
</ul>
<h4 id="5-0-1-查找和替换"><a href="#5-0-1-查找和替换" class="headerlink" title="5.0.1. 查找和替换"></a>5.0.1. 查找和替换</h4><ul>
<li><strong>public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T max(Collection&lt;? extends T&gt; coll)</strong>：根据元素的自然顺序，返回给定集合中的最大元素</li>
<li><strong>public static <T> T max(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</T></strong>：根据 Comparator 指定的顺序，返回 给定集合中的最大元素 </li>
<li><strong>public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T min(Collection&lt;? extends T&gt; coll)</strong>：根据元素的自然顺序，返回给定集合中的最小元素</li>
<li><strong>public static <T> T min(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</T></strong>：根据 Comparator 指定的顺序，返回 给定集合中的最小元素 </li>
<li><strong>public static int frequency(Collection&lt;?&gt; c, Object o)</strong>：返回指定集合中指定元素的出现次数</li>
<li><strong>public static <T> void copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src)</T></strong>：将集合src中的内容复制到集合dest中 </li>
<li><strong>public static <T> boolean replaceAll(List<T> list, T oldVal,  T newVal)</T></T></strong>：使用新值替换 List 对象的所有旧值</li>
</ul>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>集合</tag>
        <tag>List</tag>
        <tag>Set</tag>
        <tag>Map</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-网络编程</title>
    <url>/2020/04/20/%E7%AC%94%E8%AE%B0-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>施工中，大部分摘自尚硅谷_宋红康课件</p>
<a id="more"></a>

<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并且 Java 实现了一个跨平台的网络库，程序员面对的是一个统一的网络编程环境</p>
<h2 id="网络通信要素概述"><a href="#网络通信要素概述" class="headerlink" title="网络通信要素概述"></a>网络通信要素概述</h2><h3 id="如何实现网络中的主机互相通信"><a href="#如何实现网络中的主机互相通信" class="headerlink" title="如何实现网络中的主机互相通信"></a>如何实现网络中的主机互相通信</h3><p>需要<strong>IP</strong>、<strong>端口号</strong>和一定的规则(即网络通信协议)</p>
<h5 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h5><ul>
<li>OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广</li>
<li>TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。</li>
</ul>
<h3 id="IP和端口号"><a href="#IP和端口号" class="headerlink" title="IP和端口号"></a>IP和端口号</h3><p>端口号与IP地址的组合得出一个<strong>网络套接字</strong>：<strong>Socket</strong></p>
<h4 id="IP-地址-InetAddress"><a href="#IP-地址-InetAddress" class="headerlink" title="IP 地址(InetAddress)"></a>IP 地址(InetAddress)</h4><ul>
<li>唯一的标识 Internet 上的计算机（通信实体）</li>
<li>本地回环地址(hostAddress)：<strong>127.0.0.1</strong> 主机名(hostName)：<strong>localhost</strong></li>
<li>IP地址分类方式一：IPV4 和 IPV6<ul>
<li><strong>IPV4</strong>：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如192.168.0.1</li>
<li><strong>IPV6</strong>：128位（16个字节），写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号（：）分开，如：3ffe:3201:1401:1280:c8ff:fe4d:db39:1984</li>
</ul>
</li>
<li>IP地址分类方式二：公网地址(万维网使用)和私有地址(局域网使用)。192.168.开头的就是私有址址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用</li>
</ul>
<h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><p>端口号标识正在计算机上运行的进程（程序）</p>
<ul>
<li>不同的进程有不同的端口号</li>
<li>被规定为一个 16 位的整数 0~65535。</li>
<li>端口分类：<ul>
<li><strong>公认端口</strong>：0~1023。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23）</li>
<li><strong>注册端口</strong>：1024~49151。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）。</li>
</ul>
</li>
</ul>
<h3 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h3><p>InetAddress类没有提供公共的构造器，而是提供了如下几个静态方法来获取InetAddress实例</p>
<ul>
<li><p><strong>public static InetAddress getLocalHost()</strong></p>
</li>
<li><p><strong>public static InetAddress getByName(String host)</strong></p>
</li>
</ul>
<p>InetAddress提供了如下几个常用的方法</p>
<ul>
<li><strong>public String getHostAddress()</strong>：返回 IP 地址字符串（以文本表现形式）。</li>
<li><strong>public String getHostName()</strong>：获取此 IP 地址的主机名</li>
<li><strong>public boolean isReachable(int timeout)</strong>：测试是否可以达到该地址</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        InetAddress name = InetAddress.getByName(<span class="string">"www.baidu.com"</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取InetAdress对象所含的域名</span></span><br><span class="line">        System.out.println(name.getHostName());</span><br><span class="line">        <span class="comment">// 获取InetAddress对象所含的IP地址</span></span><br><span class="line">        System.out.println(name.getHostAddress());</span><br><span class="line">        <span class="comment">// 获取本机域名和IP地址</span></span><br><span class="line">        InetAddress localHost = InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(localHost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><h4 id="网络通信协议-1"><a href="#网络通信协议-1" class="headerlink" title="网络通信协议"></a>网络通信协议</h4><p>计算机网络中实现通信必须有一些约定，即通信协议，对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。</p>
<h4 id="通信协议分层的思想"><a href="#通信协议分层的思想" class="headerlink" title="通信协议分层的思想"></a>通信协议分层的思想</h4><p>在制定协议时，把复杂成份分解成一些简单的成份，再将它们复合起来。最常用的复合方式是层次方式，即<strong>同层间可以通信</strong>、<strong>上一层可以调用下一层</strong>，<strong>而与再下一层不发生关系</strong>。各层互不影响，利于系统的开发和扩展。</p>
<h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p><strong>传输控制协议</strong>TCP(Transmission Control Protocol)</p>
<ul>
<li>使用TCP协议前，须先建立TCP连接，形成传输数据通道</li>
<li>传输前，采用“<strong>三次握手</strong>”方式，点对点通信，是可靠的</li>
<li>TCP协议进行通信的两个应用进程：客户端、服务端。</li>
<li>在连接中可进行<strong>大数据量的传输</strong></li>
<li><strong>传输完毕，需释放已建立的连接，效率低</strong></li>
</ul>
<h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul>
<li>将数据、源、目的封装成数据包，<strong>不需要建立连接</strong></li>
<li><strong>每个数据报的大小限制在64K内</strong></li>
<li>发送不管对方是否准备好，接收方收到也不确认，故是不可靠的</li>
<li>可以广播发送</li>
<li><strong>发送数据结束时无需释放资源</strong>，<strong>开销小</strong>，<strong>速度快</strong></li>
</ul>
<h4 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h4><ul>
<li>利用套接字(Socket)开发网络应用程序早已被广泛的采用。</li>
<li>网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符<strong>套接字</strong>。</li>
<li>通信的两端都要有Socket，是两台机器间通信的端点。</li>
<li>网络通信其实就是Socket间的通信。</li>
<li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</li>
<li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。</li>
<li>Socket分类：<ul>
<li>流套接字（<strong>stream socket</strong>）：使用TCP提供可依赖的字节流服务</li>
<li>数据报套接字（<strong>datagram socket</strong>）：使用UDP提供“尽力而为”的数据报服务</li>
</ul>
</li>
</ul>
<h2 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h2><h3 id="客户端Socket工作的四个基本的步骤"><a href="#客户端Socket工作的四个基本的步骤" class="headerlink" title="客户端Socket工作的四个基本的步骤"></a>客户端Socket工作的四个基本的步骤</h3><ul>
<li><strong>创建 Socket</strong>：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。<ul>
<li><strong>客户端程序可以使用Socket类创建对象，创建的同时会自动向服务器方发起连接</strong></li>
<li>Socket的构造器是：<ul>
<li><strong>Socket(String host,int port)throws UnknownHostException,IOException</strong>：向服务器(域名是<br>host。端口号为port)发起TCP连接，若成功，则创建Socket对象，否则抛出异常。</li>
<li><strong>Socket(InetAddress address,int port)throws IOException</strong>：根据InetAddress对象所表示的IP地址以及端口号port发起连接。</li>
</ul>
</li>
<li>客户端建立socketAtClient对象的过程就是向服务器发出套接字连接请求</li>
</ul>
</li>
<li><strong>打开连接到 Socket 的输入/出流</strong>： 使用 getInputStream()方法获得输入流，使用getOutputStream()方法获得输出流，进行数据传输</li>
<li><strong>按照一定的协议对 Socket 进行读/写操作</strong>：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线程。</li>
<li><strong>关闭 Socket</strong>：断开客户端到服务器的连接，释放线路</li>
</ul>
<h3 id="服务器程序工作的四个基本的步骤"><a href="#服务器程序工作的四个基本的步骤" class="headerlink" title="服务器程序工作的四个基本的步骤"></a>服务器程序工作的四个基本的步骤</h3><ul>
<li><strong>调用 ServerSocket(int port)</strong> ：创建一个服务器端套接字，并绑定到指定端口上。用于<strong>监听客户端的请求</strong>。<ul>
<li>ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说，<strong>服务器必须事先建立一个等待客户请求建立套接字连接的ServerSocket对象</strong>。</li>
<li>所谓“接收”客户的套接字请求，就是<strong>accept()方法会返回一个 Socket 对象</strong></li>
</ul>
</li>
<li><strong>调用 accept()</strong>：<strong>监听连接请求</strong>，如果客户端请求连接，则接受连接，返回通信套接字对象。</li>
<li><strong>调用该Socket类对象的 getOutputStream() 和 getInputStream ()</strong>：获取输出流和输入流，开始网络数据的发送和接收。</li>
<li><strong>关闭ServerSocket和Socket对象</strong>：客户端访问结束，关闭通信套接字。</li>
</ul>
<h4 id="TCP编程实例"><a href="#TCP编程实例" class="headerlink" title="TCP编程实例"></a>TCP编程实例</h4><p>服务端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.准备好ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 2.监听一个客户端的连接，该方法是阻塞的方法，没有客户端的连接的话，将一直等待</span></span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line">        <span class="comment">// 3.1.获取输出流，用来发送数据给客户端</span></span><br><span class="line">        OutputStream out = accept.getOutputStream();</span><br><span class="line">        <span class="comment">// 3.2.获取输入流，用来接受客户端给服务器的数据</span></span><br><span class="line">        InputStream in = accept.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.通信</span></span><br><span class="line">        <span class="comment">// 接受数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(data, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        out.write(<span class="string">"欢迎登录"</span>.getBytes());</span><br><span class="line">        <span class="comment">// 在输出流的末尾写入一个标记，对方才能读到-1，否则对方的读取方法会一直阻塞</span></span><br><span class="line">        accept.shutdownOutput();</span><br><span class="line">        out.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 关闭Socket，不再与该客户端通信，之后输入和输出流也就心者关闭了</span></span><br><span class="line">        accept.close();</span><br><span class="line">        <span class="comment">// 6. 关闭serverSocket，不再接受任何客户端的通信</span></span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.准备Socket，连接服务器，需要指定服务器的IP地址和端口号</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 2.获取输出流，用来发送数据给服务器</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 3.获取输入流，用来接受服务器给该客户端的数据</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="comment">// 4.通信</span></span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        out.write(<span class="string">"lalala"</span>.getBytes());</span><br><span class="line">        out.flush();</span><br><span class="line">        <span class="comment">// 在输出流的末尾写入一个标记，对方才能读到-1，否则对方的读取方法会一直阻塞</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接受数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(data, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.关闭Socket，不再与服务器通信，即断开与服务器的连接</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h2><ul>
<li>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。</li>
<li>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</li>
<li>DatagramPacket 对象封装了<strong>UDP数据报</strong>，在数据报中<strong>包含了发送端的IP地址和端口号以及接收端的IP地址和端口号</strong>。</li>
<li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。</li>
</ul>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li><p>DatagramSocket与DatagramPacket</p>
</li>
<li><p>建立发送端，接收端</p>
</li>
<li><p>建立数据包</p>
</li>
<li><p>调用Socket的发送、接收方法</p>
</li>
<li><p>关闭Socket</p>
</li>
</ol>
<p><strong>待补充实例</strong></p>
<h2 id="URL编程"><a href="#URL编程" class="headerlink" title="URL编程"></a>URL编程</h2><h3 id="URL类"><a href="#URL类" class="headerlink" title="URL类"></a>URL类</h3><ul>
<li><p>URL(Uniform Resource Locator)：<strong>统一资源定位符</strong>，它表示 Internet 上某一资源的地址。</p>
</li>
<li><p>它是<strong>一种具体的URI</strong>，即URL可以用来标识一个资源，而且还指明了如何<strong>locate这个资源</strong>。</p>
</li>
<li><p>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp 站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。</p>
</li>
<li><p>URL的基本结构由5部分组成：<code>&lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名&gt;#片段名?参数列表</code></p>
<ul>
<li>例如: <a href="http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123" target="_blank" rel="noopener">http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123</a><ul>
<li>#片段名：即锚点，例如看小说，直接定位到章节</li>
<li>参数列表格式：参数名=参数值&amp;参数名=参数值….</li>
</ul>
</li>
</ul>
</li>
<li><p>java.net 中实现了类 URL。我们可以通过下面的构造器来初始化一个 URL 对象：</p>
<ul>
<li><strong>public URL (String spec)</strong>：通过一个表示URL地址的字符串可以构造一个URL对象。<ul>
<li>例如：<strong>URL url = new URL (“<a href="http://www.xxx.com/&quot;" target="_blank" rel="noopener">http://www.xxx.com/&quot;</a>);</strong> </li>
</ul>
</li>
<li><strong>public URL(URL context, String spec)</strong>：通过基 URL 和相对 URL 构造一个 URL 对象。<ul>
<li>例如：<strong>URL downloadUrl = new URL(url, “download.html”)</strong></li>
</ul>
</li>
<li><strong>public URL(String protocol, String host, String file)</strong><ul>
<li>例如：<strong>new URL(“http”, “<a href="http://www.xxx.com&quot;" target="_blank" rel="noopener">www.xxx.com&quot;</a>, “download. html”);</strong></li>
</ul>
</li>
<li><strong>public URL(String protocol, String host, int port, String file)</strong><ul>
<li>例如: <strong>URL gamelan = new URL(“http”, “<a href="http://www.xxx.com&quot;" target="_blank" rel="noopener">www.xxx.com&quot;</a>, 80, “download.html”);</strong></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>一个URL对象生成后，其属性是不能被改变的</strong>，但可以通过它给定的方法来获取这些属性：</p>
<ul>
<li>public String getProtocol( ) 获取该URL的协议名</li>
<li>public String getHost( ) 获取该URL的主机名</li>
<li>public String getPort( ) 获取该URL的端口号</li>
<li>public String getPath( ) 获取该URL的文件路径</li>
<li>public String getFile( ) 获取该URL的文件名</li>
<li>public String getQuery( ) 获取该URL的查询名</li>
</ul>
</li>
</ul>
<h3 id="URLConnection类"><a href="#URLConnection类" class="headerlink" title="URLConnection类"></a>URLConnection类</h3><p>URLConnection表示到URL所引用的远程对象的连接。<strong>当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection对象</strong>。如果连接过程失败，将产生IOException。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL netchinaren = <span class="keyword">new</span> URL (<span class="string">"http://www.xxx.com/index.shtml"</span>); </span><br><span class="line">URLConnectonn u = netchinaren.openConnection( );</span><br></pre></td></tr></table></figure>

<p>之后通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。</p>
<h3 id="URI、URL、URN的区别"><a href="#URI、URL、URN的区别" class="headerlink" title="URI、URL、URN的区别"></a>URI、URL、URN的区别</h3><ul>
<li><p><strong>URI</strong>，是uniform resource identifier，<strong>统一资源标识符</strong>，用来唯一的标识一个资源。</p>
</li>
<li><p><strong>URL</strong>是uniform resource locator，<strong>统一资源定位符</strong>，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</p>
</li>
<li><p><strong>URN</strong>，uniform resource name，<strong>统一资源命名</strong>，是通过名字来标识资源，比如mailto:<a href="mailto:java-net@java.sun.com">java-net@java.sun.com</a>。</p>
</li>
</ul>
<p>也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。</p>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
        <tag>TCP/IP</tag>
        <tag>UDP</tag>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-面向对象</title>
    <url>/2020/03/16/%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>简单了解下面向对象咯</p>
<a id="more"></a>

<meta name="referrer" content="no-referrer">

<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="0-面向对象与面向过程的区别"><a href="#0-面向对象与面向过程的区别" class="headerlink" title="0. 面向对象与面向过程的区别"></a>0. 面向对象与面向过程的区别</h2><p>面向过程：关注具体实现过程，以函数为最小单位</p>
<p>面向对象：关注调用哪个对象，以对象/类为最小单位</p>
<h2 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1. 类与对象"></a>1. 类与对象</h2><h3 id="1-0-概念"><a href="#1-0-概念" class="headerlink" title="1.0. 概念"></a>1.0. 概念</h3><p>类：对一类具有相同特征的事物的抽象描述</p>
<p>对象：类的实例，是具体的个体</p>
<h3 id="1-1-关系"><a href="#1-1-关系" class="headerlink" title="1.1. 关系"></a>1.1. 关系</h3><p>类是对象的设计图，是创建对象的模板；对象是类的实例，是一个具体的个体</p>
<h3 id="1-2-类的设计，成员"><a href="#1-2-类的设计，成员" class="headerlink" title="1.2. 类的设计，成员"></a>1.2. 类的设计，成员</h3><h4 id="1-2-0-属性"><a href="#1-2-0-属性" class="headerlink" title="1.2.0. 属性"></a>1.2.0. 属性</h4><ul>
<li>声明的位置：类中，方法外</li>
<li>保存的位置：静态属性(static修饰)保存在<strong>方法区</strong>中，非静态的属性保存在<strong>堆</strong>中</li>
<li>默认值：byte,short,int,long是<strong>0</strong>，float,double是<strong>0.0</strong>，boolean是<strong>false</strong>，char是<strong>\u0000</strong>，引用数据类型都是<strong>null</strong></li>
<li>作用域：整个类中</li>
<li>生命周期：随着对象的创建而创建，到垃圾回收为止</li>
</ul>
<h4 id="1-2-1-构造器"><a href="#1-2-1-构造器" class="headerlink" title="1.2.1. 构造器"></a>1.2.1. 构造器</h4><ul>
<li>作用：和<strong>new</strong>一起创建对象；为属性赋值</li>
<li>声明格式：<ul>
<li>无参格式：[修饰符] 类名 () {}</li>
<li>有参格式：[修饰符] 类名 (形参列表) {}</li>
</ul>
</li>
<li>特点：<ul>
<li>构造器名与类名<strong>必须</strong>完全相同</li>
<li>构造器没有返回值，也不能写void。实际每个构造方法结束后都有返回值，其类型为构造方法所在类的类型</li>
<li>构造器可以重载</li>
<li>如果一个类没有声明过构造器，编译器将<strong>默认添加一个无参构造器</strong>；如果这个类声明了构造器，编译器将不再自动添加无参构造器</li>
</ul>
</li>
<li>调用方式：<ul>
<li>和new一起：new 构造器 ()；new 构造器 (实参列表)</li>
<li>在本类的其他构造器中：this () 或 this (实参列表)</li>
<li>在子类的构造器中：super () 或 super (实参列表)</li>
</ul>
</li>
</ul>
<h4 id="1-2-2-方法"><a href="#1-2-2-方法" class="headerlink" title="1.2.2. 方法"></a>1.2.2. 方法</h4><p>无参无返回值;有参无返回值;无参有返回值;有参有返回值</p>
<h4 id="1-2-3-代码块"><a href="#1-2-3-代码块" class="headerlink" title="1.2.3. 代码块"></a>1.2.3. 代码块</h4><p>静态代码块：随着类的加载而执行，一个类的静态代码块只执行一次。初始化静态变量</p>
<p>非静态代码块：对象创建一次，调用一次，而且先于构造器调用。初始化实例变量</p>
<p>局部代码块：在方法中</p>
<p>赋值和执行的顺序：父类的静态代码块 –&gt; 子类的静态代码块  –&gt; 父类的构造块 –&gt; 父类的构造器 –&gt; 子类的构造块 –&gt; 子类的构造器</p>
<p><strong>图示</strong></p>
<p><img src="/2020/03/16/%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png" alt="代码块执行顺序"></p>
<h4 id="1-2-4-内部类"><a href="#1-2-4-内部类" class="headerlink" title="1.2.4. 内部类"></a>1.2.4. 内部类</h4><p>当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类</p>
<blockquote>
<p><em>内部类可以访问外部类的所有的成员，包括私有成员*</em></p>
</blockquote>
<h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><ul>
<li>修饰符：static必须要有；可以用final和abstract修饰；</li>
<li>成员情况：所有类型的成员都可以有</li>
</ul>
<p>调用问题：</p>
<ul>
<li>静态内部类中<strong>只能</strong>使用外部类的静态成员</li>
<li>外部类中可以使用静态内部类的<strong>任何</strong>成员</li>
<li>其他类<strong>调用格式</strong>：<ul>
<li>外部类名.内部类名.静态成员；</li>
<li>外部类名.内部类   变量 = new   外部类名.内部类()；变量.非静态成员；</li>
</ul>
</li>
</ul>
<h5 id="成员内部类-非静态内部类"><a href="#成员内部类-非静态内部类" class="headerlink" title="成员内部类(非静态内部类)"></a>成员内部类(非静态内部类)</h5><ul>
<li>修饰符：没有static修饰；可以用final和abstract修饰；</li>
<li>成员情况：允许定义常量；非静态内部类中<strong>不能含有</strong>静态属性、方法及静态代码块！！！！！</li>
</ul>
<p>调用问题：</p>
<ul>
<li>成员内部类中可以使用外部类的任何成员</li>
<li>在外部类的<strong>静态成员</strong>中不能使用<strong>非静态成员内部类</strong></li>
<li>其他类中使用成员内部类：<ul>
<li><strong>外部类  out = new  外部类();外部类.内部类  in = out.new 内部类();in.成员</strong></li>
</ul>
</li>
<li>外部类和内部类成员重名问题：<ul>
<li>默认访问的是内部类的同名成员</li>
<li>要想访问外部同名成员，格式为外部类.this.成员</li>
</ul>
</li>
<li>关于”非静态内部类中不能有static成员变量，却可以有static final 属性的编译期常量”的问题可参照：<ul>
<li><a href="https://www.jianshu.com/p/4dbe68850e1b?from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">https://www.jianshu.com/p/4dbe68850e1b?from=timeline&amp;isappinstalled=0</a></li>
</ul>
</li>
</ul>
<h5 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h5><ul>
<li>修饰符：4 种修饰符都不行；static不行；final和abstract可以</li>
<li>成员情况：静态成员不能有；其他的可以有</li>
</ul>
<p>调用情况：</p>
<ul>
<li><strong>不可以</strong>在外部类的其他方法中调用局部内部类</li>
<li><strong>不可以</strong>在其他类中调用局部内部类</li>
<li>只能在声明<strong>局部内部类</strong>的方法中使用，而且在声明之后使用</li>
<li>可以在内部类中使用外部类的<strong>局部变量</strong>，该变量得是final修饰的</li>
<li>在内部类中使用外部类的成员时，受所在方法的约束，如果所在方法是静态的，那么只能使用外部类的静态成员，如果所在方法是非静态的，那么都可以使用</li>
</ul>
<h5 id="匿名内部类-其使用情况待修改"><a href="#匿名内部类-其使用情况待修改" class="headerlink" title="匿名内部类(其使用情况待修改)"></a>匿名内部类(其使用情况待修改)</h5><ul>
<li>修饰符：没有任何修饰符修饰</li>
<li>成员情况：除了非静态的都可以，但是一般很少自定义方法等成员，它的成员都是重写父类的，父接口的方法</li>
<li>特点：声明类和创建对象同时进行；子类一定会调用父类的构造器。</li>
</ul>
<h2 id="2-面向对象的基本特征"><a href="#2-面向对象的基本特征" class="headerlink" title="2. 面向对象的基本特征"></a>2. 面向对象的基本特征</h2><h3 id="2-0-封装"><a href="#2-0-封装" class="headerlink" title="2.0. 封装"></a>2.0. 封装</h3><p>安全，使用方便(对于使用者屏蔽实现细节)</p>
<h3 id="2-1-继承"><a href="#2-1-继承" class="headerlink" title="2.1. 继承"></a>2.1. 继承</h3><ul>
<li>通过继承可以简化代码</li>
<li>通过extends关键字继承</li>
</ul>
<h4 id="2-1-0-继承的影响"><a href="#2-1-0-继承的影响" class="headerlink" title="2.1.0. 继承的影响"></a>2.1.0. 继承的影响</h4><ul>
<li><p>对属性的影响</p>
<p>子类继承父类时，一定会继承父类的所有的属性，包括私有的，但是由于私有的关键字private的原因，在子类中无法直接操作它，但是可以通过get/set方式操作它</p>
<p>当子类的属性与父类的属性重名时，而且父类的属性没有私有化，如果要访问父类的属性那么通过super.属性进行访问，如果子类中没有通过super.属性访问，那这个属性就表示是子类自己的</p>
</li>
<li><p>对方法的影响</p>
<p>子类继承父类时，一定会继承父类的所有的方法，包括私有的，但是由于private，在子类中无法直接操作，但是可以间接操作</p>
<p>当父类的方法实现不适用于子类时，子类可以对父类的方法的进行重写</p>
</li>
<li><p>对构造器的影响</p>
<p>子类继承父类时，不会继承父类的构造器</p>
<p>子类继承父类时，一定会调用父类的构造器</p>
<p>如果父类有无参构造，那么子类会默认去调用父类的无参构造。如果父类没有无参构造，只有有参构造，那么子类必须在子类构造器中手动调用父类的有参构造！！！</p>
<p>调用父类的无参构造的语句：super();调用父类的有参构造的语句：super(实参列表);这两个语句必须在子类的构造器的首行。</p>
</li>
</ul>
<h4 id="2-1-1-继承的特点"><a href="#2-1-1-继承的特点" class="headerlink" title="2.1.1. 继承的特点"></a>2.1.1. 继承的特点</h4><ul>
<li>单继承。Java中只支持单继承<br>   多层继承。在Java中，父类还可以有父类，而且在子类中会继承父类以及父类的父类的所有的属性与方法    </li>
<li>一个类可以有很多个子类，子类还可以有子类</li>
</ul>
<h3 id="2-2-多态"><a href="#2-2-多态" class="headerlink" title="2.2. 多态"></a>2.2. 多态</h3><h4 id="2-2-0-多态的表现形式"><a href="#2-2-0-多态的表现形式" class="headerlink" title="2.2.0. 多态的表现形式"></a>2.2.0. 多态的表现形式</h4><ul>
<li>方法形式的多态。<ul>
<li>方法重载：同一个类中，功能的多种实现形式</li>
<li>方法重写：父子类中，功能的不同实现形式</li>
</ul>
</li>
<li>对象的多态性：父类引用指向子类对象。<ul>
<li>编译时类型与运行时的类型不一致，编译时看“左边”，运行时看“右边”。编译时从“父类”中寻找方法，运行时执行的是“子类”重写过的代码</li>
<li>对象多态性的前提：继承；方法的重写；多态的引用</li>
</ul>
</li>
</ul>
<h4 id="2-2-1-类型的转换"><a href="#2-2-1-类型的转换" class="headerlink" title="2.2.1. 类型的转换"></a>2.2.1. 类型的转换</h4><ul>
<li><p>向上转型：子类对象赋值给父类变量</p>
</li>
<li><p>向下转型：</p>
<ul>
<li><p>把父类变量赋值给子类变量</p>
</li>
<li><p>是强制类型转换</p>
</li>
<li><p>若想向下转型成功，父类限量本身指向的就是该子类的对象</p>
</li>
<li><p>向下转型时，要用<code>instanceof</code>判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(变量  <span class="keyword">instanceof</span>  子类类型)&#123;</span><br><span class="line">	子类类型  temp = (子类类型)变量;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="3-关键字"><a href="#3-关键字" class="headerlink" title="3. 关键字"></a>3. 关键字</h2><h3 id="3-0-class"><a href="#3-0-class" class="headerlink" title="3.0. class"></a>3.0. class</h3><p>用于声明类</p>
<h3 id="3-1-new"><a href="#3-1-new" class="headerlink" title="3.1. new"></a>3.1. new</h3><p>用于创建对象，创建实例；new后面跟的是构造器</p>
<h3 id="3-2-this"><a href="#3-2-this" class="headerlink" title="3.2. this"></a>3.2. this</h3><ul>
<li>表示当前对象，里面存的是内存地址</li>
<li>当成员变量与局部变量或形参重名时，使用this.属性进行区别</li>
<li>this.方法<ul>
<li>表示调用“当前类”的方法</li>
<li>如果子类继承了父类，子类没有重写父类的方法，<strong>this.方法</strong>是调用从父类继承的方法</li>
<li>如果子类继承了父类，子类重写父类的方法，<strong>this.方法</strong>表示调用子类重写过的方法</li>
<li>this()或this(实参列表)，表示调用本类的其他构造器，而且必须在构造器的<strong>首行</strong></li>
<li><strong>this不能用在静态方法中</strong></li>
</ul>
</li>
</ul>
<h3 id="3-3-super"><a href="#3-3-super" class="headerlink" title="3.3. super"></a>3.3. super</h3><p>父类引用，存的是空间标识</p>
<ul>
<li>当子类的属性与父类的属性重名时，而且父类的属性没有私有化。如果需要调用父类的属性，那么通过<strong>super.属性</strong>进行调用。</li>
<li>当子类的方法重写了父类的方法时，如果需要调用父类的被重写的方法，那么通过<strong>super.方法</strong>进行调用。</li>
<li>当子类需要调用父类的构造器时，通过<strong>super()</strong>或<strong>super(实参列表)</strong>进行调用。而且这两个语句必须在子类的构造器的<strong>首行</strong>。</li>
</ul>
<h3 id="3-4-权限修饰符"><a href="#3-4-权限修饰符" class="headerlink" title="3.4. 权限修饰符"></a>3.4. 权限修饰符</h3><p><strong>public</strong>：公共的，范围：<strong>任意位置可以调用</strong>，可以修饰   类、成员</p>
<p><strong>protected</strong>：受保护的，范围：<strong>本包或子类中可以调用</strong>，可以修饰  成员</p>
<p><strong>缺省(default)</strong>：默认的，范围：<strong>本包中可以调用</strong>，可以修饰   类、成员</p>
<p><strong>private</strong>：私有的，范围：<strong>本类中可以调用</strong>，可以修饰   成员</p>
<p>图示</p>
<p><img src="/2020/03/16/%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6%E5%9B%BE%E7%A4%BA.png" alt="权限修饰符"></p>
<h3 id="3-5-static"><a href="#3-5-static" class="headerlink" title="3.5. static"></a>3.5. static</h3><p>静态的，可修饰成员(属性、方法、代码块、内部类)</p>
<ul>
<li>static修饰的属性称为<strong>类变量</strong>或<strong>静态变量</strong>，它的值是所有对象共享的，存储在<strong>方法区</strong>。该变量的get/set方法也是静态的</li>
<li>static修饰的方法就称为<strong>类方法</strong>或<strong>静态方法</strong>，调用它不需要创建对象，直接可以通过”<strong>类名.方法</strong>“调用</li>
<li>用static修饰的代码块称为<strong>静态代码块</strong>。随着类的加载并初始时而执行，而且一个类的静态代码块只执行一次。如果静态变量有显式初始化和静态代码块初始化，它俩属于同级，谁在前谁先执行</li>
</ul>
<h3 id="3-6-final"><a href="#3-6-final" class="headerlink" title="3.6. final"></a>3.6. final</h3><p>final修饰的类和方法<strong>不能被继承</strong>。</p>
<p>final修饰的变量不能被<strong>修改</strong> ，必须<strong>手动初始化</strong>(显示赋值、代码块赋值或构造器赋值)</p>
<h3 id="3-7-native"><a href="#3-7-native" class="headerlink" title="3.7. native"></a>3.7. native</h3><p>原生的</p>
<ul>
<li>修饰的方法的方法体是非Java语言实现的</li>
<li>对于调用者来说，和普通Java方法一样使用</li>
<li>如果有需要，也可以进行重写</li>
</ul>
<h2 id="4-包"><a href="#4-包" class="headerlink" title="4. 包"></a>4. 包</h2><h3 id="4-0-包的作用"><a href="#4-0-包的作用" class="headerlink" title="4.0. 包的作用"></a>4.0. 包的作用</h3><p>避免类重名；访问权限的控制；便于管理</p>
<p>###4.1. 包的声明</p>
<ul>
<li>格式：package 包名</li>
<li>必须在源文件的首行，一个源文件只能有一句</li>
<li>遵循命名规范，所有字母都小写，单词之间使用.，一般以公司的域名倒置</li>
</ul>
<h3 id="4-2-使用其他包的类"><a href="#4-2-使用其他包的类" class="headerlink" title="4.2. 使用其他包的类"></a>4.2. 使用其他包的类</h3><ul>
<li>import 包.类名;</li>
<li>要求：在package和class之间声明，可以import多句</li>
<li>被使用的类必须是public 或 protected（父子类）</li>
<li>导包形式：<ul>
<li>一一列举：import java.util.Random;import java.util.Scanner;</li>
<li>导入某个包的全部类：import java.util.*;</li>
<li>静态导入：import static java.lang.Math.*;</li>
</ul>
</li>
</ul>
<h3 id="4-3-打包编译处理命令"><a href="#4-3-打包编译处理命令" class="headerlink" title="4.3. 打包编译处理命令"></a>4.3. 打包编译处理命令</h3><p>javac -d . xxx.java</p>
<p>-d 表示生成的目录；点表示在当前所在目录生成程序类文件</p>
<h2 id="5-重载和重写的区别"><a href="#5-重载和重写的区别" class="headerlink" title="5. 重载和重写的区别"></a>5. 重载和重写的区别</h2><p><strong>overload</strong>:方法的重载。在同一类，方法名称相同，形参列表不同的两个或多个方法称为重载。</p>
<p><strong>override</strong>:方法的重写。在子类继承父类时，如果父类的方法实现不适用于子类，子类就可以对父类的方法进行重写，覆盖。</p>
<p>图示</p>
<p><img src="/2020/03/16/%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="重载和重写"></p>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>Java基础</tag>
        <tag>对象</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-面向对象高级特性</title>
    <url>/2020/04/08/%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>抽象类、接口、枚举、注解的相关介绍</p>
<a id="more"></a>

<h1 id="面向对象高级特性"><a href="#面向对象高级特性" class="headerlink" title="面向对象高级特性"></a>面向对象高级特性</h1><h2 id="0-抽象类和方法"><a href="#0-抽象类和方法" class="headerlink" title="0. 抽象类和方法"></a>0. 抽象类和方法</h2><h3 id="0-0-声明抽象类"><a href="#0-0-声明抽象类" class="headerlink" title="0.0. 声明抽象类"></a>0.0. 声明抽象类</h3><p>语法格式：<strong>[public/缺省] abstract class 类名 {}</strong></p>
<h3 id="0-1-声明抽象方法"><a href="#0-1-声明抽象方法" class="headerlink" title="0.1. 声明抽象方法"></a>0.1. 声明抽象方法</h3><p>语法格式：<strong>[public/protected/缺省] abstract 返回值类型 方法名 (形参列表);</strong></p>
<h3 id="0-2-抽象类的特点"><a href="#0-2-抽象类的特点" class="headerlink" title="0.2. 抽象类的特点"></a>0.2. 抽象类的特点</h3><ul>
<li><strong>抽象类不能实例化</strong></li>
<li>抽象类<strong>可以</strong>包含抽象方法，<strong>也可以</strong>没有抽象方法。但如果一个类有抽象方法，那么这个类必须是抽象类</li>
<li><strong>抽象类生来就是用来被继承的</strong>。其子类必须重写(实现)抽象父类的抽象方法，否则该子类也得是抽象类</li>
<li>抽象类可以包含抽象方法，其他的和非抽象类一样。可以有成员变量（类变量、实例变量）、构造器、代码块（静态代码块和非静态代码块）<br>方法（静态方法、非静态方法）</li>
<li>抽象类中的<strong>静态方法</strong>不受抽象类实例化对象的限制</li>
</ul>
<h2 id="1-接口"><a href="#1-接口" class="headerlink" title="1. 接口"></a>1. 接口</h2><p>接口即代表行为标准，功能标准</p>
<h3 id="1-0-如何声明接口"><a href="#1-0-如何声明接口" class="headerlink" title="1.0. 如何声明接口"></a>1.0. 如何声明接口</h3><p>声明格式：<strong>[public/缺省] interface 接口名{}</strong></p>
<h3 id="1-1-接口的特点"><a href="#1-1-接口的特点" class="headerlink" title="1.1. 接口的特点"></a>1.1. 接口的特点</h3><h4 id="1-1-0-JDK1-7及之前的接口特点"><a href="#1-1-0-JDK1-7及之前的接口特点" class="headerlink" title="1.1.0. JDK1.7及之前的接口特点"></a>1.1.0. JDK1.7及之前的接口特点</h4><ul>
<li><strong>接口不能实例化</strong>，接口中不能有构造器</li>
<li>接口只能有<strong>全局静态常量</strong>(public final static修饰的)和<strong>公共的抽象方法</strong>(public static abstract 修饰的)</li>
<li>接口的使用是通过<strong>实现类</strong>去实现（implements）的。类实现接口必须实现接口里申明的抽象方法，否则该类得是抽象类</li>
<li>接口可以多继承</li>
<li>类可以实现多个接口</li>
</ul>
<h4 id="1-1-1-JDK1-8之后的特点"><a href="#1-1-1-JDK1-8之后的特点" class="headerlink" title="1.1.1. JDK1.8之后的特点"></a>1.1.1. JDK1.8之后的特点</h4><p>其他的和JDK1.7一样，不一样的是JDK1.8之后，接口除了全局静态常量和公共抽象方法以外，还可以有静态方法和默认方法</p>
<ul>
<li>接口中的静态方法：<ul>
<li>调用格式：<code>接口名.方法</code></li>
</ul>
</li>
<li>接口中的默认方法：<ul>
<li>接口中的默认方法<strong>需要写default</strong></li>
<li>调用格式：<ul>
<li>在实现类外，<code>实现类对象.方法</code></li>
<li>在实现类里，重写了该默认方法，又想调用接口中的默认方法，可以用<code>接口名.super.方法</code></li>
</ul>
</li>
<li><strong>类优先原则</strong>：当一个类继承了父类，又实现了接口，而且父类中的某个方法与接口中的默认方法一样（方法名和形参列表），默认保留的是父类中的方法实现</li>
</ul>
</li>
<li>接口隐式抽象<ul>
<li>当声明一个接口的时候，不必使用abstract关键字。</li>
<li>接口中每一个方法也是隐式抽象的，声明时同样不需要abstract关键字。</li>
<li>接口中的方法都是公有的。</li>
</ul>
</li>
</ul>
<h2 id="2-接口和抽象类的区别"><a href="#2-接口和抽象类的区别" class="headerlink" title="2. 接口和抽象类的区别"></a>2. 接口和抽象类的区别</h2><ul>
<li>抽象类可以提供成员方法的实现细节，而接口(JDK1.7及之前)中只能存在public abstract 方法;</li>
<li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是全局静态常量(public static final修饰)的;</li>
<li><strong>接口中不能含有构造器及静态代码块，而抽象类可以有;</strong></li>
<li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li>
</ul>
<h2 id="3-枚举"><a href="#3-枚举" class="headerlink" title="3. 枚举"></a>3. 枚举</h2><p>枚举是指某个类型的对象是有限个，在类型中一一创建并列举它的对象。用<code>enum</code>修饰</p>
<h3 id="3-0-自定义枚举类-JDK1-5之前"><a href="#3-0-自定义枚举类-JDK1-5之前" class="headerlink" title="3.0.自定义枚举类( JDK1.5之前)"></a>3.0.自定义枚举类( JDK1.5之前)</h3><ul>
<li>构造器私有化</li>
<li>通过常量的方式创建好所有对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Season spring = Season.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个自定义的***枚举类***</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.声明Season的属性，用private final修饰</span></span><br><span class="line">    <span class="comment">// final修饰的变量要手动赋值(显式赋值/代码块赋值/构造方法赋值)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.私有化构造函数，并赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.为自定义的枚举类提供私有化对象</span></span><br><span class="line">    <span class="comment">// 得用public static final修饰</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING = <span class="keyword">new</span> Season(<span class="string">"春天"</span>, <span class="string">"暖"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER = <span class="keyword">new</span> Season(<span class="string">"夏天"</span>, <span class="string">"热"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN = <span class="keyword">new</span> Season(<span class="string">"秋天"</span>, <span class="string">"爽"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER = <span class="keyword">new</span> Season(<span class="string">"冬天"</span>, <span class="string">"冻"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.其他需求：获取枚举类的对象属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.其他需求：提供toString()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Season&#123;"</span> +</span><br><span class="line">                <span class="string">"seasonName='"</span> + seasonName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", seasonDesc='"</span> + seasonDesc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-enum修饰的枚举类-JDK-1-5之后"><a href="#3-1-enum修饰的枚举类-JDK-1-5之后" class="headerlink" title="3.1. enum修饰的枚举类(JDK 1.5之后)"></a>3.1. enum修饰的枚举类(JDK 1.5之后)</h3><ul>
<li>枚举类中的构造器都是<strong>私有化</strong>的</li>
<li>常量对象列表必须要在首行，如果后面还有其他代码，要用<code>;</code>结束</li>
<li>枚举类型不能继承别的类型，<strong>默认继承java.lang.Enum</strong></li>
<li>switch支持枚举</li>
<li>枚举类对象的属性不应被改动，要用<strong>private final修饰属性</strong></li>
<li>枚举类若只有有参构造方法，则在定义每个枚举对象时要明确传入参数的内容</li>
<li>Java中不允许用<code>=</code>枚举常量赋值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Season02 spring = Season02.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个enum定义的***枚举类***</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">enum</span> Season02 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.在enum定义的枚举类创建对象</span></span><br><span class="line">    <span class="comment">// 此处省略了等号和等号左边的public static final Season和等号右边的new Season02</span></span><br><span class="line">    <span class="comment">// 多个对象用 , 隔开，用 ; 结束</span></span><br><span class="line">    <span class="comment">// 如果此枚举类实现了某接口，可在类中重写抽象方法</span></span><br><span class="line">    <span class="comment">// 或在每个对象后面单独重写</span></span><br><span class="line">    SPRING(<span class="string">"春天"</span>, <span class="string">"暖"</span>),</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>, <span class="string">"热"</span>),</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>, <span class="string">"爽"</span>),</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>, <span class="string">"冻"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.声明Season的属性，用private final修饰</span></span><br><span class="line">    <span class="comment">// final修饰的变量要手动赋值(显式赋值/代码块赋值/构造方法赋值)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.私有化构造函数，并赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season02</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.其他需求：获取枚举类的对象属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.其他需求：提供toString()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Season&#123;"</span> +</span><br><span class="line">                <span class="string">"seasonName='"</span> + seasonName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", seasonDesc='"</span> + seasonDesc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-枚举的方法"><a href="#3-2-枚举的方法" class="headerlink" title="3.2. 枚举的方法"></a>3.2. 枚举的方法</h3><ul>
<li><code>names()</code>：返回实例名</li>
<li><code>ordinal()</code>：返回实例声明时的次序，从0开始</li>
<li><code>getDeclaringClass()</code>：返回实例所属的enum类型</li>
<li><code>枚举类型名.values()</code>：返回enum实例的数组，而且该数组的元素严格保持在enum中声明的顺序</li>
<li><code>枚举类型名.valueOf(常量对象的名称)</code>：返回某一个指定的对象</li>
</ul>
<h2 id="4-注解-Annotation"><a href="#4-注解-Annotation" class="headerlink" title="4. 注解(Annotation)"></a>4. 注解(Annotation)</h2><h3 id="4-0-注解概述"><a href="#4-0-注解概述" class="headerlink" title="4.0. 注解概述"></a>4.0. 注解概述</h3><p>Annotation是代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。Annotation可用于修饰包，类，构造器，方法，成员变量，参数，局部变量的声明，这些信息被保存在Annotation的“<strong>name=value</strong>”对中。</p>
<h3 id="4-1-常见注解"><a href="#4-1-常见注解" class="headerlink" title="4.1. 常见注解"></a>4.1. 常见注解</h3><h4 id="4-1-0-文档相关注解"><a href="#4-1-0-文档相关注解" class="headerlink" title="4.1.0. 文档相关注解"></a>4.1.0. 文档相关注解</h4><ul>
<li><strong>@author</strong>： 标明开发该类模块的作者，多个作者之间使用,分割 </li>
<li><strong>@version</strong>：表明该类模块的版本</li>
<li><strong>@see</strong>：可在注释中实现链接跳转，可指向包，类，方法，属性</li>
<li><strong>@since</strong>：从哪个版本开始增加的</li>
<li><strong>@param</strong>：对方法中某参数的说明，如果没有参数就不能写<ul>
<li>格式：@param 形参名 形参类型 形参说明</li>
</ul>
</li>
<li><strong>@return</strong>：对方法返回值的说明，如果方法的返回值类型<strong>是void就不能写</strong><ul>
<li>格式：@return 返回值类型 返回值说明</li>
</ul>
</li>
<li><strong>@exception</strong>：对方法可能抛出的异常进行说明，如果方法没有用throws显式抛出的异常就不能写<ul>
<li>格式：@exception 异常类型 异常说明</li>
</ul>
</li>
<li>@param、@return和@exception都是只用于方法</li>
</ul>
<h4 id="4-1-1-JDK内置的三个基本注解"><a href="#4-1-1-JDK内置的三个基本注解" class="headerlink" title="4.1.1. JDK内置的三个基本注解"></a>4.1.1. JDK内置的三个基本注解</h4><blockquote>
<p>在编译时进行格式检查</p>
</blockquote>
<ul>
<li><strong>@Override</strong>：限定重写父类方法，该注解只能用于方法</li>
<li><strong>@Deprecated</strong>：用于表示所修饰的元素(类，方法等)已过时</li>
<li><strong>@SuppressWarnings</strong>：抑制编译器警告</li>
</ul>
<h4 id="4-1-2-JUnit的单元测试注解"><a href="#4-1-2-JUnit的单元测试注解" class="headerlink" title="4.1.2. JUnit的单元测试注解"></a>4.1.2. JUnit的单元测试注解</h4><ul>
<li><strong>@Test</strong>：加在方法上，<strong>该方法必须是公共的，无参，无返回值，不能是static</strong></li>
<li><strong>@Before</strong>：在@Test标记的方法之前运行</li>
<li><strong>@After</strong>：在@Test标记的方法之后运行</li>
</ul>
<p>……</p>
<h3 id="4-2-元注解"><a href="#4-2-元注解" class="headerlink" title="4.2. 元注解"></a>4.2. 元注解</h3><p>JDK的元注解用于修饰其他注解<br>JDK5.0提供了4个标准的元注解</p>
<h4 id="4-2-0-Retention"><a href="#4-2-0-Retention" class="headerlink" title="4.2.0. @Retention"></a>4.2.0. @Retention</h4><p>指定注解的生命周期。即可以保留到什么阶段<br>Retention配置的参数类型<code>value</code>是一个枚举类型RetentionPolicy。</p>
<ul>
<li><strong>@Retention(RetentionPolicy.SOURCE)</strong>：在源文件中有效(即源文件保留)，编译器直接丢弃这种策略的注释</li>
<li><strong>@Retention(RetentionPolicy.CLASS)</strong>：在class文件中有效(即class保留)，当运行Java程序时，JVM不会保留注解，这是默认值。</li>
<li><strong>@Retention(RetentionPolicy.RUNTIME)</strong>：在运行时有效(即运行时保留)，当运行Java程序时，JVM会保留注释。</li>
</ul>
<h4 id="4-2-1-Target"><a href="#4-2-1-Target" class="headerlink" title="4.2.1. @Target"></a>4.2.1. @Target</h4><p>指定注解使用的目标位置<br>@Target配置的参数<code>value</code>是一个枚举数组ElementType。</p>
<ul>
<li><strong>@Target(ElementType.CONSTRUCTOR)</strong>：用于描述构造器</li>
<li><strong>@Target(ElementType.FIELD)</strong>：用于描述域，属性</li>
<li><strong>@Target(ElementType.LOCAL_VARIABLE)</strong>：用于描述局部变量</li>
<li><strong>@Target(ElementType.METHOD)</strong>：用于描述方法</li>
<li><strong>@Target(ElementType.PACKAGE)</strong>：用于描述包</li>
<li><strong>@Target(ElementType.PARAMETER)</strong>：用于描述参数</li>
<li><strong>@Target(ElementType.TYPE)</strong>：用于描述类、接口(包括注解类型)或enum声明</li>
<li><strong>@Target(ElementType.TYPE_PARAMETER)</strong>：表示该注解能写在类型变量的声明语句(如：泛型声明)</li>
<li><strong>@Target(ElementType.TYPE_USE)</strong>：表示该注解能写在使用类型的任何语句中</li>
</ul>
<h4 id="4-2-2-Documented"><a href="#4-2-2-Documented" class="headerlink" title="4.2.2. @Documented"></a>4.2.2. @Documented</h4><p>表示是否被Javadoc读取。<br>定义为Documented的注解必须设置注解Retention的value值为RetetionPolicy.RUNTIME。</p>
<h4 id="4-2-3-Inherited"><a href="#4-2-3-Inherited" class="headerlink" title="4.2.3. @Inherited"></a>4.2.3. @Inherited</h4><p>表示是否被其子类继承。子类会自动具有该注解</p>
<h3 id="4-3-自定义注解"><a href="#4-3-自定义注解" class="headerlink" title="4.3. 自定义注解"></a>4.3. 自定义注解</h3><ul>
<li>使用<strong>@Interface</strong>关键字</li>
<li>自定义注解自动继承了java.lang.annotation.Annotation接口</li>
</ul>
<h4 id="4-3-0-无参注解"><a href="#4-3-0-无参注解" class="headerlink" title="4.3.0. 无参注解"></a>4.3.0. 无参注解</h4><h5 id="声明格式"><a href="#声明格式" class="headerlink" title="声明格式"></a>声明格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">@元注解</span><br><span class="line">[修饰符] <span class="meta">@Interface</span> 注解名 &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-1-有参注解"><a href="#4-3-1-有参注解" class="headerlink" title="4.3.1. 有参注解"></a>4.3.1. 有参注解</h4><h5 id="声明格式-1"><a href="#声明格式-1" class="headerlink" title="声明格式"></a>声明格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">@元注解</span><br><span class="line">[修饰符] <span class="meta">@Interface</span> 注解名 &#123;</span><br><span class="line">	配置参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h5><ul>
<li>一个参数可以有多个配置参数</li>
<li>配置参数可以有默认值</li>
<li>配置参数的类型有要求：类型只能是八种基本类型、String类型、Class类型、enum类型、Annotation类型，及以上所有类型的数组</li>
</ul>
<h6 id="配置参数格式"><a href="#配置参数格式" class="headerlink" title="配置参数格式"></a>配置参数格式</h6><ul>
<li><strong>数据类型 参数名()</strong></li>
<li><strong>数据类型 参数名() default 默认值</strong></li>
</ul>
<h5 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">@注解(参数赋值)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果配置参数有默认值，那么使用时不需要赋值</li>
<li>如果配置参数只有一个，且名称是value，那么赋值时可以省略<code>value=</code></li>
<li>参数赋值的格式：参数名 = 参数值<ul>
<li>如果赋值参数个数为多个，用<code>,</code>分割</li>
<li>如果参数类型是数组类型<ul>
<li>只有一个元素，可以省略<code>{}</code></li>
<li>有多个元素，则需要<code>{}</code></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
        <tag>枚举</tag>
        <tag>抽象类</tag>
        <tag>接口</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>about</title>
    <url>/about/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>文章分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>文章标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
